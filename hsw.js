const imports = {
  "a": {
    "a": null /* TODO: Provide import imp_0 */,
    "b": null /* TODO: Provide import imp_1 */,
    "c": null /* TODO: Provide import imp_2 */,
    "d": null /* TODO: Provide import imp_3 */,
    "e": null /* TODO: Provide import imp_4 */,
    "f": null /* TODO: Provide import imp_5 */,
    "g": null /* TODO: Provide import imp_6 */,
    "h": null /* TODO: Provide import imp_7 */,
    "i": null /* TODO: Provide import imp_8 */,
    "j": null /* TODO: Provide import imp_9 */,
    "k": null /* TODO: Provide import imp_10 */,
    "l": null /* TODO: Provide import imp_11 */,
    "m": null /* TODO: Provide import imp_12 */,
    "n": null /* TODO: Provide import imp_13 */,
    "o": null /* TODO: Provide import imp_14 */,
    "p": null /* TODO: Provide import imp_15 */,
    "q": null /* TODO: Provide import imp_16 */,
    "r": null /* TODO: Provide import imp_17 */,
    "s": null /* TODO: Provide import imp_18 */,
    "t": null /* TODO: Provide import imp_19 */,
    "u": null /* TODO: Provide import imp_20 */,
    "v": null /* TODO: Provide import imp_21 */,
    "w": null /* TODO: Provide import imp_22 */,
    "x": null /* TODO: Provide import imp_23 */,
    "y": null /* TODO: Provide import imp_24 */,
    "z": null /* TODO: Provide import imp_25 */,
    "A": null /* TODO: Provide import imp_26 */,
    "B": null /* TODO: Provide import imp_27 */,
    "C": null /* TODO: Provide import imp_28 */,
    "D": null /* TODO: Provide import imp_29 */,
    "E": null /* TODO: Provide import imp_30 */,
    "F": null /* TODO: Provide import imp_31 */,
    "G": null /* TODO: Provide import imp_32 */,
    "H": null /* TODO: Provide import imp_33 */,
    "I": null /* TODO: Provide import imp_34 */,
    "J": null /* TODO: Provide import imp_35 */,
    "K": null /* TODO: Provide import imp_36 */,
    "L": null /* TODO: Provide import imp_37 */,
    "M": null /* TODO: Provide import imp_38 */,
    "N": null /* TODO: Provide import imp_39 */,
    "O": null /* TODO: Provide import imp_40 */,
    "P": null /* TODO: Provide import imp_41 */,
    "Q": null /* TODO: Provide import imp_42 */,
    "R": null /* TODO: Provide import imp_43 */,
    "S": null /* TODO: Provide import imp_44 */,
    "T": null /* TODO: Provide import imp_45 */,
    "U": null /* TODO: Provide import imp_46 */,
    "V": null /* TODO: Provide import imp_47 */,
    "W": null /* TODO: Provide import imp_48 */,
    "X": null /* TODO: Provide import imp_49 */,
    "Y": null /* TODO: Provide import imp_50 */,
    "Z": null /* TODO: Provide import imp_51 */,
    "_": null /* TODO: Provide import imp_52 */,
    "$": null /* TODO: Provide import imp_53 */,
    "aa": null /* TODO: Provide import imp_54 */,
    "ba": null /* TODO: Provide import imp_55 */,
    "ca": null /* TODO: Provide import imp_56 */,
    "da": null /* TODO: Provide import imp_57 */,
    "ea": null /* TODO: Provide import imp_58 */,
    "fa": null /* TODO: Provide import imp_59 */,
    "ga": null /* TODO: Provide import imp_60 */,
    "ha": null /* TODO: Provide import imp_61 */,
    "ia": null /* TODO: Provide import imp_62 */,
    "ja": null /* TODO: Provide import imp_63 */,
    "ka": null /* TODO: Provide import imp_64 */,
    "la": null /* TODO: Provide import imp_65 */,
    "ma": null /* TODO: Provide import imp_66 */,
    "na": null /* TODO: Provide import imp_67 */,
    "oa": null /* TODO: Provide import imp_68 */,
    "pa": null /* TODO: Provide import imp_69 */,
    "qa": null /* TODO: Provide import imp_70 */,
    "ra": null /* TODO: Provide import imp_71 */,
    "sa": null /* TODO: Provide import imp_72 */,
    "ta": null /* TODO: Provide import imp_73 */,
    "ua": null /* TODO: Provide import imp_74 */,
    "va": null /* TODO: Provide import imp_75 */,
    "wa": null /* TODO: Provide import imp_76 */,
    "xa": null /* TODO: Provide import imp_77 */,
    "ya": null /* TODO: Provide import imp_78 */,
    "za": null /* TODO: Provide import imp_79 */,
    "Aa": null /* TODO: Provide import imp_80 */,
    "Ba": null /* TODO: Provide import imp_81 */,
    "Ca": null /* TODO: Provide import imp_82 */,
    "Da": null /* TODO: Provide import imp_83 */,
    "Ea": null /* TODO: Provide import imp_84 */,
    "Fa": null /* TODO: Provide import imp_85 */,
    "Ga": null /* TODO: Provide import imp_86 */,
    "Ha": null /* TODO: Provide import imp_87 */,
    "Ia": null /* TODO: Provide import imp_88 */,
    "Ja": null /* TODO: Provide import imp_89 */,
    "Ka": null /* TODO: Provide import imp_90 */,
    "La": null /* TODO: Provide import imp_91 */,
    "Ma": null /* TODO: Provide import imp_92 */,
    "Na": null /* TODO: Provide import imp_93 */,
    "Oa": null /* TODO: Provide import imp_94 */,
    "Pa": null /* TODO: Provide import imp_95 */,
    "Qa": null /* TODO: Provide import imp_96 */,
    "Ra": null /* TODO: Provide import imp_97 */,
    "Sa": null /* TODO: Provide import imp_98 */,
    "Ta": null /* TODO: Provide import imp_99 */,
    "Ua": null /* TODO: Provide import imp_100 */,
    "Va": null /* TODO: Provide import imp_101 */,
    "Wa": null /* TODO: Provide import imp_102 */,
    "Xa": null /* TODO: Provide import imp_103 */,
    "Ya": null /* TODO: Provide import imp_104 */,
    "Za": null /* TODO: Provide import imp_105 */,
    "_a": null /* TODO: Provide import imp_106 */,
    "$a": null /* TODO: Provide import imp_107 */,
    "ab": null /* TODO: Provide import imp_108 */,
    "bb": null /* TODO: Provide import imp_109 */,
    "cb": null /* TODO: Provide import imp_110 */,
    "db": null /* TODO: Provide import imp_111 */,
    "eb": null /* TODO: Provide import imp_112 */,
    "fb": null /* TODO: Provide import imp_113 */,
    "gb": null /* TODO: Provide import imp_114 */,
    "hb": null /* TODO: Provide import imp_115 */,
    "ib": null /* TODO: Provide import imp_116 */,
    "jb": null /* TODO: Provide import imp_117 */,
    "kb": null /* TODO: Provide import imp_118 */,
    "lb": null /* TODO: Provide import imp_119 */,
    "mb": null /* TODO: Provide import imp_120 */,
    "nb": null /* TODO: Provide import imp_121 */,
    "ob": null /* TODO: Provide import imp_122 */
  }
};

(function () {

  //---------------HELPERS----------------
  function i64(b) {
    return BigInt(b);
  }
  function f32(b) {
    var dv = new DataView(new ArrayBuffer(4));
    dv.setUint32(0, b, true);
    return dv.getFloat32(0, true);
  }
  function f64(b) {
    var dv = new DataView(new ArrayBuffer(8));
    dv.setBigUint64(0, BigInt(b), true);
    return dv.getFloat64(0, true);
  }
  function rotl32(x, y) {
    return (x << y) | (x >>> (32 - y));
  }
  function rotr32(x, y) {
    return (x >>> y) | (x << (32 - y));
  }
  function rotl64(x, y) {
    return (x << y) | (x >> (64n - y));
  }
  function rotr64(x, y) {
    return (x >> y) | (x << (64n - y));
  }
  function copysign(x, y) {
    return Math.sign(y) < 0 ? -Math.abs(x) : Math.abs(x);
  }
  function UNHANDLED_OP(op_name, lhs, rhs) {
    console.error("Called unhandled WASM op:", op_name, "with", lhs, "and", rhs);
    return 0;
  }
  //---------------HELPERS----------------



  const memory0Buffer = new ArrayBuffer(18 * 65536);
  const viewI32_0 = new Int32Array(memory0Buffer);
  const viewI64_0 = new BigInt64Array(memory0Buffer);
  const viewF32_0 = new Float32Array(memory0Buffer);
  const viewF64_0 = new Float64Array(memory0Buffer);
  const memory = memory0Buffer;
  const table0 = new Array(100).fill(null);
  const table = table0;

  const passiveSegments = [
  ];

  let global0 = 1048576;
  table0[1] = func158;
  table0[3] = Nb;
  table0[4] = func140;
  table0[5] = Nb;
  table0[7] = Kb;
  table0[8] = lookupAndCall;
  table0[9] = func202;
  table0[10] = func350;
  table0[11] = func287;
  table0[12] = func311;
  table0[13] = func204;
  table0[14] = func323;
  table0[15] = func366;
  table0[16] = func177;
  table0[17] = func412;
  table0[18] = func453;
  table0[19] = func131;
  table0[20] = func206;
  table0[21] = func157;
  table0[22] = func360;
  table0[23] = func363;
  table0[24] = func327;
  table0[25] = func452;
  table0[26] = func246;
  table0[27] = func334;
  table0[28] = func251;
  table0[29] = func146;
  table0[30] = func286;
  table0[31] = func208;
  table0[32] = encodeUtf8;
  table0[33] = func252;
  table0[34] = func240;
  table0[35] = func185;
  table0[36] = processLocalVarsAndCall;
  table0[37] = func409;
  table0[38] = func431;
  table0[39] = func261;
  table0[40] = handleFileState;
  table0[41] = func143;
  table0[42] = func202;
  table0[43] = func416;
  table0[45] = pb;
  table0[46] = func326;
  table0[47] = dispatchTable;
  table0[48] = func362;
  table0[49] = decrementAndCheck;
  table0[50] = func132;
  table0[51] = parseData;
  table0[52] = func281;
  table0[53] = checkSrcOffset;
  table0[54] = func187;
  table0[55] = func235;
  table0[56] = incrementCounter;
  table0[57] = func436;
  table0[58] = func128;
  table0[59] = func127;
  table0[60] = func340;
  table0[61] = func209;
  table0[62] = func314;
  table0[63] = func402;
  table0[64] = func249;
  table0[65] = func435;
  table0[66] = func150;
  table0[67] = func396;
  table0[68] = func364;
  table0[69] = func277;
  table0[70] = func278;
  table0[71] = func273;
  table0[72] = func173;
  table0[73] = callFromTableWithArgs;
  table0[74] = func272;
  table0[75] = callFromTable;
  table0[76] = func135;
  table0[77] = func403;
  table0[78] = func196;
  table0[79] = func373;
  table0[80] = func301;
  table0[81] = func287;
  table0[82] = func202;
  table0[83] = dispatchCall;
  table0[84] = func138;
  table0[85] = func184;
  table0[86] = allocateAndInitMemory;
  table0[87] = lookupAndApply;
  table0[88] = func396;
  table0[89] = func262;
  table0[90] = func229;
  table0[91] = func370;
  table0[92] = func328;
  table0[93] = func160;
  table0[94] = func390;
  table0[95] = func211;
  table0[96] = func152;
  table0[97] = func285;
  table0[98] = func398;
  table0[99] = func330;

  // func0 is getTlsValue
  function getTlsValue(local0) {


  }


  // func1 is handleStateTransitions
  function handleStateTransitions(local0, local1) {


  }


  // func2 is initAndLoop
  function initAndLoop(local0) {


  }


  // func3 is handleState0
  function handleState0(local0) {


  }


  // func4 is calcMaskedChunkAddr
  function calcMaskedChunkAddr(local0) {


  }


  // func5 is processBlock
  function processBlock(local0, local1) {


  }


  // func6 is parseCompressedData
  function parseCompressedData(local0, local1, local2) {


  }


  // func7 is updateStateWithMemXor
  function updateStateWithMemXor(local0, local1, local2, local3) {


  }


  // func8 is allocateAndInitBlock
  function allocateAndInitBlock(local0) {


  }


  // func9 is initContextAndLoop
  function initContextAndLoop(local0, local1) {


  }


  // func10 is decodeMultiByte
  function decodeMultiByte(local0) {


  }


  // func11 is initChunk
  function initChunk(local0, local1) {


  }


  // func12 is checkAndProcessBlock
  function checkAndProcessBlock(local0) {


  }


  // func13 is handleResizeAndLoop
  function handleResizeAndLoop(local0, local1) {


  }


  // func14 is checkAndProcessNextChunk
  function checkAndProcessNextChunk(local0, local1) {


  }


  // func15 is copyLoop
  function copyLoop(local0) {


  }


  // func16 is initBlockStateLoop
  function initBlockStateLoop() {


  }


  // func17 is decodeUtf8Char
  function decodeUtf8Char(local0, local1) {


  }


  // func18 is allocAndInitBlock
  function allocAndInitBlock(local0) {


  }


  // func19 is processCompressedData
  function processCompressedData(local0, local1, local2) {


  }


  // func20 is checkBlockProperties
  function checkBlockProperties(local0, local1) {


  }


  // func21 is checkGlobalOffset
  function checkGlobalOffset(local0, local1, local2) {


  }


  // func22 is runStateLoop
  function runStateLoop(local0) {


  }


  // func23 is decodeCharAndFinalize
  function decodeCharAndFinalize() {


  }


  // func24 is shiftAndCombineByteMasks
  function shiftAndCombineByteMasks(local0) {


  }


  // func25 is diffMemBytes
  function diffMemBytes() {


  }


  // func26 is initContextAndProcess
  function initContextAndProcess(local0) {


  }


  // func27 is decodeCharAndCount
  function decodeCharAndCount(local0, local1) {


  }


  // func28 is processImageData
  function processImageData(local0) {


  }


  // func29 is updateNodeValues
  function updateNodeValues(local0) {


  }


  // func30 is decodeCharAndReturnResult
  function decodeCharAndReturnResult(local0) {


  }


  function func31() {


  }


  function func32(local0, local1) {


  }


  function func33(local0) {


  }


  function func34(local0, local1) {


  }


  function func35(local0) {


  }


  function func36(local0) {


  }


  function func37(local0, local1) {


  }


  function func38(local0, local1, local2) {


  }


  function func39(local0) {


  }


  function func40(local0) {


  }


  function func41(local0) {


  }


  function func42(local0, local1) {


  }


  function func43(local0, local1, local2) {


  }


  function func44(local0, local1) {


  }


  function func45(local0, local1, local2) {


  }


  function func46(local0, local1) {


  }


  function func47(local0) {


  }


  function func48(local0) {


  }


  function func49(local0, local1) {


  }


  function func50(local0, local1) {


  }


  function func51(local0, local1, local2) {


  }


  function func52(local0, local1, local2) {


  }


  function func53(local0, local1) {


  }


  function func54(local0) {


  }


  function func55(local0) {


  }


  function func56(local0) {


  }


  function func57(local0) {


  }


  function func58(local0) {


  }


  function func59(local0) {


  }


  function func60(local0, local1) {


  }


  function func61(local0, local1) {


  }


  function func62(local0) {


  }


  function func63(local0) {


  }


  function func64(local0) {


  }


  function func65(local0) {


  }


  function func66(local0) {


  }


  function func67(local0, local1, local2) {


  }


  function func68(local0, local1) {


  }


  function func69(local0) {


  }


  function func70(local0) {


  }


  function func71() {


  }


  function func72(local0, local1, local2) {


  }


  function func73(local0) {


  }


  function func74(local0) {


  }


  function func75(local0, local1, local2, local3, local4) {


  }


  function func76(local0) {


  }


  function func77() {


  }


  function func78(local0) {


  }


  function func79(local0) {


  }


  function func80(local0) {


  }


  function func81() {


  }


  function func82() {


  }


  function func83(local0) {


  }


  function func84(local0) {


  }


  function func85(local0) {


  }


  function func86(local0) {


  }


  function func87(local0, local1) {


  }


  function func88(local0, local1, local2) {


  }


  function func89(local0) {


  }


  function func90(local0, local1, local2) {


  }


  function func91(local0, local1, local2) {


  }


  function func92(local0) {


  }


  function func93() {


  }


  function func94() {


  }


  function func95(local0) {


  }


  function func96(local0) {


  }


  function func97(local0, local1, local2) {


  }


  function func98(local0) {


  }


  function func99(local0) {


  }


  function func100(local0, local1) {


  }


  function func101(local0) {


  }


  function func102(local0, local1) {


  }


  function func103() {


  }


  function func104(local0) {


  }


  function func105(local0) {


  }


  function func106(local0, local1) {


  }


  function func107(local0, local1, local2) {


  }


  function func108(local0) {


  }


  function func109(local0, local1) {


  }


  function func110(local0) {


  }


  function func111(local0) {


  }


  function func112(local0, local1) {


  }


  function func113(local0, local1, local2) {


  }


  function func114(local0, local1) {


  }


  function func115(local0, local1) {


  }


  function func116(local0) {


  }


  function func117(local0) {


  }


  function func118() {


  }


  function func119(local0) {


  }


  function func120(local0) {


  }


  function func121(local0, local1, local2) {


  }


  function func122(local0, local1) {


  }


  function func123(local0, local1, local2, local3) {

    return func125(local3);

  }


  // func124 is Ab
  function Ab(local0, local1, local2, local3, local4) {
    let Error, Unreachable, a, code, j, local5, local6, loop0, reached;

    local6 = 1;
    loop0: while (true) {
      {
        {
          {
            {
              switch (local6) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            global0 = (local5 + 0x380);
            return local4;
          }
          local5 = (global0 - 0x380);
          global0 = (global0 - 0x380);
          Qb(local5, local1, Pb(0x364), local5, local0, Pb(0x360), local5, 1n, 8);
          local4 = imports['a']['j']((local5 + 0x37C), 0x100B98);
          local6 = (0n ? local5 : wb(8));
          return;
        }
        Gb(local5, 0x374);
        local6 = (3 ? 3 : 0);
        return;
      }
      local6 = 0;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return func455(2, 0, (local5 + 0x10));

  }

  /*
   * AI Summary: The function `func124` primarily acts as a conditional return wrapper, either returning immediately (cases 1-3) or performing WASM memory operations before conditionally returning or looping based on the result.
  
   */

  /* renamed vars: local4=state, local5=size, local6=flags */
  function func125(local0, local1, local2, local3) {
    let Error, Unreachable, code, flags, local10, local7, local8, local9, loop0, reached, size, state;
    state = 0x15;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                switch (state) {
                                                                                  case 0: continue loop0;
                                                                                  case 1: return;
                                                                                  case 2: return;
                                                                                  case 3: return;
                                                                                  case 4: return;
                                                                                  case 5: return;
                                                                                  case 6: return;
                                                                                  case 7: return;
                                                                                  case 8: return;
                                                                                  case 9: return;
                                                                                  case 10: return;
                                                                                  case 11: return;
                                                                                  case 12: return;
                                                                                  case 13: return;
                                                                                  case 14: return;
                                                                                  case 15: return;
                                                                                  case 16: return;
                                                                                  case 17: return;
                                                                                  case 18: return;
                                                                                  case 19: return;
                                                                                  case 20: return;
                                                                                  case 21: return;
                                                                                  case 22: return;
                                                                                  case 23: return;
                                                                                  case 24: return;
                                                                                  case 25: return;
                                                                                  case 26: return;
                                                                                  case 27: return;
                                                                                  case 28: return;
                                                                                  case 29: return;
                                                                                  case 30: return;
                                                                                  case 31: return;
                                                                                  case 32: return;
                                                                                  case 33: return;
                                                                                  case 34: return;
                                                                                  case 35: return;
                                                                                  case 36: return;
                                                                                  case 37: return;
                                                                                  default: return;
                                                                                }
                                                                              }
                                                                              return;
                                                                            }
                                                                            state = (local7 ? 0xE : size);
                                                                            return;
                                                                          }
                                                                          local7 = (local0 - 8);
                                                                          size = (local9 + (local0 - 8));
                                                                          state = (local9 ? 0xF : local1);
                                                                          return;
                                                                        }
                                                                        state = (local9 ? 0x12 : (local1 | 4));
                                                                        return;
                                                                      }
                                                                      state = (0x100 ? 0x12 : local1);
                                                                      return;
                                                                    }
                                                                    local1 = (local1 + local7);
                                                                    local2 = (flags + local7);
                                                                    return;
                                                                  }
                                                                  local2 = 0;
                                                                  state = (0xFFFEFFCC ? 0x23 : local3);
                                                                  return;
                                                                }
                                                                local1 = (0xB ? ((local3 + 0xB) & 0xFFFFFFF8) : local3);
                                                                state = (size ? 3 : 5);
                                                                return;
                                                              }
                                                              return 0;
                                                            }
                                                            flags = ub(0x13, size, 4);
                                                            state = ((ub(0x13, size, 4) & 2) ? 0x10 : 0x12);
                                                            return;
                                                          }
                                                          state = (9 ? 7 : local2);
                                                          return;
                                                        }
                                                        state = (size ? 0x1D : ub(0x25, 0, 0x10FE7C));
                                                        return;
                                                      }
                                                      local1 = ub(local3, local8, 0);
                                                      local1 = ((ub(local3, local8, 0) & 0xFFFFFFF8) + ((local1 & 3) ? 0xFFFFFFFC : 0xFFFFFFF8));
                                                      func458((local3 ? ((ub(local3, local8, 0) & 0xFFFFFFF8) + ((local1 & 3) ? 0xFFFFFFFC : 0xFFFFFFF8)) : local1));
                                                      handleMemoryValue(local0);
                                                      return local0;
                                                    }
                                                    throw new Error('Unreachable code reached');
                                                  }
                                                  local3 = (local9 - local1);
                                                  state = (0xF ? 0x11 : (local9 - local1));
                                                  return;
                                                }
                                                func305(size, local10);
                                                local3 = (flags - local1);
                                                state = (0x10 ? 0x1A : (flags - local1));
                                                return;
                                              }
                                              local1 = (local1 + local7);
                                              return;
                                            }
                                            local1 = func393(0x23, local3);
                                            state = (func393(0x23, local3) ? func159(local3) : 0xD);
                                            return;
                                          }
                                          local10 = (flags & 0xFFFFFFF8);
                                          flags = ((flags & 0xFFFFFFF8) + local9);
                                          state = (local1 ? 0x12 : ((flags & 0xFFFFFFF8) + local9));
                                          return;
                                        }
                                        local1 = (size + local7);
                                        local3 = 0;
                                        local1 = 0;
                                        state = 0;
                                        return;
                                      }
                                      local8 = (local0 - 4);
                                      flags = ub(0xE, (local0 - 4), 0);
                                      local9 = (ub(0xE, (local0 - 4), 0) & 0xFFFFFFF8);
                                      size = (flags & 3);
                                      state = ((((flags & 3) ? 4 : 8) + local1) ? 0x20 : (ub(0xE, (local0 - 4), 0) & 0xFFFFFFF8));
                                      return;
                                    }
                                    size = (ub(0x12, 0, 0x10FE70) + local9);
                                    state = (local1 ? 0x1C : (ub(0x12, 0, 0x10FE70) + local9));
                                    return;
                                  }
                                  state = (0x20001 ? 0x12 : (local9 - local1));
                                  return;
                                }
                                state = (local9 ? 0xE : local7);
                                return;
                              }
                              local1 = (flags + local7);
                              return;
                            }
                            func458((local3 ? local1 : local1));
                            local3 = ub(0xE, local8, 0);
                            size = (ub(0xE, local8, 0) & 0xFFFFFFF8);
                            local3 = (local3 & 3);
                            state = ((((local3 & 3) ? 4 : 8) + local1) ? 0x24 : (ub(0xE, local8, 0) & 0xFFFFFFF8));
                            return;
                          }
                          local3 = (size - local1);
                          state = (0xF ? 0x21 : (size - local1));
                          return;
                        }
                        state = (size ? 0xA : ub(0x16, 0, 0x10FE78));
                        return;
                      }
                      initStateReturnOffset(local3);
                      local2 = local2;
                      state = (local2 ? 0x1B : 9);
                      return;
                    }
                    handleMemoryValue(local0);
                    state = 0x23;
                    return;
                  }
                  local7 = (local1 + 0x27);
                  state = (size ? 0x18 : 0xB);
                  return;
                }
                local1 = (local1 + local7);
                local2 = (size + local7);
                state = 0;
                return;
              }
              local2 = (local1 + local7);
              local1 = (size - local1);
              return;
            }
            return local2;
          }
          state = (local3 ? 1 : 0x1F);
          return;
        }
        size = (ub(0x22, 0, 0x10FE74) + local9);
        state = (local1 ? 0x12 : (ub(0x22, 0, 0x10FE74) + local9));
        return;
      }
    }
    return local0;

  }

  /*
   * AI Summary: The function implements a state machine that likely handles memory allocation or manipulation, using bitwise operations and external functions (ub, func458, func465, func305, func159, func393, func361) based on various size and flag conditions. 
  
   */

  function func126(local0) {
    let local1;

    local1 = (global0 - 0x10);
    Gb(local1, 0xF);
    return sb((global0 - 0x10), local0, 0xF);

  }


  function func127() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func128(local0) {
    let Error, Unreachable, code, local1, loop0, reached;

    local1 = 4;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    switch (local1) {
                      case 0: continue loop0;
                      case 1: return;
                      case 2: return;
                      case 3: return;
                      case 4: return;
                      case 5: return;
                      case 6: return;
                      default: return;
                    }
                  }
                  Gb(0, 0x10FC74);
                  if (2) {
                  } else {
                  }
                  local1 = 2;
                  return;
                }
                throw new Error('Unreachable code reached');
              }
              local1 = 6;
              return;
            }
            local0 = (local0 - 8);
            local1 = (ub(func410(5, local0), (local0 - 8), 0) + 1);
            if (local1) {
            } else {
            }
            local1 = 1;
            return;
          }
          Gb(local0, 0x14);
          if (sb(local0, 1, 0x14)) {
          } else {
          }
          local1 = 3;
          return;
        }
        local1 = 2;
        return;
      }
    }

  }

  /*
   * AI Summary: `func128` determines a return code (1, 2, 3, 4, 5, 6, or default) based on the result of bit manipulation and a comparison performed on an integer input `local0`. 
  
   */

  function func129() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func130() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: state=local2 */
  function func131(local0, local1) {
    let local2, local3, local4, loop0;
    local2 = 1;
    loop0: while (true) {
      {
        {
          {
            switch (local2) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          local2 = (local0 & 0xF);
          local3 = (local3 - 1);
          local0 = (local0 >>> 4);
          if (0xF) {
          } else {
          }
          local2 = 2;
          return;
        }
        local4 = (global0 - 0x80);
        global0 = (global0 - 0x80);
        local0 = ub(0, local0, 0);
        local3 = 0;
        local2 = 0;
        return;
      }
      processStream(((local3 + local4) + 0x80), (0 - local3));
      global0 = (local4 + 0x80);
    }
    return 2;

  }

  /*
   * AI Summary: The function `func131` appears to prematurely return a value (1 or 2) without executing most of its code, effectively acting as a no-op or limited conditional return based on an initial state. 
  
   */

  function func132() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func133 is Rb
  function Rb() {
    let Attempted, ERROR, FATAL, PEEK, an, empty, from, local, peek, stack, tee, to;
    /* ERROR: FATAL PEEK: Attempted to peek from an empty stack in local.tee */
  }


  // func134 is pb
  function pb(local0, local1, local2) {
    let Error, Unreachable, code, local3, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            switch (local3) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          if (local0) {
          } else {
          }
          local3 = 1;
          return;
        }
        throw new Error('Unreachable code reached');
      }
    }
    table0[ub(local2, local1, 0x10)](func217(), local0);

  }

  /*
   * AI Summary: `func134` conditionally calls a function from `table0` indexed by a bounded value derived from `local1` and `local2`, but its control flow ensures it often returns early without executing the table lookup. 
  
   */

  function func135(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            switch (local5) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          if (local0) {
          } else {
          }
          local5 = 2;
          return;
        }
        table0[ub(local4, local1, 0x10)](1, local0, local2, local3);
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func135` conditionally executes a function from `table0` based on `local4` and `local1` or returns based on the value of an implicitly defined `local5`.
  
   */

  // func136 is Ob
  function Ob() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func137 is Nb
  function Nb(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, local6, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            switch (local6) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          local5 = (global0 - 0x10);
          global0 = (global0 - 0x10);
          if (local1) {
          } else {
          }
          local6 = 1;
          return;
        }
        throw new Error('Unreachable code reached');
      }
    }
    table0[ub(local4, local2, 0x10)](func217(), (local5 + 8), local1, local3);
    local1 = ub(0x32, local5, 0xC);
    local2 = ub(local0, local5, 8);
    local2 = (local2 & 1);
    global0 = (local5 + 0x10);

  }

  /*
   * AI Summary: `func137` iteratively processes data using a lookup table based on input parameters, decrementing a global offset (`global0`) by 16 bytes per iteration until a specific condition is met, eventually returning or throwing an error. 
  
   */

  function func138(local0, local1) {

    func354(wb(0), 1, local1);
    return local0;

  }


  function func139() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func140() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func141() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func142() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func143(local0, local1) {

    func438(ub(ub(local1, local0, 0), local0, 4));

  }


  function func144() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func145() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  function func146() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local2=memBlock, local3=returnCode, local4=tempValue, local5=hasValue */
  function func147(local0, local1) {
    let hasValue, local6, local7, loop0, memBlock, returnCode, tempValue;
    returnCode = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          switch (returnCode) {
                            case 0: continue loop0;
                            case 1: return;
                            case 2: return;
                            case 3: return;
                            case 4: return;
                            case 5: return;
                            case 6: return;
                            case 7: return;
                            case 8: return;
                            case 9: return;
                            default: return;
                          }
                        }
                        tempValue = (tempValue + 1);
                        if (hasValue) {
                        } else {
                        }
                        returnCode = 1;
                        return;
                      }
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              Gb((tempValue + local6), 0);
                                                                                                                              switch (-7) {
                                                                                                                                case 0: continue loop0;
                                                                                                                                case 1: return;
                                                                                                                                case 2: return;
                                                                                                                                case 3: return;
                                                                                                                                case 4: return;
                                                                                                                                case 5: return;
                                                                                                                                case 6: return;
                                                                                                                                case 7: return;
                                                                                                                                case 8: return;
                                                                                                                                case 9: return;
                                                                                                                                case 10: return;
                                                                                                                                case 11: return;
                                                                                                                                case 12: return;
                                                                                                                                case 13: return;
                                                                                                                                case 14: return;
                                                                                                                                case 15: return;
                                                                                                                                case 16: return;
                                                                                                                                case 17: return;
                                                                                                                                case 18: return;
                                                                                                                                case 19: return;
                                                                                                                                case 20: return;
                                                                                                                                case 21: return;
                                                                                                                                case 22: return;
                                                                                                                                case 23: return;
                                                                                                                                case 24: return;
                                                                                                                                case 25: return;
                                                                                                                                case 26: return;
                                                                                                                                case 27: return;
                                                                                                                                case 28: return;
                                                                                                                                case 29: return;
                                                                                                                                case 30: return;
                                                                                                                                case 31: return;
                                                                                                                                case 32: return;
                                                                                                                                case 33: return;
                                                                                                                                case 34: return;
                                                                                                                                case 35: return;
                                                                                                                                case 36: return;
                                                                                                                                case 37: return;
                                                                                                                                case 38: return;
                                                                                                                                case 39: return;
                                                                                                                                case 40: return;
                                                                                                                                case 41: return;
                                                                                                                                case 42: return;
                                                                                                                                case 43: return;
                                                                                                                                case 44: return;
                                                                                                                                case 45: return;
                                                                                                                                case 46: return;
                                                                                                                                case 47: return;
                                                                                                                                case 48: return;
                                                                                                                                case 49: return;
                                                                                                                                default: return;
                                                                                                                              }
                                                                                                                            }
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  return;
                                                                                                                }
                                                                                                                return;
                                                                                                              }
                                                                                                              return;
                                                                                                            }
                                                                                                            return;
                                                                                                          }
                                                                                                          return;
                                                                                                        }
                                                                                                        return;
                                                                                                      }
                                                                                                      return;
                                                                                                    }
                                                                                                    return;
                                                                                                  }
                                                                                                  return;
                                                                                                }
                                                                                                return;
                                                                                              }
                                                                                              return;
                                                                                            }
                                                                                            return;
                                                                                          }
                                                                                          return;
                                                                                        }
                                                                                        return;
                                                                                      }
                                                                                      return;
                                                                                    }
                                                                                    return;
                                                                                  }
                                                                                  return;
                                                                                }
                                                                                return;
                                                                              }
                                                                              return;
                                                                            }
                                                                            return;
                                                                          }
                                                                          return;
                                                                        }
                                                                        return;
                                                                      }
                                                                      return;
                                                                    }
                                                                    return;
                                                                  }
                                                                  return;
                                                                }
                                                                return;
                                                              }
                                                              return;
                                                            }
                                                            return;
                                                          }
                                                          return;
                                                        }
                                                        return;
                                                      }
                                                      return;
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                                return;
                                              }
                                              return;
                                            }
                                            return;
                                          }
                                          return;
                                        }
                                        return;
                                      }
                                      return;
                                    }
                                    return;
                                  }
                                  return;
                                }
                                return;
                              }
                              return;
                            }
                            return;
                          }
                          return;
                        }
                      }
                      returnCode = 5;
                      return;
                    }
                    returnCode = 6;
                    return;
                  }
                  returnCode = 9;
                  return;
                }
                returnCode = 9;
                return;
              }
              tempValue = func145(ub(ub((memBlock + 0x14), memBlock, 0), memBlock, 4));
              returnCode = 4;
              return;
            }
            tempValue = func145(ub(ub((memBlock + 0x14), memBlock, 8), memBlock, 0xC));
            returnCode = 4;
            return;
          }
          memBlock = (global0 - 0x20);
          global0 = (global0 - 0x20);
          tempValue = ub(calculateOffset((local1 + 0xC)), local1, 0x14);
          hasValue = ub(ub(calculateOffset((local1 + 0xC)), local1, 0x14), local1, 0x10);
          if (ub(ub(calculateOffset((local1 + 0xC)), local1, 0x14), local1, 0x10)) {
          } else {
          }
          returnCode = 6;
          return;
        }
        local7 = (local1 + 0xC);
        local6 = ub(8, local1, 0xC);
        returnCode = 1;
        return;
      }
    }
    global0 = (memBlock + 0x20);

  }

  /*
   * AI Summary: The function allocates memory, retrieves and processes data from a data structure pointed to by `local1`, and then deallocates the memory. 
  
   */

  function func148() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func149() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func150(local0, local1) {
    let local2, local3, loop0;

    local2 = 1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                switch (local2) {
                  case 0: continue loop0;
                  case 1: return;
                  case 2: return;
                  case 3: return;
                  case 4: return;
                  default: return;
                }
              }
              if ((local3 & 0x4000000)) {
              } else {
              }
              local2 = 4;
              return;
            }
            local3 = ub(2, local1, 8);
            if ((ub(2, local1, 8) & 0x2000000)) {
            } else {
            }
            local2 = 0;
            return;
          }
          func291(3, local0, local1);
          return;
        }
        func131(local1);
        return local0;
      }
    }
    return func350(local1);

  }

  /*
   * AI Summary: `func150` primarily acts as a conditional return wrapper, immediately returning based on an initial state or following a call to `func131`, which itself likely returns prematurely. 
  
   */

  // func151 is vb
  function vb(local0, local1) {
    let local2;

    local0 = (local0 + local1);
    local1 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    local2 = (((local1 << 3) + local0) + 0x408);
    if (viewI32_0[(((local1 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    return (((viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8] ^ viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]) << 0x18) >> 0x18);

  }

  /*
   * AI Summary: The function `func151` performs a series of arithmetic and bitwise operations on two inputs, ultimately returning a 32-bit signed integer derived from a value in a typed array `viewI64_0` indexed by a modulo-reduced and offset version of the first input, after checking a condition based on another typed array `viewI32_0`.
  
   */

  function func152(local0, local1) {

    return func218(local1);

  }


  function func153() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func154() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func155() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func156() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func157(local0, local1) {

    func438(3);
    return 0x10B845;

  }


  function func158(local0, local1) {

    return func243(ub(ub(local1, local0, 0), local0, 4));

  }


  function func159() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func160() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func161() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  // func162 is zb
  function zb(local0) {


  }


  /* renamed vars: local3=opcode, local4=temp1, local5=temp2 */
  function func163(local0, local1, local2) {
    let Error, Unreachable, code, local6, local7, local8, loop0, opcode, reached, temp1, temp2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          switch (opcode) {
                            case 0: continue loop0;
                            case 1: return;
                            case 2: return;
                            case 3: return;
                            case 4: return;
                            case 5: return;
                            case 6: return;
                            case 7: return;
                            case 8: return;
                            case 9: return;
                            default: return;
                          }
                        }
                        local7 = (global0 - 0x1000);
                        global0 = (global0 - 0x1000);
                        opcode = (0xA2C2A ? local1 : local1);
                        temp1 = (local1 - (local1 >>> 1));
                        temp2 = (temp1 ? (local1 - (local1 >>> 1)) : opcode);
                        opcode = (0x156 ? (0xA2C2A ? local1 : local1) : (temp1 ? (local1 - (local1 >>> 1)) : opcode));
                        return;
                      }
                      global0 = (local7 + 0x1000);
                      return 0xA2C2A;
                    }
                    opcode = (0x7FFFFFFC ? 9 : temp1);
                    return;
                  }
                  func295(0x41, local2);
                  opcode = 1;
                  return;
                }
                Gb(0, 0x10FC88);
                local6 = func213(9, temp1, 4);
                opcode = (func213(9, temp1, 4) ? 0x155 : 6);
                return;
              }
              opcode = (temp1 ? 4 : 7);
              return;
            }
            func295(0x41, local2);
            func279(local6, (temp2 * 0xC));
            opcode = 1;
            return;
          }
          temp2 = 0;
          local6 = 4;
          opcode = 6;
          return;
        }
        local8 = ((0x30 ? temp2 : temp2) * 0xCn);
        temp1 = ((0x30 ? temp2 : temp2) * 0xCn);
        opcode = ((local8 >> 0x20n) ? 2 : 9);
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a simplified virtual machine with a basic instruction set (opcodes 0-9) and rudimentary memory operations, primarily focused on manipulating inputs `local1` and `local2`.
  
   */

  // func164 is xb
  function xb(local0, local1) {
    let local2, local3, local4, local5;
    local1 = (local0 + local1);
    local0 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    local2 = (((local0 << 3) + local1) + 0x408);
    if (viewI32_0[(((local0 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    local0 = viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8];
    local4 = (((local1 >>> 0) % (0x140 >>> 0)) - 0x13C);
    if (0) {
      local3 = (0xFFFFFFFF >>> (local4 << 3));
      local5 = ((0xFFFFFFFF >>> (local4 << 3)) ^ 0xFFFFFFFF);
      if (viewI32_0[(((local2 + 4) - local4)) / 4]) {
      } else {
      }
    } else {
    }
    return (local0 ^ viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]);

  }

  /*
   * AI Summary: The function `func164` calculates the XOR of a 64-bit value at a dynamically computed index within `viewI64_0` with itself, effectively always returning zero, while performing some unused arithmetic and conditional checks.
  
   */

  function func165() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func166() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func167() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func168() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func169() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func170(local0, local1, local2) {

    return func179(local2);

  }


  function func171() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local2=state, local3=count, local4=offset, local5=sum, local6=globalTemp, local7=temp, local8=temp2 */
  function func172(local0, local1) {
    let Error, Unreachable, code, count, local10, local9, loop0, offset, reached, state, sum, temp, temp2;
    state = 1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      switch (state) {
                                        case 0: continue loop0;
                                        case 1: return;
                                        case 2: return;
                                        case 3: return;
                                        case 4: return;
                                        case 5: return;
                                        case 6: return;
                                        case 7: return;
                                        case 8: return;
                                        case 9: return;
                                        case 10: return;
                                        case 11: return;
                                        case 12: return;
                                        case 13: return;
                                        case 14: return;
                                        case 15: return;
                                        default: return;
                                      }
                                    }
                                    local1 = func145(offset);
                                    state = 0xC;
                                    return;
                                  }
                                  globalTemp = (global0 - 0x10);
                                  global0 = (global0 - 0x10);
                                  count = ub(2, local1, 8);
                                  offset = ub(ub(2, local1, 8), local1, 4);
                                  state = (ub(ub(2, local1, 8), local1, 4) ? Pb(4) : 0xE);
                                  return;
                                }
                                state = (offset ? 9 : count);
                                return;
                              }
                              local1 = ub(0xD, local1, 0);
                              temp = (count & 3);
                              state = (4 ? 8 : count);
                              return;
                            }
                            state = (temp ? 0xA : 0);
                            return;
                          }
                          Gb(local1, 0);
                          count = 0xA;
                          offset = (0xA ? 0 : (offset + 1));
                          local1 = (local1 + 1);
                          sum = (count + sum);
                          temp = (temp - 1);
                          state = ((temp - 1) ? 5 : 6);
                          return;
                        }
                        state = 0;
                        return;
                      }
                      state = 4;
                      return;
                    }
                    count = (count & 0xFFFFFFFC);
                    sum = 1;
                    offset = 0;
                    state = 0xB;
                    return;
                  }
                  throw new Error('Unreachable code reached');
                }
                state = 5;
                return;
              }
              Gb(local1, 0);
              state = 0xA;
              Gb((local1 + 1), 0);
              temp2 = 0xA;
              Gb((local1 + 2), 0);
              local9 = 0xA;
              Gb((local1 + 3), 0);
              local10 = 0xA;
              offset = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (offset + 4)))));
              sum = ((((state + sum) + temp2) + local9) + local10);
              local1 = (local1 + 4);
              count = (count - 4);
              state = ((count - 4) ? 0xB : 7);
              return;
            }
            global0 = (globalTemp + 0x10);
            return 0xF;
          }
          offset = 0;
          sum = 1;
          state = (count ? 3 : 0);
          return;
        }
        Gb((ub(local0, local1, 0) + count), 0);
        state = 0xC;
        return;
      }
      offset = 0;
      sum = 1;
      state = 4;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that appears to parse and potentially modify a data structure based on byte offsets and counts, likely related to memory manipulation or data validation.
  
   */

  function func173(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, loop0, reached;

    local5 = 1;
    loop0: while (true) {
      {
        {
          {
            switch (local5) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          throw new Error('Unreachable code reached');
        }
        if (local0) {
        } else {
        }
        local5 = 0;
        return;
      }
    }
    return table0[ub(local4, local1, 0x10)](2, local0, local2, local3);

  }

  /*
   * AI Summary: The function `func173` effectively acts as a conditional no-op, returning immediately if called with a truthy first argument or otherwise executing and returning the result of a dynamically resolved function from `table0` based on the first and fourth arguments. 
  
   */

  // func174 is Mb
  /* renamed vars: local2=calcAddress, local3=bitMask */
  function Mb(local0, local1) {
    let bitMask, calcAddress, local4, local5;
    local1 = (local0 + local1);
    local0 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    calcAddress = (((local0 << 3) + local1) + 0x408);
    if (viewI32_0[(((local0 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    local0 = viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8];
    local4 = (((local1 >>> 0) % (0x140 >>> 0)) - 0x13E);
    if (0) {
      bitMask = (0xFFFF >>> (local4 << 3));
      local5 = ((0xFFFF >>> (local4 << 3)) ^ 0xFFFFFFFF);
      if (viewI32_0[(((calcAddress + 2) - local4)) / 4]) {
      } else {
      }
    } else {
    }
    return (((local0 ^ viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]) << 0x10) >> 0x10);

  }

  /*
   * AI Summary: The function `func174` calculates a 16-bit signed value based on two input integers, involving bitwise operations, memory reads from typed arrays (`viewI32_0`, `viewI64_0`), and a modulo-based memory address calculation.
  
   */

  function func175(local0, local1) {
    let Error, Unreachable, code, local2, local3, loop0, reached;

    local2 = 3;
    loop0: while (true) {
      {
        {
          {
            {
              switch (local2) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            local1 = func145(ub(ub(local0, local3, 8), local3, 0xC));
            func279(local0, 0x14);
            local2 = 1;
            return;
          }
          global0 = (local3 + 0x10);
          return local1;
        }
        local1 = local0;
        local2 = 1;
        return;
      }
      local3 = (global0 - 0x10);
      global0 = (global0 - 0x10);
      local2 = (ub(0, local0, 0xC) ? func219((local1 + 0xC)) : 2);
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return (local3 + 8);

  }

  /*
   * AI Summary: `func175` immediately returns a constant value (3, 1, or 2) based on the initial value of `local2`, or conditionally executes code that manipulates global0, local1, and local3 before eventually returning a modified value (1, 2, or a value read indirectly via `local1`).
  
   */

  function func176() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func177() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local1=currentState, local2=memBase, local3=returnCode, local4=memValue, local5=memPtr, local6=memOffset1, local7=tempVar1, local8=firstByte, local9=shiftedByte */
  function func178(local0) {
    let Error, Unreachable, code, currentState, firstByte, local10, loop0, loop1, memBase, memOffset1, memPtr, memValue, reached, returnCode, shiftedByte, tempVar1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        switch (returnCode) {
                          case 0: continue loop0;
                          case 1: return;
                          case 2: return;
                          case 3: return;
                          case 4: return;
                          case 5: return;
                          case 6: return;
                          case 7: return;
                          case 8: return;
                          default: return;
                        }
                      }
                      memBase = (global0 - 0x20);
                      global0 = (global0 - 0x20);
                      firstByte = ub(4, local0, 0);
                      tempVar1 = (ub(4, local0, 0) << 1);
                      shiftedByte = (4 ? (ub(4, local0, 0) << 1) : tempVar1);
                      local10 = ((4 ? (ub(4, local0, 0) << 1) : tempVar1) * 0xCn);
                      returnCode = (0n ? 1 : (((4 ? (ub(4, local0, 0) << 1) : tempVar1) * 0xCn) >> 0x20n));
                      return;
                    }
                    memValue = local10;
                    returnCode = (0x7FFFFFFC ? 7 : local10);
                    return;
                  }
                  tempVar1 = 0;
                  returnCode = (firstByte ? 6 : 4);
                  return;
                }
                tempVar1 = ub(2, memBase, 0x10);
                returnCode = 7;
                return;
              }
              memOffset1 = (memBase + 8);
              memPtr = (memBase + 0x14);
              returnCode = 0;
              currentState = 0xB;
              loop1: while (true) {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                switch (currentState) {
                                                  case 0: continue loop1;
                                                  case 1: continue loop0;
                                                  case 2: return;
                                                  case 3: return;
                                                  case 4: return;
                                                  case 5: return;
                                                  case 6: return;
                                                  case 7: return;
                                                  case 8: return;
                                                  case 9: return;
                                                  case 10: return;
                                                  case 11: return;
                                                  case 12: return;
                                                  case 13: return;
                                                  case 14: return;
                                                  default: return;
                                                }
                                              }
                                              return;
                                            }
                                            memPtr = func125(memValue);
                                            currentState = 8;
                                            return;
                                          }
                                          Gb(0, 0x10FC88);
                                          currentState = 0xE;
                                          return;
                                        }
                                        currentState = (ub(6, memPtr, 4) ? returnCode : 0xA);
                                        return;
                                      }
                                      memPtr = 4;
                                      currentState = 8;
                                      return;
                                    }
                                    currentState = (memValue ? 2 : 7);
                                    return;
                                  }
                                  currentState = (memValue ? 0xD : 4);
                                  return;
                                }
                                memPtr = 4;
                                currentState = 8;
                                return;
                              }
                              currentState = (memPtr ? 0xC : 0);
                              return;
                            }
                            return;
                          }
                          returnCode = ub(5, memPtr, 8);
                          currentState = (ub(5, memPtr, 8) ? Pb(0) : 1);
                          return;
                        }
                        currentState = (0 ? 9 : memValue);
                        return;
                      }
                      return;
                    }
                    Gb(0, 0x10FC88);
                    currentState = 0xE;
                    return;
                  }
                  memPtr = func213(0, memValue, 4);
                  currentState = 8;
                  continue loop0;
                }
              }
              returnCode = (1 ? 3 : ub(5, memBase, 8));
              return;
            }
            memValue = ub(memOffset1, memBase, 0xC);
            global0 = (memBase + 0x20);
            return Pb(4);
          }
          tempVar1 = 4;
          returnCode = 4;
          return;
        }
        throw new Error('Unreachable code reached');
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func178` manages memory allocation and deallocation, using a state machine to handle various conditions and calling `func125` for memory operations.
  
   */

  function func179() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func180 is wb
  /* renamed vars: offsetAddr=local2, unusedMask=local3 */
  function wb(local0, local1) {
    let local2, local3, local4, local5;
    local0 = (local0 + local1);
    local1 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    local2 = (((local1 << 3) + local0) + 0x408);
    if (viewI32_0[(((local1 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    local4 = viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8];
    local1 = (((local0 >>> 0) % (0x140 >>> 0)) - 0x138);
    if (0) {
      local3 = (0xFFFFFFFFFFFFFFFFn >> (local1 << 3n));
      local5 = ((0xFFFFFFFFFFFFFFFFn >> (local1 << 3n)) ^ 0xFFFFFFFFFFFFFFFFn);
      local2 = (local2 + 8);
      if (viewI32_0[(((local2 + 8) - local1)) / 4]) {
      } else {
      }
    } else {
    }
    return (local4 ^ viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]);

  }

  /*
   * AI Summary: The function `func180` calculates an offset based on two input values and XORs a 64-bit value at that offset with itself, effectively returning zero.
  
   */

  function func181() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func182() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  /* renamed vars: local4=state, local5=memAddr, local6=loopCounter, local7=tempVar1, local8=tempVar2, local9=tempVar3, local10=tempVar4, local11=tempVar5, local12=tempVar6, local13=tempVar7, local14=tempVar8, local15=tempVar9 */
  function func183(local0, local1, local2, local3) {
    let Error, Unreachable, code, f64, local16, local17, local18, local19, loop0, loopCounter, memAddr, reached, state, tempVar1, tempVar2, tempVar3, tempVar4, tempVar5, tempVar6, tempVar7, tempVar8, tempVar9;
    state = 0x2B;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                switch (state) {
                                                                                                  case 0: continue loop0;
                                                                                                  case 1: return;
                                                                                                  case 2: return;
                                                                                                  case 3: return;
                                                                                                  case 4: return;
                                                                                                  case 5: return;
                                                                                                  case 6: return;
                                                                                                  case 7: return;
                                                                                                  case 8: return;
                                                                                                  case 9: return;
                                                                                                  case 10: return;
                                                                                                  case 11: return;
                                                                                                  case 12: return;
                                                                                                  case 13: return;
                                                                                                  case 14: return;
                                                                                                  case 15: return;
                                                                                                  case 16: return;
                                                                                                  case 17: return;
                                                                                                  case 18: return;
                                                                                                  case 19: return;
                                                                                                  case 20: return;
                                                                                                  case 21: return;
                                                                                                  case 22: return;
                                                                                                  case 23: return;
                                                                                                  case 24: return;
                                                                                                  case 25: return;
                                                                                                  case 26: return;
                                                                                                  case 27: return;
                                                                                                  case 28: return;
                                                                                                  case 29: return;
                                                                                                  case 30: return;
                                                                                                  case 31: return;
                                                                                                  case 32: return;
                                                                                                  case 33: return;
                                                                                                  case 34: return;
                                                                                                  case 35: return;
                                                                                                  case 36: return;
                                                                                                  case 37: return;
                                                                                                  case 38: return;
                                                                                                  case 39: return;
                                                                                                  case 40: return;
                                                                                                  case 41: return;
                                                                                                  case 42: return;
                                                                                                  case 43: return;
                                                                                                  case 44: return;
                                                                                                  default: return;
                                                                                                }
                                                                                              }
                                                                                              local16 = (local16 / f64(9214871658872686752));
                                                                                              tempVar1 = (tempVar1 + 0x134);
                                                                                              state = ((tempVar1 + 0x134) >> 0x1F);
                                                                                              loopCounter = ((state ^ tempVar1) - state);
                                                                                              if (0x135) {
                                                                                              } else {
                                                                                              }
                                                                                              state = 0x1B;
                                                                                              return;
                                                                                            }
                                                                                            tempVar3 = (local1 + 0xC);
                                                                                            loopCounter = (tempVar2 + 1);
                                                                                            if (tempVar4) {
                                                                                            } else {
                                                                                            }
                                                                                            state = 0xB;
                                                                                            return;
                                                                                          }
                                                                                          state = 4;
                                                                                          return;
                                                                                        }
                                                                                        if (0x1999999999999998n) {
                                                                                        } else {
                                                                                        }
                                                                                        state = 5;
                                                                                        return;
                                                                                      }
                                                                                      if (ub(0x22, memAddr, 0x20)) {
                                                                                      } else {
                                                                                      }
                                                                                      state = 0xE;
                                                                                      return;
                                                                                    }
                                                                                    local3 = ((local3 * 0xAn) + (tempVar5 & 0xFFn));
                                                                                    loopCounter = (loopCounter + 1);
                                                                                    if ((tempVar6 + (loopCounter + 1))) {
                                                                                    } else {
                                                                                    }
                                                                                    state = 0x1D;
                                                                                    return;
                                                                                  }
                                                                                  func198((memAddr + 0x20), local1, local2, local3, tempVar1);
                                                                                  state = 4;
                                                                                  return;
                                                                                }
                                                                                state = 4;
                                                                                return;
                                                                              }
                                                                              state = 7;
                                                                              return;
                                                                            }
                                                                            Qb(Pb(0x24), memAddr, 1, Pb(0x20), ub(local0, memAddr, 0x24), Pb(8), local0, 3n, 0);
                                                                            state = 0x14;
                                                                            return;
                                                                          }
                                                                          if (0x65) {
                                                                          } else {
                                                                          }
                                                                          state = 0x21;
                                                                          return;
                                                                        }
                                                                        if (tempVar4) {
                                                                        } else {
                                                                        }
                                                                        state = 7;
                                                                        return;
                                                                      }
                                                                      local18 = 1n;
                                                                      state = 0x2A;
                                                                      return;
                                                                    }
                                                                    loopCounter = ((loopCounter + tempVar2) + 1);
                                                                    state = 0xB;
                                                                    return;
                                                                  }
                                                                  local3 = wb(0x28);
                                                                  local18 = 0n;
                                                                  state = 0x2A;
                                                                  return;
                                                                }
                                                                if (local2) {
                                                                } else {
                                                                }
                                                                state = 0x1F;
                                                                return;
                                                              }
                                                              Gb((loopCounter + tempVar7), 0);
                                                              tempVar8 = 0xC;
                                                              tempVar5 = -36;
                                                              tempVar9 = 220;
                                                              if (0xA) {
                                                              } else {
                                                              }
                                                              state = 3;
                                                              return;
                                                            }
                                                            tempVar5 = ub(0x23, local1, 0xC);
                                                            Gb((ub(0x23, local1, 0xC) + tempVar2), 0);
                                                            loopCounter = 220;
                                                            if (0x2E) {
                                                            } else {
                                                            }
                                                            state = 1;
                                                            return;
                                                          }
                                                          state = 0x1B;
                                                          return;
                                                        }
                                                        tempVar1 = (0 - loopCounter);
                                                        if (0x65) {
                                                        } else {
                                                        }
                                                        state = 0x24;
                                                        return;
                                                      }
                                                      global0 = (memAddr - 0xFFFFFFC0);
                                                      return 6;
                                                    }
                                                    Qb(memAddr, 220, 0x28, (tempVar8 | 0x20), ub(local0, memAddr, 0x24), Pb(8), local0, 3n, 0);
                                                    state = 0x14;
                                                    return;
                                                  }
                                                  if (0) {
                                                  } else {
                                                  }
                                                  state = 2;
                                                  return;
                                                }
                                                state = 4;
                                                return;
                                              }
                                              Qb(memAddr, func145(ub(ub((memAddr + 0x34), memAddr, 0x18), memAddr, 0x1C)), Pb(0x24), memAddr, 1, Pb(0x20), memAddr, (local2 ? local16 : local16), 0x28);
                                              state = 4;
                                              return;
                                            }
                                            local3 = (local3 | 0x8000000000000000n);
                                            state = 0x2A;
                                            return;
                                          }
                                          state = 4;
                                          return;
                                        }
                                        if (f64(0)) {
                                        } else {
                                        }
                                        state = 0x18;
                                        return;
                                      }
                                      local17 = wb(0);
                                      if (0) {
                                      } else {
                                      }
                                      state = 0x20;
                                      return;
                                    }
                                    if (tempVar1) {
                                    } else {
                                    }
                                    state = 8;
                                    return;
                                  }
                                  state = 4;
                                  return;
                                }
                                local18 = 0n;
                                local19 = (0n - local3);
                                if (0n) {
                                } else {
                                }
                                state = 0x19;
                                return;
                              }
                              local16 = (local16 * local17);
                              if (f64(9218868437227405312)) {
                              } else {
                              }
                              state = 0x18;
                              return;
                            }
                            func198((memAddr + 0x20), local1, local2, local3, 0);
                            if (ub(0x1A, memAddr, 0x20)) {
                            } else {
                            }
                            state = 0xE;
                            return;
                          }
                          if (0x1999999999999999n) {
                          } else {
                          }
                          state = 0x1E;
                          return;
                        }
                        if (loopCounter) {
                        } else {
                        }
                        state = 0xD;
                        return;
                      }
                      local16 = local3;
                      state = (tempVar1 >> 0x1F);
                      loopCounter = (((tempVar1 >> 0x1F) ^ tempVar1) - state);
                      if (0x135) {
                      } else {
                      }
                      state = 0x1C;
                      return;
                    }
                    local16 = (local16 / local17);
                    state = 0x18;
                    return;
                  }
                  state = 0x1C;
                  return;
                }
                local18 = 2n;
                local3 = local19;
                state = 0x2A;
                return;
              }
              if (0x45) {
              } else {
              }
              state = 0x21;
              return;
            }
            if (5) {
            } else {
            }
            state = 0x1E;
            return;
          }
          Qb((((tempVar1 >> 0x1F) ^ tempVar1) - state), 0x12, loopCounter, 0xA, tempVar9, 5, local0, local3, 8);
          Qb(0x27, (local16 * local17), 9, local3, 0x29, 0x13, local0, local18, 0);
          state = 0x14;
          return;
        }
        memAddr = (global0 + 0xFFFFFFC0);
        global0 = (global0 + 0xFFFFFFC0);
        tempVar2 = ub((0n - local3), local1, 0x14);
        tempVar4 = ub(ub((0n - local3), local1, 0x14), local1, 0x10);
        if (ub(ub((0n - local3), local1, 0x14), local1, 0x10)) {
        } else {
        }
        state = 0xF;
        return;
      }
      tempVar7 = (loopCounter + tempVar5);
      tempVar1 = (loopCounter - tempVar4);
      tempVar6 = ((tempVar2 - tempVar4) + 1);
      loopCounter = 0;
      state = 0x10;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func183` implements a state machine that primarily returns early in most cases, occasionally performing memory operations and calculations based on its inputs and global state. 
  
   */

  function func184(local0, local1) {
    let local2, local3;

    local2 = wb(0);
    local3 = (wb(0) >> 0x3Fn);
    func354(local2, 0n, local1);
    return ((local2 ^ local3) - local3);

  }


  function func185() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func186() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func187(local0, local1) {
    let Error, Unreachable, code, local2, local3, loop0, reached;

    local2 = 3;
    loop0: while (true) {
      {
        {
          {
            {
              {
                switch (local2) {
                  case 0: continue loop0;
                  case 1: return;
                  case 2: return;
                  case 3: return;
                  case 4: return;
                  default: return;
                }
              }
              throw new Error('Unreachable code reached');
            }
            func348(func217(), (local3 + 0xC));
            local2 = 2;
            return;
          }
          global0 = (local3 + 0x10);
          return 0x1C;
        }
        local3 = (global0 - 0x10);
        global0 = (global0 - 0x10);
        local0 = ub(0x107518, local0, 0);
        if (ub(0x107518, local0, 0)) {
        } else {
        }
        local2 = 0;
        return;
      }
      local1 = (ub(local0, local0, 0) - 1);
      if (local1) {
      } else {
      }
      local2 = 1;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func187` attempts to read a value at a memory address indicated by `local0`, returning immediately based on the value's properties or calling `func348` with computed arguments if the value is non-zero after decrementing and further checks. 
  
   */

  function func188() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func189() {
    let Attempted, ERROR, FATAL, POP, an, br_table_idx, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in br_table_idx */
  }


  // func190 is ub
  /* renamed vars: local2=calcAddress, local3=bitMask */
  function ub(local0, local1) {
    let bitMask, calcAddress, local4, local5;
    local1 = (local0 + local1);
    local0 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    calcAddress = (((local0 << 3) + local1) + 0x408);
    if (viewI32_0[(((local0 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    local0 = viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8];
    local4 = (((local1 >>> 0) % (0x140 >>> 0)) - 0x13C);
    if (0) {
      bitMask = (0xFFFFFFFF >>> (local4 << 3));
      local5 = ((0xFFFFFFFF >>> (local4 << 3)) ^ 0xFFFFFFFF);
      if (viewI32_0[(((calcAddress + 4) - local4)) / 4]) {
      } else {
      }
    } else {
    }
    return (local0 ^ viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]);

  }

  /*
   * AI Summary: The function calculates a memory address based on two inputs, performs a conditional bitwise AND operation on a value at a related address, and returns the XORed result with another value from memory.
  
   */

  /* renamed vars: local2=state, local3=offset1, local4=offset2, local5=offset3, local6=temp1, local7=temp2, local8=blockIdx */
  function func191(local0, local1) {
    let Error, Unreachable, blockIdx, code, local10, local9, loop0, offset1, offset2, offset3, reached, state, temp1, temp2;
    state = 0xB;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      switch (state) {
                                                        case 0: continue loop0;
                                                        case 1: return;
                                                        case 2: return;
                                                        case 3: return;
                                                        case 4: return;
                                                        case 5: return;
                                                        case 6: return;
                                                        case 7: return;
                                                        case 8: return;
                                                        case 9: return;
                                                        case 10: return;
                                                        case 11: return;
                                                        case 12: return;
                                                        case 13: return;
                                                        case 14: return;
                                                        case 15: return;
                                                        case 16: return;
                                                        case 17: return;
                                                        case 18: return;
                                                        case 19: return;
                                                        case 20: return;
                                                        case 21: return;
                                                        case 22: return;
                                                        case 23: return;
                                                        default: return;
                                                      }
                                                    }
                                                    local10 = (blockIdx + 1);
                                                    state = (offset1 ? 5 : (blockIdx + 1));
                                                    return;
                                                  }
                                                  offset2 = ub(blockIdx, local0, 0xA0);
                                                  offset1 = (0x10 + ub(blockIdx, local0, 0xA0));
                                                  state = (offset3 ? 0xD : 7);
                                                  return;
                                                }
                                                offset1 = (offset1 - 4);
                                                offset3 = (offset3 - 4);
                                                offset2 = (offset2 - 1);
                                                state = ((offset2 - 1) ? 0xA : 0xE);
                                                return;
                                              }
                                              state = (0x27 ? 0x14 : offset1);
                                              return;
                                            }
                                            local9 = (offset1 + 1);
                                            state = 0;
                                            return;
                                          }
                                          local1 = (local0 + (blockIdx << 2));
                                          return Pb(0xA0);
                                        }
                                        offset3 = (local1 & 0x1F);
                                        state = (0x20 ? 1 : local1);
                                        return;
                                      }
                                      return Pb(0xA0);
                                    }
                                    state = (2 ? 5 : offset2);
                                    return;
                                  }
                                  blockIdx = (local1 >>> 5);
                                  offset2 = ub(6, local0, 0xA0);
                                  state = (ub(6, local0, 0xA0) ? 0x13 : 0x17);
                                  return;
                                }
                                state = (temp1 ? 0x16 : 0x14);
                                return;
                              }
                              state = (0x500 ? 0x14 : local1);
                              return;
                            }
                            local9 = offset1;
                            temp2 = (0 - local1);
                            temp1 = (ub(0, (local0 + (temp1 << 2)), 0) >>> (0 - local1));
                            state = ((ub(0, (local0 + (temp1 << 2)), 0) >>> (0 - local1)) ? 9 : 3);
                            return;
                          }
                          temp1 = (offset1 - 1);
                          state = (0x27 ? 0x14 : (offset1 - 1));
                          return;
                        }
                        state = 6;
                        return;
                      }
                      copyData(0, (blockIdx << 2));
                      state = 1;
                      return;
                    }
                    temp1 = (temp2 & 0x1F);
                    state = ((offset2 & 1) ? 8 : 0x12);
                    return;
                  }
                  local1 = (offset2 + 4);
                  state = ub(0xC, (offset2 + 4), 0);
                  temp2 = (offset2 + 8);
                  offset2 = (offset2 - 8);
                  offset1 = (offset1 - 2);
                  state = ((offset1 - 2) ? 0x11 : local10);
                  return;
                }
                temp2 = (offset1 << 2);
                offset1 = (offset1 - 1);
                local1 = (local0 + ((offset1 - 1) << 2));
                state = 8;
                return;
              }
              offset2 = (((offset1 << 2) + local0) - 0xC);
              state = 0x11;
              return;
            }
            throw new Error('Unreachable code reached');
          }
          state = 5;
          return;
        }
        state = (0x28 ? 0x14 : (offset2 + temp2));
        return;
      }
      temp2 = (blockIdx - 1);
      offset1 = (((offset2 << 2) + local0) - 4);
      offset3 = ((((offset2 + blockIdx) << 2) + local0) - 4);
      temp1 = 0x29;
      state = 0xA;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that iteratively manipulates memory addresses and values using bitwise operations and the `ub` helper function, likely for data processing or decryption. 
  
   */

  function func192() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func193() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func194() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  /* renamed vars: local3=temp, local10=size, local4=state, local5=buffer, local6=temp2, local7=temp3, local8=counter, local9=offset, local11=dataOffset, local12=temp4, local13=temp5, local14=temp6, local15=temp7 */
  function func195(local0, local1, local2) {
    let Error, Unreachable, buffer, code, counter, dataOffset, local16, local17, local18, loop0, offset, reached, size, state, temp, temp2, temp3, temp4, temp5, temp6, temp7;
    state = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    switch (state) {
                                                                                                                      case 0: continue loop0;
                                                                                                                      case 1: return;
                                                                                                                      case 2: return;
                                                                                                                      case 3: return;
                                                                                                                      case 4: return;
                                                                                                                      case 5: return;
                                                                                                                      case 6: return;
                                                                                                                      case 7: return;
                                                                                                                      case 8: return;
                                                                                                                      case 9: return;
                                                                                                                      case 10: return;
                                                                                                                      case 11: return;
                                                                                                                      case 12: return;
                                                                                                                      case 13: return;
                                                                                                                      case 14: return;
                                                                                                                      case 15: return;
                                                                                                                      case 16: return;
                                                                                                                      case 17: return;
                                                                                                                      case 18: return;
                                                                                                                      case 19: return;
                                                                                                                      case 20: return;
                                                                                                                      case 21: return;
                                                                                                                      case 22: return;
                                                                                                                      case 23: return;
                                                                                                                      case 24: return;
                                                                                                                      case 25: return;
                                                                                                                      case 26: return;
                                                                                                                      case 27: return;
                                                                                                                      case 28: return;
                                                                                                                      case 29: return;
                                                                                                                      case 30: return;
                                                                                                                      case 31: return;
                                                                                                                      case 32: return;
                                                                                                                      case 33: return;
                                                                                                                      case 34: return;
                                                                                                                      case 35: return;
                                                                                                                      case 36: return;
                                                                                                                      case 37: return;
                                                                                                                      case 38: return;
                                                                                                                      case 39: return;
                                                                                                                      case 40: return;
                                                                                                                      case 41: return;
                                                                                                                      case 42: return;
                                                                                                                      case 43: return;
                                                                                                                      case 44: return;
                                                                                                                      case 45: return;
                                                                                                                      case 46: return;
                                                                                                                      case 47: return;
                                                                                                                      case 48: return;
                                                                                                                      case 49: return;
                                                                                                                      case 50: return;
                                                                                                                      case 51: return;
                                                                                                                      case 52: return;
                                                                                                                      case 53: return;
                                                                                                                      case 54: return;
                                                                                                                      default: return;
                                                                                                                    }
                                                                                                                  }
                                                                                                                  state = (counter ? 0x14 : 0xE);
                                                                                                                  return;
                                                                                                                }
                                                                                                                state = 0x2A;
                                                                                                                return;
                                                                                                              }
                                                                                                              buffer = (global0 - 0x80);
                                                                                                              global0 = (global0 - 0x80);
                                                                                                              temp4 = (local0 + 0x28);
                                                                                                              dataOffset = ub(sb(local0, temp4, 0x28), local0, 0x14);
                                                                                                              Gb(local0, 0x28);
                                                                                                              offset = 0x10;
                                                                                                              size = 17;
                                                                                                              state = (local2 ? 0x1E : 17);
                                                                                                              return;
                                                                                                            }
                                                                                                            temp3 = offset;
                                                                                                            size = local2;
                                                                                                            offset = temp;
                                                                                                            local2 = ub(buffer, local0, 0xC);
                                                                                                            temp = ub(buffer, local0, 8);
                                                                                                            temp2 = ub(buffer, local0, 4);
                                                                                                            local2 = (ub(buffer, local0, 0x10) + dataOffset);
                                                                                                            temp = (local2 + 7);
                                                                                                            temp = (local2 + 6);
                                                                                                            temp = (local2 + 5);
                                                                                                            temp = (local2 + 4);
                                                                                                            temp = (local2 + 3);
                                                                                                            temp = (local2 + 2);
                                                                                                            local2 = (local2 + 1);
                                                                                                            local2 = ub(Pb(0x1C), local0, 0);
                                                                                                            func225(ub(Pb(0x1C), local0, 0), buffer);
                                                                                                            func225(local2, temp7);
                                                                                                            func225(local2, temp4);
                                                                                                            func225(local2, temp5);
                                                                                                            local2 = 0xFFFFFF80;
                                                                                                            state = 5;
                                                                                                            return;
                                                                                                          }
                                                                                                          local2 = (local16 - 0x80);
                                                                                                          temp = (local1 + 0x80);
                                                                                                          temp5 = (buffer + 0x60);
                                                                                                          temp4 = (buffer - 0xFFFFFFC0);
                                                                                                          temp7 = (buffer + 0x20);
                                                                                                          offset = local1;
                                                                                                          state = 3;
                                                                                                          return;
                                                                                                        }
                                                                                                        temp = (local2 + temp3);
                                                                                                        state = ((local2 + temp3) + 0x80);
                                                                                                        Gb(state, 0);
                                                                                                        temp2 = (local2 + buffer);
                                                                                                        Gb(((local2 + buffer) + 0x80), 0);
                                                                                                        state = (temp + 0x81);
                                                                                                        Gb(state, 0);
                                                                                                        Gb((temp2 + 0x81), 0);
                                                                                                        counter = (temp + 0x82);
                                                                                                        Gb(counter, 0);
                                                                                                        Gb((temp2 + 0x82), 0);
                                                                                                        temp = (temp + 0x83);
                                                                                                        Gb(temp, 0);
                                                                                                        Gb((temp2 + 0x83), 0);
                                                                                                        local2 = (local2 + 4);
                                                                                                        state = ((local2 + 4) ? 5 : 0x1F);
                                                                                                        return;
                                                                                                      }
                                                                                                      state = 0x2A;
                                                                                                      return;
                                                                                                    }
                                                                                                    state = 0x29;
                                                                                                    return;
                                                                                                  }
                                                                                                  temp = (local0 + 0x20);
                                                                                                  Qb(Pb(0x3C), sb(buffer, (sb(((((local2 + 2) << 0x18) | ((temp & 0xFF00) << 8)) | (((temp >>> 8) & 0xFF00) | (temp >>> 0x18))), (sb(Pb(0x2C), (sb(buffer, (((((local2 + 1) << 0x18) | ((local2 & 0xFF00) << 8)) | (((local2 >>> 8) & 0xFF00) | (local2 >>> 0x18))) ^ ((local2 + temp3) + 0x80)), 0) ^ (temp + 0x81)), 0) ^ (temp + 0x82)), 0) ^ (temp + 0x83)), 0), sb(temp4, temp5, 0), ub((local0 + 0x20), local0, 0xC), Pb(0), local0, local0, wb(4), 0x18);
                                                                                                  local2 = (ub(local0, local0, 0x10) + dataOffset);
                                                                                                  local2 = ub(Pb(0x24), local0, 0);
                                                                                                  Qb(buffer, ((((local2 + 4) << 0x18) | ((temp & 0xFF00) << 8)) | (((temp >>> 8) & 0xFF00) | (temp >>> 0x18))), Pb(0x4C), buffer, ((((local2 + 3) << 0x18) | ((temp & 0xFF00) << 8)) | (((temp >>> 8) & 0xFF00) | (temp >>> 0x18))), ((((ub(local0, local0, 0x10) + dataOffset) << 0x18) | ((local2 & 0xFF00) << 8)) | (((local2 >>> 8) & 0xFF00) | (local2 >>> 0x18))), (buffer + 0x18), 0n, 0);
                                                                                                  temp2 = (buffer + 8);
                                                                                                  Qb(((((local2 + 6) << 0x18) | ((temp & 0xFF00) << 8)) | (((temp >>> 8) & 0xFF00) | (temp >>> 0x18))), Pb(0x6C), buffer, ((((local2 + 5) << 0x18) | ((temp & 0xFF00) << 8)) | (((temp >>> 8) & 0xFF00) | (temp >>> 0x18))), Pb(0x5C), (buffer + 8), temp, wb(0), 0);
                                                                                                  Qb(((((ub(buffer, local0, 0x10) + dataOffset) << 0x18) | ((local2 & 0xFF00) << 8)) | (((local2 >>> 8) & 0xFF00) | (local2 >>> 0x18))), Pb(0xC), buffer, ((((local2 + 7) << 0x18) | ((temp & 0xFF00) << 8)) | (((temp >>> 8) & 0xFF00) | (temp >>> 0x18))), Pb(0x7C), buffer, buffer, 0n, 0x10);
                                                                                                  Qb(temp, Pb(4), buffer, temp2, Pb(0), buffer, local0, wb(0x18), 0);
                                                                                                  func225(local2, buffer);
                                                                                                  Qb(Pb(0x10), buffer, local2, Pb(8), buffer, temp, temp2, wb(0), 0);
                                                                                                  Qb(buffer, temp, Pb(0x14), buffer, temp2, local0, buffer, wb(0), 0x18);
                                                                                                  counter = (temp6 & 3);
                                                                                                  temp = 0;
                                                                                                  state = (4 ? 0x24 : temp4);
                                                                                                  return;
                                                                                                }
                                                                                                temp4 = (size & 0xFFFFFFFC);
                                                                                                temp = 0;
                                                                                                state = 0xC;
                                                                                                return;
                                                                                              }
                                                                                              throw new Error('Unreachable code reached');
                                                                                            }
                                                                                            throw new Error('Unreachable code reached');
                                                                                          }
                                                                                          local2 = (local1 + temp);
                                                                                          Gb(local2, 0);
                                                                                          temp2 = (temp + temp5);
                                                                                          Gb(((temp + temp5) + 0x18), 0);
                                                                                          temp3 = (local2 + 1);
                                                                                          Gb(temp3, 0);
                                                                                          Gb((temp2 + 0x19), 0);
                                                                                          temp3 = (local2 + 2);
                                                                                          Gb(temp3, 0);
                                                                                          Gb((temp2 + 0x1A), 0);
                                                                                          local2 = (local2 + 3);
                                                                                          Gb(local2, 0);
                                                                                          Gb((temp2 + 0x1B), 0);
                                                                                          temp = (temp + 4);
                                                                                          state = ((temp + 4) ? 0xC : temp4);
                                                                                          return;
                                                                                        }
                                                                                        state = (0x10 ? 0xA : temp5);
                                                                                        return;
                                                                                      }
                                                                                      local1 = (local1 + size);
                                                                                      dataOffset = (dataOffset + 1);
                                                                                      state = 0x23;
                                                                                      return;
                                                                                    }
                                                                                    throw new Error('Unreachable code reached');
                                                                                  }
                                                                                  Gb(local2, 0);
                                                                                  Gb(temp, 0);
                                                                                  local2 = (local2 + 1);
                                                                                  temp = (temp + 1);
                                                                                  counter = (counter - 1);
                                                                                  state = ((counter - 1) ? 0x10 : 0x1C);
                                                                                  return;
                                                                                }
                                                                                local2 = (temp + size);
                                                                                Gb(local2, 0);
                                                                                temp2 = (local0 + temp);
                                                                                Gb(((local0 + temp) + 0x18), 0);
                                                                                temp3 = (local2 + 1);
                                                                                Gb(temp3, 0);
                                                                                Gb((temp2 + 0x19), 0);
                                                                                temp3 = (local2 + 2);
                                                                                Gb(temp3, 0);
                                                                                Gb((temp2 + 0x1A), 0);
                                                                                local2 = (local2 + 3);
                                                                                Gb(local2, 0);
                                                                                Gb((temp2 + 0x1B), 0);
                                                                                temp = (temp + 4);
                                                                                state = ((temp + 4) ? 0x11 : offset);
                                                                                return;
                                                                              }
                                                                              state = 0x24;
                                                                              return;
                                                                            }
                                                                            local2 = (local1 + temp);
                                                                            temp = (((temp + offset) + local0) + 0x18);
                                                                            state = 0x10;
                                                                            return;
                                                                          }
                                                                          local2 = (local1 + temp);
                                                                          temp = (((temp + offset) + local0) + 0x18);
                                                                          state = 0x1B;
                                                                          return;
                                                                        }
                                                                        temp6 = local2;
                                                                        state = 0x23;
                                                                        return;
                                                                      }
                                                                      temp5 = (local2 + offset);
                                                                      state = (local2 ? 0xF : (local2 + offset));
                                                                      return;
                                                                    }
                                                                    state = 0;
                                                                    return;
                                                                  }
                                                                  local2 = (local2 ? size : (size - 0x80));
                                                                  temp = (size + 16256);
                                                                  state = (offset ? 3 : 0x36);
                                                                  return;
                                                                }
                                                                state = (counter ? 0x13 : 6);
                                                                return;
                                                              }
                                                              state = 1;
                                                              return;
                                                            }
                                                            Gb(local2, 0);
                                                            Gb(temp, 0);
                                                            local2 = (local2 + 1);
                                                            temp = (temp + 1);
                                                            counter = (counter - 1);
                                                            state = ((counter - 1) ? 0x1B : 0x26);
                                                            return;
                                                          }
                                                          state = 6;
                                                          return;
                                                        }
                                                        size = (temp7 + local17);
                                                        offset = (temp6 & 0xC);
                                                        temp = 0;
                                                        state = 0x11;
                                                        return;
                                                      }
                                                      temp = 1;
                                                      temp6 = (local2 - size);
                                                      state = (((((local2 - size) >>> 4) + dataOffset) + 1) ? 0x20 : dataOffset);
                                                      return;
                                                    }
                                                    dataOffset = (dataOffset + 8);
                                                    local2 = 0x80;
                                                    state = (0x80 ? 0x18 : size);
                                                    return;
                                                  }
                                                  global0 = (buffer + 0x80);
                                                  return temp;
                                                }
                                                state = (offset ? 0x16 : 0x2F);
                                                return;
                                              }
                                              temp = ub(ub(0x28, local0, 0), local0, 0x10);
                                              local18 = wb(4);
                                              state = ub(local0, local0, 0xC);
                                              Qb(buffer, temp, sb(Pb(0x24), (sb(buffer, (sb(temp2, (sb(sb(Pb(0x20), (sb(buffer, (sb(local2, (sb(Pb(0x18), (0x1D ^ (local1 + temp)), 0) ^ (local2 + 1)), 0) ^ (local2 + 2)), 0) ^ (local2 + 3)), 0), (sb(0x17, (0x31 ^ local2), 0) ^ (temp + size)), 0) ^ (local2 + 1)), 0) ^ (local2 + 2)), 0) ^ (local2 + 3)), 0), 0x12, sb(0xD, (offset ^ local2), 0), 0x33, (size + 8), 0n, 0);
                                              Qb(buffer, temp2, Pb(0x30), buffer, local2, Pb(0x28), size, 0n, 0);
                                              Qb(buffer, temp, Pb(0x34), buffer, state, Pb(8), buffer, local18, 0);
                                              temp = (temp + dataOffset);
                                              func225(Pb(0xC), buffer);
                                              temp = ub(((((temp + dataOffset) << 0x18) | ((temp & 0xFF00) << 8)) | (((temp >>> 8) & 0xFF00) | (temp >>> 0x18))), buffer, 0xC);
                                              state = ub(buffer, buffer, 8);
                                              temp2 = ub(Pb(0x38), buffer, 4);
                                              Gb(local2, 0);
                                              counter = local2;
                                              temp3 = ub(counter, buffer, 0);
                                              counter = (local2 + 1);
                                              Gb(counter, 0);
                                              counter = (local2 + 2);
                                              Gb(counter, 0);
                                              temp5 = (local2 + 3);
                                              Gb(temp5, 0);
                                              temp3 = (local2 + 4);
                                              Gb(temp3, 0);
                                              temp3 = (local2 + 5);
                                              Gb(temp3, 0);
                                              temp3 = (local2 + 6);
                                              Gb(temp3, 0);
                                              temp3 = (local2 + 7);
                                              Gb(temp3, 0);
                                              temp2 = (local2 + 8);
                                              Gb(temp2, 0);
                                              temp2 = (local2 + 9);
                                              Gb(temp2, 0);
                                              temp2 = (local2 + 0xA);
                                              Gb(temp2, 0);
                                              counter = (local2 + 0xB);
                                              Gb(counter, 0);
                                              state = (local2 + 0xC);
                                              Gb(state, 0);
                                              state = (local2 + 0xD);
                                              Gb(state, 0);
                                              state = (local2 + 0xE);
                                              Gb(state, 0);
                                              temp2 = (local2 + 0xF);
                                              Gb(temp2, 0);
                                              local2 = (local2 + 0x10);
                                              dataOffset = (dataOffset + 1);
                                              offset = (offset - 0x10);
                                              state = ((offset - 0x10) ? 0x22 : 7);
                                              return;
                                            }
                                            local16 = (temp6 & 0xFFFFFF80);
                                            state = (0x80 ? 0x28 : temp6);
                                            return;
                                          }
                                          state = (counter ? 0x2E : 1);
                                          return;
                                        }
                                        Gb(local2, 0);
                                        Gb(temp2, 0);
                                        local2 = (local2 + 1);
                                        temp2 = (temp2 + 1);
                                        counter = (counter - 1);
                                        state = ((counter - 1) ? 0x25 : 0x1A);
                                        return;
                                      }
                                      state = 0xE;
                                      return;
                                    }
                                    local2 = (local1 + temp);
                                    Gb(local2, 0);
                                    temp2 = (temp + dataOffset);
                                    Gb(((temp + dataOffset) + 0x18), 0);
                                    temp3 = (local2 + 1);
                                    Gb(temp3, 0);
                                    Gb((temp2 + 0x19), 0);
                                    temp3 = (local2 + 2);
                                    Gb(temp3, 0);
                                    Gb((temp2 + 0x1A), 0);
                                    local2 = (local2 + 3);
                                    Gb(local2, 0);
                                    Gb((temp2 + 0x1B), 0);
                                    temp = (temp + 4);
                                    state = ((temp + 4) ? 0x27 : size);
                                    return;
                                  }
                                  local17 = (local1 + local16);
                                  temp4 = (temp6 & 0xF);
                                  temp7 = (temp6 & 0x70);
                                  state = ((temp6 & 0x70) ? 0x2D : 0x29);
                                  return;
                                }
                                state = (temp4 ? 8 : 1);
                                return;
                              }
                              temp = 0;
                              state = 0x20;
                              return;
                            }
                            temp5 = (local0 + offset);
                            local2 = ((temp4 - (local0 + offset)) - 0x18);
                            state = ((size ? size : local2) ? 0xE : ((temp4 - (local0 + offset)) - 0x18));
                            return;
                          }
                          dataOffset = (local0 + offset);
                          size = (local2 & 0xFFFFFFFC);
                          temp = 0;
                          state = 0x27;
                          return;
                        }
                        size = (buffer + 0x10);
                        local2 = local17;
                        offset = temp7;
                        state = 0x22;
                        return;
                      }
                      temp2 = ((local0 + temp) + 0x18);
                      local2 = (local1 + ((temp + local16) + temp7));
                      state = 0x25;
                      return;
                    }
                    temp6 = local2;
                    state = 0x23;
                    return;
                  }
                  state = (0x10 ? 0xB : offset);
                  return;
                }
                state = (local2 ? 0x32 : 6);
                return;
              }
              counter = (local2 & 3);
              temp = 0;
              state = (4 ? 0x19 : local2);
              return;
            }
            state = (offset ? 0x30 : 0x15);
            return;
          }
          state = 0x19;
          return;
        }
        counter = (size & 3);
        temp = 0;
        state = (3 ? 0 : ((offset - 0xD) & 0xFF));
        return;
      }
      state = 0x28;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 9;

  }

  /*
   * AI Summary: The function implements a state machine that manipulates memory addresses and values using bitwise operations, likely for data encoding or decoding. 
  
   */

  function func196() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func197() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local5=state, local6=counter, local7=temp, local8=loopState, local9=globalOffset, local12=temp2, local10=globalAddr, local11=absValue */
  function func198(local0, local1, local2, local3, local4) {
    let Error, Unreachable, absValue, code, counter, f64, local13, local14, local15, local16, local17, loop0, loop1, loopState, reached, state, temp, temp2;
    state = 5;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  switch (state) {
                                                    case 0: continue loop0;
                                                    case 1: return;
                                                    case 2: return;
                                                    case 3: return;
                                                    case 4: return;
                                                    case 5: return;
                                                    case 6: return;
                                                    case 7: return;
                                                    case 8: return;
                                                    case 9: return;
                                                    case 10: return;
                                                    case 11: return;
                                                    case 12: return;
                                                    case 13: return;
                                                    case 14: return;
                                                    case 15: return;
                                                    case 16: return;
                                                    case 17: return;
                                                    case 18: return;
                                                    case 19: return;
                                                    case 20: return;
                                                    case 21: return;
                                                    default: return;
                                                  }
                                                }
                                                state = (local4 + counter);
                                                temp = ((local4 ^ state) ? counter : 0);
                                                state = 9;
                                                return;
                                              }
                                              state = (local14 ? 0xE : counter);
                                              return;
                                            }
                                            local13 = 1;
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      Gb((ub(3, temp2, 0) + counter), 0);
                                                      switch ((state - 0x2B)) {
                                                        case 0: continue loop0;
                                                        case 1: return;
                                                        case 2: return;
                                                        default: return;
                                                      }
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                                return;
                                              }
                                            }
                                            state = 1;
                                            return;
                                          }
                                          temp = (counter + 1);
                                          local15 = ub(0xA, local1, 0xC);
                                          Gb((ub(0xA, local1, 0xC) + counter), 0);
                                          counter = 224;
                                          state = (0xA ? Pb(0x14) : 224);
                                          return;
                                        }
                                        Gb((temp + local15), 0);
                                        temp2 = 223;
                                        state = (0xA ? 0x12 : 223);
                                        return;
                                      }
                                      globalAddr = (global0 - 0x20);
                                      global0 = (global0 - 0x20);
                                      local13 = 1;
                                      temp = ub(local1, local1, 0x14);
                                      counter = (ub(local1, local1, 0x14) + 1);
                                      temp2 = (local1 + 0xC);
                                      local14 = ub(1, local1, 0x10);
                                      state = (counter ? 2 : ub(1, local1, 0x10));
                                      return;
                                    }
                                    state = 0xF;
                                    return;
                                  }
                                  state = (local4 - counter);
                                  temp = ((local4 ^ state) ? counter : 0);
                                  state = 9;
                                  return;
                                }
                                counter = ((counter * 0xA) + temp2);
                                state = (local14 ? 4 : temp);
                                return;
                              }
                              state = temp;
                              globalOffset = 0;
                              local16 = f64(0);
                              absValue = 0;
                              local17 = f64(0);
                              loopState = 1;
                              loop1: while (true) {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              switch (loopState) {
                                                                case 0: continue loop1;
                                                                case 1: continue loop0;
                                                                case 2: return;
                                                                case 3: return;
                                                                case 4: return;
                                                                case 5: return;
                                                                case 6: return;
                                                                case 7: return;
                                                                case 8: return;
                                                                case 9: return;
                                                                case 10: return;
                                                                case 11: return;
                                                                case 12: return;
                                                                case 13: return;
                                                                default: return;
                                                              }
                                                            }
                                                            global0 = (globalOffset + 0x20);
                                                            return;
                                                          }
                                                          globalOffset = (global0 - 0x20);
                                                          global0 = (global0 - 0x20);
                                                          local16 = local3;
                                                          absValue = (state >> 0x1F);
                                                          absValue = (((state >> 0x1F) ^ state) - absValue);
                                                          loopState = (0x135 ? 3 : (((state >> 0x1F) ^ state) - absValue));
                                                          return;
                                                        }
                                                        loopState = (0 ? 8 : state);
                                                        return;
                                                      }
                                                      local17 = wb(0);
                                                      loopState = (0 ? 4 : state);
                                                      return;
                                                    }
                                                    local16 = (local16 * local17);
                                                    loopState = (f64(9218868437227405312) ? 5 : (local16 * local17));
                                                    return;
                                                  }
                                                  Qb(Pb(0), 0xC, 9, ((absValue << 3) + 0x1080E0), 0xD, 0xA, local0, (local2 ? local16 : local16), 8);
                                                  state = 0;
                                                  loopState = 0;
                                                  return;
                                                }
                                                loopState = (f64(0) ? 5 : local16);
                                                return;
                                              }
                                              loopState = 3;
                                              return;
                                            }
                                            loopState = 0xB;
                                            return;
                                          }
                                          local16 = (local16 / f64(9214871658872686752));
                                          state = (state + 0x134);
                                          absValue = ((state + 0x134) >> 0x1F);
                                          absValue = ((state ^ absValue) - absValue);
                                          loopState = (0x135 ? 6 : ((state ^ absValue) - absValue));
                                          return;
                                        }
                                        loopState = 0xB;
                                        return;
                                      }
                                      state = 1;
                                      loopState = 0;
                                      return;
                                    }
                                    loopState = 6;
                                    return;
                                  }
                                  local16 = (local16 / local17);
                                  loopState = 5;
                                  continue loop0;
                                }
                              }
                              state = 0x13;
                              return;
                            }
                            state = (local14 ? 0xF : temp);
                            return;
                          }
                          state = (0xCCCCCCC ? 0xD : counter);
                          return;
                        }
                        state = 4;
                        return;
                      }
                      allocateAndCopy(local3, local13);
                      state = 0x13;
                      return;
                    }
                    temp = func145(ub(ub((globalAddr + 0x14), globalAddr, 8), globalAddr, 0xC));
                    state = 0x13;
                    return;
                  }
                  state = (local13 ? 0 : 7);
                  return;
                }
                temp = func145(ub(ub((globalAddr + 0x14), globalAddr, 0), globalAddr, 4));
                state = 0x13;
                return;
              }
              state = (7 ? 0xD : temp2);
              return;
            }
            temp = (temp + 1);
            state = (0xCCCCCCB ? 8 : counter);
            return;
          }
          global0 = (globalAddr + 0x20);
          return 0xB;
        }
        counter = (temp + 2);
        state = 1;
        return;
      }
      local13 = 0;
      state = 0x14;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that conditionally performs memory operations, including reads, writes, and arithmetic, potentially related to cryptographic or encoding processes.
  
   */

  function func199() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func200() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func201() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func202() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local2=state, local3=index, local4=temp, local5=cond, local6=offset, local7=writeIndex, local8=value, local9=writeIndex2, local10=count, local11=bits, local12=readVal, local13=bits2, local14=readOffset, local15=initOffset, local16=readOffset2, local17=count2, local18=endOffset, local19=readOffsetEnd */
  function func203(local0, local1) {
    let Error, Unreachable, bits, bits2, code, cond, count, count2, endOffset, index, initOffset, local20, local21, loop0, offset, reached, readOffset, readOffset2, readOffsetEnd, readVal, state, temp, value, writeIndex, writeIndex2;
    state = 0x3A;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                {
                                                                                                                                                  {
                                                                                                                                                    {
                                                                                                                                                      {
                                                                                                                                                        {
                                                                                                                                                          {
                                                                                                                                                            {
                                                                                                                                                              switch (state) {
                                                                                                                                                                case 0: continue loop0;
                                                                                                                                                                case 1: return;
                                                                                                                                                                case 2: return;
                                                                                                                                                                case 3: return;
                                                                                                                                                                case 4: return;
                                                                                                                                                                case 5: return;
                                                                                                                                                                case 6: return;
                                                                                                                                                                case 7: return;
                                                                                                                                                                case 8: return;
                                                                                                                                                                case 9: return;
                                                                                                                                                                case 10: return;
                                                                                                                                                                case 11: return;
                                                                                                                                                                case 12: return;
                                                                                                                                                                case 13: return;
                                                                                                                                                                case 14: return;
                                                                                                                                                                case 15: return;
                                                                                                                                                                case 16: return;
                                                                                                                                                                case 17: return;
                                                                                                                                                                case 18: return;
                                                                                                                                                                case 19: return;
                                                                                                                                                                case 20: return;
                                                                                                                                                                case 21: return;
                                                                                                                                                                case 22: return;
                                                                                                                                                                case 23: return;
                                                                                                                                                                case 24: return;
                                                                                                                                                                case 25: return;
                                                                                                                                                                case 26: return;
                                                                                                                                                                case 27: return;
                                                                                                                                                                case 28: return;
                                                                                                                                                                case 29: return;
                                                                                                                                                                case 30: return;
                                                                                                                                                                case 31: return;
                                                                                                                                                                case 32: return;
                                                                                                                                                                case 33: return;
                                                                                                                                                                case 34: return;
                                                                                                                                                                case 35: return;
                                                                                                                                                                case 36: return;
                                                                                                                                                                case 37: return;
                                                                                                                                                                case 38: return;
                                                                                                                                                                case 39: return;
                                                                                                                                                                case 40: return;
                                                                                                                                                                case 41: return;
                                                                                                                                                                case 42: return;
                                                                                                                                                                case 43: return;
                                                                                                                                                                case 44: return;
                                                                                                                                                                case 45: return;
                                                                                                                                                                case 46: return;
                                                                                                                                                                case 47: return;
                                                                                                                                                                case 48: return;
                                                                                                                                                                case 49: return;
                                                                                                                                                                case 50: return;
                                                                                                                                                                case 51: return;
                                                                                                                                                                case 52: return;
                                                                                                                                                                case 53: return;
                                                                                                                                                                case 54: return;
                                                                                                                                                                case 55: return;
                                                                                                                                                                case 56: return;
                                                                                                                                                                case 57: return;
                                                                                                                                                                case 58: return;
                                                                                                                                                                case 59: return;
                                                                                                                                                                case 60: return;
                                                                                                                                                                case 61: return;
                                                                                                                                                                case 62: return;
                                                                                                                                                                case 63: return;
                                                                                                                                                                case 64: return;
                                                                                                                                                                case 65: return;
                                                                                                                                                                case 66: return;
                                                                                                                                                                case 67: return;
                                                                                                                                                                case 68: return;
                                                                                                                                                                case 69: return;
                                                                                                                                                                case 70: return;
                                                                                                                                                                case 71: return;
                                                                                                                                                                case 72: return;
                                                                                                                                                                case 73: return;
                                                                                                                                                                case 74: return;
                                                                                                                                                                case 75: return;
                                                                                                                                                                default: return;
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                            state = 0x1A;
                                                                                                                                                            return;
                                                                                                                                                          }
                                                                                                                                                          value = 1;
                                                                                                                                                          state = ((writeIndex & 1) ? 0x1A : 0x38);
                                                                                                                                                          return;
                                                                                                                                                        }
                                                                                                                                                        index = (index + value);
                                                                                                                                                        writeIndex = (index + writeIndex2);
                                                                                                                                                        state = (index ? 0x23 : 0x29);
                                                                                                                                                        return;
                                                                                                                                                      }
                                                                                                                                                      temp = ((bits2 << 6) | bits);
                                                                                                                                                      state = 1;
                                                                                                                                                      return;
                                                                                                                                                    }
                                                                                                                                                    readOffsetEnd = (readOffset - 1);
                                                                                                                                                    count2 = (value - 1);
                                                                                                                                                    readVal = ub(readOffset, local1, 0x10);
                                                                                                                                                    endOffset = (Pb(4) + ub(readOffset, local1, 0x10));
                                                                                                                                                    bits2 = (value + readVal);
                                                                                                                                                    bits = (readVal - (readVal ? count : count));
                                                                                                                                                    local20 = ub(readVal, local1, 0x18);
                                                                                                                                                    local21 = wb(8);
                                                                                                                                                    initOffset = count;
                                                                                                                                                    state = 0x35;
                                                                                                                                                    return;
                                                                                                                                                  }
                                                                                                                                                  state = ((writeIndex & 1) ? 0x3F : 0xD);
                                                                                                                                                  return;
                                                                                                                                                }
                                                                                                                                                state = (cond ? 5 : index);
                                                                                                                                                return;
                                                                                                                                              }
                                                                                                                                              temp = (offset + readOffsetEnd);
                                                                                                                                              index = readVal;
                                                                                                                                              state = 0x48;
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            state = (cond ? 0x49 : index);
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          state = (count ? 0x41 : index);
                                                                                                                                          return;
                                                                                                                                        }
                                                                                                                                        cond = vb(0);
                                                                                                                                        state = (0 ? writeIndex : vb(0));
                                                                                                                                        return;
                                                                                                                                      }
                                                                                                                                      state = (cond ? 6 : index);
                                                                                                                                      return;
                                                                                                                                    }
                                                                                                                                    state = (offset ? 9 : (index + 1));
                                                                                                                                    return;
                                                                                                                                  }
                                                                                                                                  return Pb(0);
                                                                                                                                }
                                                                                                                                state = ((index + temp) ? 0x41 : cond);
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              state = (cond ? 0x29 : index);
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            temp = (temp & 0xFF);
                                                                                                                            state = 1;
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          writeIndex = (index + bits);
                                                                                                                          writeIndex2 = (index + value);
                                                                                                                          index = (index - 1);
                                                                                                                          Gb(writeIndex2, 0);
                                                                                                                          Gb(writeIndex, 0);
                                                                                                                          state = (0xC ? 0x2A : 0x3C);
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        Gb(value, 3);
                                                                                                                        temp = (0x1E | ((((bits2 << 0x12) & 0x1C0000) & 0x3F) | (bits << 6)));
                                                                                                                        state = 1;
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      Gb(value, 2);
                                                                                                                      bits = (0 | (bits << 6));
                                                                                                                      state = (0xFFFFFFF0 ? 0x12 : temp);
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    state = ((index + temp) ? 0x41 : cond);
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  state = (bits2 ? 0x14 : index);
                                                                                                                  return;
                                                                                                                }
                                                                                                                index = (temp + readOffset2);
                                                                                                                state = ((temp + readOffset2) ? 0x2B : cond);
                                                                                                                return;
                                                                                                              }
                                                                                                              index = (offset + count);
                                                                                                              state = 0x31;
                                                                                                              return;
                                                                                                            }
                                                                                                            temp = (bits | (bits2 << 0xC));
                                                                                                            state = 1;
                                                                                                            return;
                                                                                                          }
                                                                                                          throw new Error('Unreachable code reached');
                                                                                                        }
                                                                                                        cond = index;
                                                                                                        state = 0x3F;
                                                                                                        return;
                                                                                                      }
                                                                                                      offset = ub(readOffset2, local1, 0x1C);
                                                                                                      index = (cond + ub(readOffset2, local1, 0x1C));
                                                                                                      state = ((cond + ub(readOffset2, local1, 0x1C)) ? 4 : 0x32);
                                                                                                      return;
                                                                                                    }
                                                                                                    temp = (offset + readVal);
                                                                                                    value = (offset + endOffset);
                                                                                                    index = 0;
                                                                                                    state = 0x1F;
                                                                                                    return;
                                                                                                  }
                                                                                                  count = ub(sb(local1, 0, 0xC), local1, 0x3C);
                                                                                                  readOffset2 = (ub(sb(local1, 0, 0xC), local1, 0x3C) - 1);
                                                                                                  value = ub(sb(local1, ((writeIndex ^ 0xFFFFFFFF) & 1), 0xC), local1, 0x38);
                                                                                                  cond = ub(Pb(0x1C), local1, 0x34);
                                                                                                  readOffset = ub(index, local1, 0x30);
                                                                                                  offset = ub(0x1B, local1, 0x24);
                                                                                                  state = (0xFFFFFFFF ? 0x37 : ub(0x1B, local1, 0x24));
                                                                                                  return;
                                                                                                }
                                                                                                writeIndex = (index + value);
                                                                                                writeIndex2 = (index + bits2);
                                                                                                index = (index + 1);
                                                                                                Gb(writeIndex2, 0);
                                                                                                Gb(writeIndex, 0);
                                                                                                state = (0x1F ? local1 : 0x39);
                                                                                                return;
                                                                                              }
                                                                                              state = ((index + bits) ? 0xE : 7);
                                                                                              return;
                                                                                            }
                                                                                            value = (0x10000 ? 4 : temp);
                                                                                            state = 2;
                                                                                            return;
                                                                                          }
                                                                                          state = 0x19;
                                                                                          return;
                                                                                        }
                                                                                        index = 0;
                                                                                        Gb(local1, 0xE);
                                                                                        state = (0x24 ? 3 : 0x27);
                                                                                        return;
                                                                                      }
                                                                                      state = (cond ? 0x2E : index);
                                                                                      return;
                                                                                    }
                                                                                    Gb(local1, 0xC);
                                                                                    writeIndex = 0xF;
                                                                                    cond = ub(Pb(8), local1, 0x34);
                                                                                    writeIndex2 = ub((offset + count), local1, 0x30);
                                                                                    index = ub(6, local1, 4);
                                                                                    state = (ub(6, local1, 4) ? local0 : 8);
                                                                                    return;
                                                                                  }
                                                                                  temp = (temp + count);
                                                                                  state = 0x43;
                                                                                  return;
                                                                                }
                                                                                index = (initOffset ? initOffset : offset);
                                                                                bits2 = (count ? count : index);
                                                                                bits = (temp + readOffset);
                                                                                state = 0x15;
                                                                                return;
                                                                              }
                                                                              return Pb(0);
                                                                            }
                                                                            temp = ((temp - initOffset) + index);
                                                                            state = 0x43;
                                                                            return;
                                                                          }
                                                                          state = (cond ? 0x47 : index);
                                                                          return;
                                                                        }
                                                                        state = 0x44;
                                                                        return;
                                                                      }
                                                                      Gb((index + readOffset), 0);
                                                                      state = (((0x25 >> local21) & 1) ? 0xA : 0x26);
                                                                      return;
                                                                    }
                                                                    offset = (offset + local20);
                                                                    state = 0x2D;
                                                                    return;
                                                                  }
                                                                  index = (offset + readOffset2);
                                                                  state = ((offset + readOffset2) ? 0x32 : cond);
                                                                  return;
                                                                }
                                                                state = (0xFFFFFFC0 ? writeIndex : vb(0));
                                                                return;
                                                              }
                                                              value = (index + writeIndex2);
                                                              temp = vb(0);
                                                              state = (0 ? (index + writeIndex2) : vb(0));
                                                              return;
                                                            }
                                                            state = 0x35;
                                                            return;
                                                          }
                                                          index = 1;
                                                          state = 0x27;
                                                          return;
                                                        }
                                                        return Pb(0);
                                                      }
                                                      initOffset = ub(0, local1, 0x10);
                                                      count2 = (ub(0, local1, 0x10) - 1);
                                                      readVal = ub(count, local1, 0x18);
                                                      endOffset = (local0 - ub(count, local1, 0x18));
                                                      local21 = wb(8);
                                                      state = 0x2B;
                                                      return;
                                                    }
                                                    index = (temp + count);
                                                    state = 0x31;
                                                    return;
                                                  }
                                                  Gb((index + readOffset), 0);
                                                  state = (((0x42 >> local21) & 1n) ? Pb(8) : 0x1C);
                                                  return;
                                                }
                                                state = ((index + temp) ? 0x41 : cond);
                                                return;
                                              }
                                              temp = ub(readOffset2, local1, 0x1C);
                                              index = (cond + ub(readOffset2, local1, 0x1C));
                                              state = ((cond + ub(readOffset2, local1, 0x1C)) ? 0x33 : 0x32);
                                              return;
                                            }
                                            state = (0x80 ? 2 : temp);
                                            return;
                                          }
                                          offset = (index + offset);
                                          state = 0x2D;
                                          return;
                                        }
                                        state = (1 ? 0x1D : ub(0x22, local1, 0));
                                        return;
                                      }
                                      state = (((index + offset) - 1) ? 0x41 : cond);
                                      return;
                                    }
                                    temp = (temp + readVal);
                                    offset = endOffset;
                                    state = 0x16;
                                    return;
                                  }
                                  writeIndex = (index + bits);
                                  writeIndex2 = (index + value);
                                  index = (index + 1);
                                  Gb(writeIndex2, 0);
                                  Gb(writeIndex, 0);
                                  state = (0x15 ? Pb(0x1C) : 0x28);
                                  return;
                                }
                                writeIndex = (index + temp);
                                writeIndex2 = (index + count2);
                                index = (index - 1);
                                Gb(writeIndex2, 0);
                                Gb(writeIndex, 0);
                                state = (0x48 ? (temp + readVal) : 0x2C);
                                return;
                              }
                              state = 0x31;
                              return;
                            }
                            Gb(value, 1);
                            bits = (Pb(4) & 0x3F);
                            bits2 = (temp & 0x1F);
                            state = (0xFFFFFFE0 ? 0x13 : temp);
                            return;
                          }
                          throw new Error('Unreachable code reached');
                        }
                        offset = (offset + count);
                        state = 0x2D;
                        return;
                      }
                      offset = 0;
                      state = 0x16;
                      return;
                    }
                    writeIndex = 1;
                    state = 0x19;
                    return;
                  }
                  state = (initOffset ? 0x41 : 0x3B);
                  return;
                }
                index = count2;
                state = 0xC;
                return;
              }
              state = 0x3F;
              return;
            }
            state = (index ? 0x45 : 0x17);
            return;
          }
          state = (0xFFFFFFC0 ? (index + writeIndex2) : vb(0));
          return;
        }
        state = 0x32;
        return;
      }
      value = 2;
      state = (0x800 ? 2 : temp);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that manipulates memory using typed array views and bitwise operations, conditionally branching based on calculated values and external function calls (`ub`, `vb`, `wb`).
  
   */

  function func204() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func205() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func206(local0, local1) {

    func438(3);
    return 0x10B848;

  }


  /* renamed vars: exitStatus=local2 */
  function func207(local0, local1) {
    let Error, G, Ma, Unreachable, a, code, local2, local3, local4, loop0, reached;
    local2 = 4;
    loop0: while (true) {
      {
        {
          {
            {
              {
                switch (local2) {
                  case 0: continue loop0;
                  case 1: return;
                  case 2: return;
                  case 3: return;
                  case 4: return;
                  default: return;
                }
              }
              throw new Error('Unreachable code reached');
            }
            global0 = (local3 + 0x10);
            return func217();
          }
          local2 = ub(0x15, local3, 0xC);
          if (0x84) {
          } else {
          }
          local2 = 1;
          return;
        }
        imports['a']['Ma'](local1);
        local2 = 1;
        return;
      }
      local3 = (global0 - 0x10);
      global0 = (global0 - 0x10);
      imports['a']['G']((local3 + 8), local1);
      local4 = ub(3, local3, 8);
      if (ub(3, local3, 8)) {
      } else {
      }
      local2 = 0;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a state machine, primarily using the return value of a memory access/manipulation utility function (`ub`) to control its flow and potentially interact with external APIs based on specific conditions.
  
   */

  function func208() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func209() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v2;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v2 */
  }


  function func210() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: state=local2, result=local3 */
  function func211(local0, local1) {
    let Error, Unreachable, code, local2, local3, local4, local5, loop0, reached;
    local2 = 0xE;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    switch (local2) {
                                      case 0: continue loop0;
                                      case 1: return;
                                      case 2: return;
                                      case 3: return;
                                      case 4: return;
                                      case 5: return;
                                      case 6: return;
                                      case 7: return;
                                      case 8: return;
                                      case 9: return;
                                      case 10: return;
                                      case 11: return;
                                      case 12: return;
                                      case 13: return;
                                      case 14: return;
                                      default: return;
                                    }
                                  }
                                  local3 = ub(func266(local5, local4), local0, 8);
                                  local2 = 0xB;
                                  return;
                                }
                                local2 = 0xD;
                                return;
                              }
                              local4 = (0x10000 ? 4 : local1);
                              local2 = 4;
                              return;
                            }
                            local2 = 0xD;
                            return;
                          }
                          local3 = local5;
                          if (local4) {
                          } else {
                          }
                          local2 = 0xB;
                          return;
                        }
                        local4 = 1;
                        local2 = 4;
                        return;
                      }
                      if (0x800) {
                      } else {
                      }
                      local2 = 3;
                      return;
                    }
                    local2 = 0xD;
                    return;
                  }
                  if (0x10000) {
                  } else {
                  }
                  local2 = 1;
                  return;
                }
                local2 = 0xD;
                return;
              }
              local4 = 2;
              local2 = 4;
              return;
            }
            local3 = (ub(sb(local3, local1, 0), local0, 4) + local3);
            if (0x80) {
            } else {
            }
            local2 = 9;
            return;
          }
          if (0x800) {
          } else {
          }
          local2 = 2;
          return;
        }
        return 0;
      }
      local5 = ub(Pb(8), local0, 8);
      if (0x80) {
      } else {
      }
      local2 = 0xC;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 5;

  }

  /*
   * AI Summary: The function simulates a simplified state machine, primarily returning immediately based on initial state, but potentially calling the `ub` function up to four times to perform bitwise operations on memory values based on conditional logic and input parameters. 
  
   */

  function func212() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func213() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func214 is sb
  function sb() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func215() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func216() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func217(local0, local1) {
    let Error, Ha, Unreachable, a, code, reached;

    imports['a']['Ha'](local0, local1);
    throw new Error('Unreachable code reached');

  }


  function func218() {
    let Attempted, ERROR, FATAL, POP, add, an, empty, from, i32, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in i32.add */
  }


  function func219() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func220() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func221() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func222() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func223() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func224() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func225() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local3=state, local4=tempVal */
  function func226(local0, local1, local2) {
    let Error, Unreachable, code, local5, local6, local7, loop0, reached, rotr32, state, tempVal;
    local7 = 0x10;
    state = 0xC;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          switch (state) {
                                            case 0: continue loop0;
                                            case 1: return;
                                            case 2: return;
                                            case 3: return;
                                            case 4: return;
                                            case 5: return;
                                            case 6: return;
                                            case 7: return;
                                            case 8: return;
                                            case 9: return;
                                            case 10: return;
                                            case 11: return;
                                            case 12: return;
                                            case 13: return;
                                            case 14: return;
                                            case 15: return;
                                            case 16: return;
                                            case 17: return;
                                            default: return;
                                          }
                                        }
                                        state = (0x78 ? 0xB : local1);
                                        return;
                                      }
                                      state = (7 ? 0xA : local5);
                                      return;
                                    }
                                    tempVal = (local0 + (tempVal << 2));
                                    state = (6 ^ ub((rotr32(ub(0xB, (local0 + (tempVal << 2)), 0), local2) & 0x3030303), (local0 + (local6 << 2)), 0));
                                    tempVal = (local1 + 2);
                                    local6 = ((local1 + 2) - local7);
                                    state = (0x78 ? 0xB : ((local1 + 2) - local7));
                                    return;
                                  }
                                  state = (local0 + (tempVal << 2));
                                  tempVal = (Pb(0) ^ ub((rotr32(ub(0x11, (local0 + (tempVal << 2)), 0), local2) & 0x3030303), (local0 + (local6 << 2)), 0));
                                  local1 = (local1 + 7);
                                  local7 = ((local1 + 7) - local7);
                                  state = (0x78 ? 0xB : ((local1 + 7) - local7));
                                  return;
                                }
                                state = (5 ? 0xB : local5);
                                return;
                              }
                              state = (6 ? 0xB : local5);
                              return;
                            }
                            state = (local0 + (local1 << 2));
                            local5 = (0xD ^ ub((rotr32(ub(3, (local0 + (local1 << 2)), 0), local2) & 0x3030303), (local0 + (local5 << 2)), 0));
                            tempVal = (local1 + 1);
                            local6 = ((local1 + 1) - local7);
                            state = (0x78 ? 0xB : ((local1 + 1) - local7));
                            return;
                          }
                          tempVal = (local0 + (tempVal << 2));
                          state = (Pb(0) ^ ub((rotr32(ub(0xF, (local0 + (tempVal << 2)), 0), local2) & 0x3030303), (local0 + (local6 << 2)), 0));
                          tempVal = (local1 + 4);
                          local6 = ((local1 + 4) - local7);
                          state = (0x78 ? 0xB : ((local1 + 4) - local7));
                          return;
                        }
                        tempVal = (local0 + (tempVal << 2));
                        state = (Pb(0) ^ ub((rotr32(ub(0x10, (local0 + (tempVal << 2)), 0), local2) & 0x3030303), (local0 + (local6 << 2)), 0));
                        tempVal = (local1 + 3);
                        local6 = ((local1 + 3) - local7);
                        state = (0x78 ? 0xB : ((local1 + 3) - local7));
                        return;
                      }
                      tempVal = (local0 + (tempVal << 2));
                      state = (Pb(0) ^ ub((rotr32(ub(0xE, (local0 + (tempVal << 2)), 0), local2) & 0x3030303), (local0 + (local6 << 2)), 0));
                      tempVal = (local1 + 5);
                      local6 = ((local1 + 5) - local7);
                      state = (0x78 ? 0xB : ((local1 + 5) - local7));
                      return;
                    }
                    local1 = (local0 + (local1 << 2));
                    local0 = (Pb(0) ^ ub((rotr32(ub(4, (local0 + (local1 << 2)), 0), local2) & 0x3030303), (local0 + (local7 << 2)), 0));
                    return Pb(0);
                  }
                  throw new Error('Unreachable code reached');
                }
                local5 = (local1 - local7);
                state = (0x78 ? 0 : (local1 - local7));
                return;
              }
              tempVal = (local0 + (tempVal << 2));
              state = (((((local0 << 6) & 0xC0C0C0C0) ^ (((local0 << 4) & 0xF0F0F0F0) ^ ((local0 << 2) & 0xFCFCFCFC))) ^ local0) ^ ub((rotr32(ub(0xB, (local0 + (tempVal << 2)), 0), local2) & 0x3030303), (local0 + (local6 << 2)), 0));
              tempVal = (local1 + 6);
              local6 = ((local1 + 6) - local7);
              state = (0x78 ? 0xB : ((local1 + 6) - local7));
              return;
            }
            state = (3 ? 0xB : local5);
            return;
          }
          state = (0x78 - local1);
          local5 = (0x78 ? 0 : state);
          state = (1 ? (0x78 - local1) : (0x78 ? 0 : state));
          return;
        }
        state = (4 ? 0xB : local5);
        return;
      }
      state = (2 ? 0xB : local5);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function iteratively performs memory lookups and bitwise operations based on input values, likely implementing a custom hashing or encoding algorithm.
  
   */

  function func227() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local5=state, local6=offset, local7=allocBase */
  function func228(local0, local1, local2, local3, local4) {
    let Error, Unreachable, allocBase, code, f64, local10, local11, local12, local8, local9, loop0, offset, reached, state;
    state = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              switch (state) {
                                                case 0: continue loop0;
                                                case 1: return;
                                                case 2: return;
                                                case 3: return;
                                                case 4: return;
                                                case 5: return;
                                                case 6: return;
                                                case 7: return;
                                                case 8: return;
                                                case 9: return;
                                                case 10: return;
                                                case 11: return;
                                                case 12: return;
                                                case 13: return;
                                                case 14: return;
                                                case 15: return;
                                                case 16: return;
                                                case 17: return;
                                                case 18: return;
                                                case 19: return;
                                                default: return;
                                              }
                                            }
                                            local12 = wb(0);
                                            if (0) {
                                            } else {
                                            }
                                            state = 0xA;
                                            return;
                                          }
                                          local11 = (local11 / local12);
                                          state = 8;
                                          return;
                                        }
                                        if (0) {
                                        } else {
                                        }
                                        state = 6;
                                        return;
                                      }
                                      local8 = ub(4, local1, 0xC);
                                      state = 0x11;
                                      return;
                                    }
                                    local11 = (local11 / f64(9214871658872686752));
                                    local4 = (local4 + 0x134);
                                    state = ((local4 + 0x134) >> 0x1F);
                                    offset = ((local4 ^ state) - state);
                                    if (0x135) {
                                    } else {
                                    }
                                    state = 0xE;
                                    return;
                                  }
                                  offset = (offset + 1);
                                  if (local9) {
                                  } else {
                                  }
                                  state = 0x11;
                                  return;
                                }
                                func210(local1, (allocBase + 4));
                                state = 0x10;
                                return;
                              }
                              allocBase = (global0 - 0x10);
                              global0 = (global0 - 0x10);
                              offset = ub(Pb(0), local1, 0x14);
                              local9 = ub(ub(Pb(0), local1, 0x14), local1, 0x10);
                              if (ub(ub(Pb(0), local1, 0x14), local1, 0x10)) {
                              } else {
                              }
                              state = 0x13;
                              return;
                            }
                            Qb(Pb(4), local0, Pb(4), local0, 1, 3, local0, (local2 ? local11 : local11), 8);
                            state = 0x10;
                            return;
                          }
                          state = 0xE;
                          return;
                        }
                        local11 = (local11 * local12);
                        if (f64(9218868437227405312)) {
                        } else {
                        }
                        state = 8;
                        return;
                      }
                      state = 0x13;
                      return;
                    }
                    state = 0;
                    return;
                  }
                  if (0x65) {
                  } else {
                  }
                  state = 0x12;
                  return;
                }
                if (f64(0)) {
                } else {
                }
                state = 8;
                return;
              }
              func210(local1, (allocBase + 4));
              state = 0x10;
              return;
            }
            global0 = (allocBase + 0x10);
            return Pb(0);
          }
          Gb((offset + local8), 0);
          local10 = 1;
          if (9) {
          } else {
          }
          state = 0xD;
          return;
        }
        state = 0x10;
        return;
      }
      local11 = local3;
      state = (local4 >> 0x1F);
      offset = (((local4 >> 0x1F) ^ local4) - state);
      if (0x135) {
      } else {
      }
      state = 0;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a state machine that appears to manage memory allocation, reading and writing 64-bit values based on calculated offsets, ultimately zeroing out a memory location via `wb`.
  
   */

  function func229(local0, local1, local2) {
    let Error, Unreachable, code, local3, local4, local5, loop0, reached;

    local3 = 0xC;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          switch (local3) {
                                            case 0: continue loop0;
                                            case 1: return;
                                            case 2: return;
                                            case 3: return;
                                            case 4: return;
                                            case 5: return;
                                            case 6: return;
                                            case 7: return;
                                            case 8: return;
                                            case 9: return;
                                            case 10: return;
                                            case 11: return;
                                            case 12: return;
                                            case 13: return;
                                            case 14: return;
                                            case 15: return;
                                            case 16: return;
                                            case 17: return;
                                            default: return;
                                          }
                                        }
                                        if (3) {
                                        } else {
                                        }
                                        local3 = 8;
                                        return;
                                      }
                                      if (4) {
                                      } else {
                                      }
                                      local3 = 8;
                                      return;
                                    }
                                    if (2) {
                                    } else {
                                    }
                                    local3 = 8;
                                    return;
                                  }
                                  if (1) {
                                  } else {
                                  }
                                  local3 = 8;
                                  return;
                                }
                                local4 = 0;
                                local3 = 8;
                                return;
                              }
                              Gb(local1, 0);
                              local4 = 0x2E;
                              if (0x2E) {
                              } else {
                              }
                              local3 = 3;
                              return;
                            }
                            Gb(local1, 1);
                            local4 = 0x2E;
                            if (0x2E) {
                            } else {
                            }
                            local3 = 2;
                            return;
                          }
                          func283(local2);
                          local4 = 1;
                          local3 = 8;
                          return;
                        }
                        Gb(local0, 4);
                        func438(local2);
                        global0 = (local5 + 0x10);
                        return local1;
                      }
                      Gb(local1, 6);
                      local4 = 0x2E;
                      local3 = 8;
                      return;
                    }
                    if (local2) {
                    } else {
                    }
                    local3 = 4;
                    return;
                  }
                  Gb(local1, 2);
                  local4 = 0x2E;
                  if (0x2E) {
                  } else {
                  }
                  local3 = 0;
                  return;
                }
                local5 = (global0 - 0x10);
                global0 = (global0 - 0x10);
                if (7) {
                } else {
                }
                local3 = 7;
                return;
              }
              Gb(local1, 3);
              local4 = 0x2E;
              if (0x2E) {
              } else {
              }
              local3 = 1;
              return;
            }
            Gb(local1, 4);
            local4 = 0x2E;
            if (0x2E) {
            } else {
            }
            local3 = 0x10;
            return;
          }
          Gb(local1, 5);
          local4 = 0x2E;
          if (0x2E) {
          } else {
          }
          local3 = 0x11;
          return;
        }
        if (5) {
        } else {
        }
        local3 = 8;
        return;
      }
      if (6) {
      } else {
      }
      local3 = 8;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 9;

  }

  /*
   * AI Summary: The function performs conditional operations based on input parameters and a state variable, primarily calling `Gb` (memory manipulation) and ultimately returning a value or terminating early. 
  
   */

  function func230() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func231() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func232(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, loop0, reached;

    local5 = 1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  switch (local5) {
                    case 0: continue loop0;
                    case 1: return;
                    case 2: return;
                    case 3: return;
                    case 4: return;
                    case 5: return;
                    default: return;
                  }
                }
                return 1;
              }
              if (0x110000) {
              } else {
              }
              local5 = 2;
              return;
            }
            if (local3) {
            } else {
            }
            local5 = 4;
            return;
          }
          return table0[ub(local4, local1, 0xC)](3, local0, local3);
        }
        return 0;
      }
      if (table0[ub(local2, local1, 0x10)](5, local0)) {
      } else {
      }
      local5 = 2;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 0;

  }

  /*
   * AI Summary: The function conditionally executes one of two memory lookups based on input parameters and returns the result of a function call from a lookup table, or defaults to returning various constant values.
  
   */

  // func233 is Bb
  function Bb() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func234() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func235() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local3=state, local10=arg2, local4=idx, local5=val, local6=cnt, local7=tmp7, local8=size, local9=n, local11=arg1, local12=heapBase, local13=arg0, local14=offset, local15=endOffset, local16=count, local17=arrayPtr, local18=newSize */
  function func236(local0, local1, local2) {
    let Error, Unreachable, arg0, arg1, arg2, arrayPtr, cnt, code, count, endOffset, heapBase, idx, local19, local20, local21, loop0, n, newSize, offset, reached, size, state, tmp7, val;
    state = 0x15;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      switch (state) {
                                                                        case 0: continue loop0;
                                                                        case 1: return;
                                                                        case 2: return;
                                                                        case 3: return;
                                                                        case 4: return;
                                                                        case 5: return;
                                                                        case 6: return;
                                                                        case 7: return;
                                                                        case 8: return;
                                                                        case 9: return;
                                                                        case 10: return;
                                                                        case 11: return;
                                                                        case 12: return;
                                                                        case 13: return;
                                                                        case 14: return;
                                                                        case 15: return;
                                                                        case 16: return;
                                                                        case 17: return;
                                                                        case 18: return;
                                                                        case 19: return;
                                                                        case 20: return;
                                                                        case 21: return;
                                                                        case 22: return;
                                                                        case 23: return;
                                                                        case 24: return;
                                                                        case 25: return;
                                                                        case 26: return;
                                                                        case 27: return;
                                                                        case 28: return;
                                                                        case 29: return;
                                                                        case 30: return;
                                                                        case 31: return;
                                                                        default: return;
                                                                      }
                                                                    }
                                                                    local1 = arg2;
                                                                    state = (0x28 ? 7 : (val + cnt));
                                                                    return;
                                                                  }
                                                                  idx = (idx + n);
                                                                  tmp7 = (tmp7 ? (idx + n) : idx);
                                                                  local1 = offset;
                                                                  state = 0xA;
                                                                  return;
                                                                }
                                                                val = arg1;
                                                                state = (0x28 ? 7 : (cnt + n));
                                                                return;
                                                              }
                                                              n = (heapBase + (cnt << 2));
                                                              state = 0x13;
                                                              return;
                                                            }
                                                            tmp7 = 0;
                                                            idx = 0;
                                                            state = 0x1F;
                                                            return;
                                                          }
                                                          n = (idx + 4);
                                                          cnt = (arg2 + 1);
                                                          arg1 = ub(8, val, 0);
                                                          size = (val + 4);
                                                          val = (val + 4);
                                                          state = (arg1 ? 0x1C : 0x13);
                                                          return;
                                                        }
                                                        idx = endOffset;
                                                        state = 1;
                                                        return;
                                                      }
                                                      throw new Error('Unreachable code reached');
                                                    }
                                                    local20 = (Pb(0) + (ub((idx + ub(local19, idx, 0)), arg0, 0) * local21));
                                                    local19 = (local20 >> 0x20n);
                                                    idx = (idx + 4);
                                                    arg1 = (val + (offset << 2));
                                                    arg0 = val;
                                                    n = (n + 1);
                                                    state = ((n + 1) ? 2 : count);
                                                    return;
                                                  }
                                                  n = val;
                                                  idx = cnt;
                                                  state = (arg0 ? 0xC : local1);
                                                  return;
                                                }
                                                cnt = (heapBase + (val << 2));
                                                state = 9;
                                                return;
                                              }
                                              arg0 = (local1 + (local2 << 2));
                                              state = (size ? 0x18 : 4);
                                              return;
                                            }
                                            func458(0xA0);
                                            global0 = (heapBase + 0xA0);
                                            return Pb(0xA0);
                                          }
                                          idx = local2;
                                          state = (0x100000000n ? 0x11 : local20);
                                          return;
                                        }
                                        idx = size;
                                        state = (0x100000000n ? 1 : local20);
                                        return;
                                      }
                                      idx = (size + n);
                                      state = (0x28 ? 7 : (size + n));
                                      return;
                                    }
                                    local21 = arg2;
                                    local19 = 0n;
                                    cnt = 0xFFFFFFFF;
                                    arg2 = local2;
                                    arg1 = local0;
                                    state = 0;
                                    return;
                                  }
                                  idx = (idx + arg2);
                                  tmp7 = (tmp7 ? (idx + arg2) : idx);
                                  val = size;
                                  state = 3;
                                  return;
                                }
                                idx = (idx + 1);
                                val = ub(tmp7, local1, 0);
                                cnt = (local1 + 4);
                                local1 = (local1 + 4);
                                state = (val ? 0x14 : 0x1F);
                                return;
                              }
                              arg2 = cnt;
                              idx = n;
                              state = (arrayPtr ? 0xC : val);
                              return;
                            }
                            local1 = (idx - 1);
                            tmp7 = (tmp7 ? (idx - 1) : local1);
                            local1 = cnt;
                            state = 0x1F;
                            return;
                          }
                          idx = (global0 - 0xA0);
                          global0 = (global0 - 0xA0);
                          copyData(0, 0xA0);
                          heapBase = idx;
                          size = ub(0x16, local0, 0xA0);
                          state = (local2 ? 0x1D : ub(0x16, local0, 0xA0));
                          return;
                        }
                        state = (0x29 ? 7 : size);
                        return;
                      }
                      newSize = (local2 + 1);
                      endOffset = (local1 + 4);
                      count = ((local2 - 1) & 0x3FFFFFFF);
                      offset = (local1 + (local2 << 2));
                      arrayPtr = (local0 + (size << 2));
                      cnt = 0;
                      val = local0;
                      tmp7 = 0;
                      state = 3;
                      return;
                    }
                    endOffset = (size + 1);
                    arrayPtr = (local0 + (size << 2));
                    val = 0;
                    local2 = (size + 0);
                    count = ((size - 1) & 0x3FFFFFFF);
                    tmp7 = 0;
                    state = 0xA;
                    return;
                  }
                  cnt = (idx + 4);
                  val = (n + 1);
                  arg2 = ub(local0, local1, 0);
                  offset = (local1 + 4);
                  local1 = (local1 + 4);
                  state = (arg2 ? 0x10 : 9);
                  return;
                }
                idx = newSize;
                state = 0x11;
                return;
              }
              local20 = (Pb(0) + (ub((idx + ub(local19, idx, 0)), arg1, 0) * local21));
              local19 = (local20 >> 0x20n);
              idx = (idx + 4);
              arg2 = (local1 + (arrayPtr << 2));
              arg1 = local1;
              cnt = (cnt + 1);
              state = ((cnt + 1) ? 0 : count);
              return;
            }
            local21 = arg1;
            local19 = 0n;
            n = 0xFFFFFFFF;
            arg1 = endOffset;
            arg0 = local1;
            state = 2;
            return;
          }
          state = (0x29 ? 7 : size);
          return;
        }
        idx = (local2 + arg2);
        state = (0x28 ? 7 : (local2 + arg2));
        return;
      }
      state = (arg0 ? 0xC : local1);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that iterates through memory, performing conditional calculations and memory reads via calls to an external `ub` function, likely related to data processing or checksumming. 
  
   */

  function func237() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func238(local0) {
    let local1, loop0;

    local1 = 2;
    loop0: while (true) {
      {
        {
          {
            {
              switch (local1) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            func279(local0, 0x158);
            local1 = 3;
            return;
          }
          local1 = (ub(local0, local0, 4) - 1);
          local1 = (local1 ? 3 : 0);
          return;
        }
        local0 = ub(3, local0, 0);
        local1 = (0xFFFFFFFF ? 1 : ub(3, local0, 0));
        return;
      }
    }

  }

  /*
   * AI Summary: The function conditionally executes a memory access and manipulation routine based on a value derived from memory, ultimately returning based on the result or immediately if a specific condition is met.
  
   */

  // func239 is Ib
  function Ib(local0, local1, local2, local3) {
    let Error, Unreachable, code, local4, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            {
              switch (local4) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            local4 = ((local1 & (0x80000000 - local3)) ? local3 : 1);
            return;
          }
          local3 = func125(local2);
          local4 = (func125(local2) ? local1 : local3);
          return;
        }
        return local3;
      }
    }
    throw new Error('Unreachable code reached');
    return local0;

  }

  /*
   * AI Summary: Conditionally allocates or retrieves memory based on input parameters using `func125`, returning a status code or allocated size.
  
   */

  function func240(local0, local1) {

    func438(0x12);
    return 0x102BA7;

  }


  function func241() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func242() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func243() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local3=state, local10=byteMask6, local4=tempVar, local5=byteMask1, local6=byteMask2, local7=byteMask3, local8=byteMask4, local9=byteMask5, local11=byteMask7, local12=byteMask8, local13=byteMask9 */
  function func244(local0, local1, local2) {
    let Error, Unreachable, byteMask1, byteMask2, byteMask3, byteMask4, byteMask5, byteMask6, byteMask7, byteMask8, byteMask9, code, local14, local15, local16, loop0, reached, state, tempVar;
    byteMask1 = 0x10;
    tempVar = 0x10;
    state = 0xA;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            switch (state) {
                                              case 0: continue loop0;
                                              case 1: return;
                                              case 2: return;
                                              case 3: return;
                                              case 4: return;
                                              case 5: return;
                                              case 6: return;
                                              case 7: return;
                                              case 8: return;
                                              case 9: return;
                                              case 10: return;
                                              case 11: return;
                                              case 12: return;
                                              case 13: return;
                                              case 14: return;
                                              case 15: return;
                                              case 16: return;
                                              case 17: return;
                                              case 18: return;
                                              case 19: return;
                                              case 20: return;
                                              case 21: return;
                                              case 22: return;
                                              case 23: return;
                                              case 24: return;
                                              case 25: return;
                                              default: return;
                                            }
                                          }
                                          state = (0xF ? 4 : byteMask1);
                                          return;
                                        }
                                        byteMask4 = (byteMask9 ^ local15);
                                        tempVar = (byteMask8 ^ local14);
                                        byteMask2 = (((byteMask9 ^ local15) ^ ((byteMask8 ^ local14) >>> 4)) & 0xF0F0F0F);
                                        state = 0x16;
                                        return;
                                      }
                                      state = 8;
                                      return;
                                    }
                                    state = 2;
                                    return;
                                  }
                                  state = (7 ? 9 : byteMask1);
                                  return;
                                }
                                byteMask1 = (byteMask1 ^ byteMask3);
                                state = (byteMask5 ^ byteMask7);
                                byteMask3 = (((byteMask1 ^ byteMask3) ^ ((byteMask5 ^ byteMask7) >>> 2)) & 0x33333333);
                                byteMask7 = (byteMask2 ^ byteMask4);
                                local1 = (local1 ^ local2);
                                local2 = (((byteMask2 ^ byteMask4) ^ ((local1 ^ local2) >>> 2)) & 0x33333333);
                                byteMask5 = ((byteMask3 << 2) ^ state);
                                tempVar = ((local2 << 2) ^ local1);
                                local1 = ((((byteMask3 << 2) ^ state) ^ (((local2 << 2) ^ local1) >>> 4)) & 0xF0F0F0F);
                                state = 1;
                                return;
                              }
                              state = 0x11;
                              return;
                            }
                            state = 0x14;
                            return;
                          }
                          state = (3 ? 0x12 : tempVar);
                          return;
                        }
                        state = (0xB ? 0 : byteMask1);
                        return;
                      }
                      state = (7 ? 0x17 : tempVar);
                      return;
                    }
                    state = (0xF ? 0x10 : tempVar);
                    return;
                  }
                  byteMask1 = ub(0x19, local2, 0xC);
                  state = ub(byteMask1, local1, 0xC);
                  byteMask3 = ((0x15 ^ (ub(byteMask1, local1, 0xC) >>> 1)) & 0x55555555);
                  byteMask7 = ub(0x18, local2, 8);
                  tempVar = ub(byteMask7, local1, 8);
                  byteMask5 = ((0xC ^ (ub(byteMask7, local1, 8) >>> 1)) & 0x55555555);
                  local15 = ((byteMask3 << 1) ^ state);
                  byteMask6 = ((byteMask5 << 1) ^ tempVar);
                  byteMask9 = ((((byteMask3 << 1) ^ state) ^ (((byteMask5 << 1) ^ tempVar) >>> 2)) & 0x33333333);
                  byteMask4 = ub(Pb(0x18), local2, 4);
                  state = ub(byteMask4, local1, 4);
                  byteMask2 = (((byteMask2 ^ byteMask4) ^ (ub(byteMask4, local1, 4) >>> 1)) & 0x55555555);
                  local2 = ub(local0, local2, 0);
                  tempVar = ub(local2, local1, 0);
                  local1 = ((Pb(4) ^ (ub(local2, local1, 0) >>> 1)) & 0x55555555);
                  local14 = ((byteMask2 << 1) ^ state);
                  tempVar = ((local1 << 1) ^ tempVar);
                  byteMask8 = ((((byteMask2 << 1) ^ state) ^ (((local1 << 1) ^ tempVar) >>> 2)) & 0x33333333);
                  local16 = ((byteMask9 << 2) ^ byteMask6);
                  tempVar = ((byteMask8 << 2) ^ tempVar);
                  byteMask6 = ((((byteMask9 << 2) ^ byteMask6) ^ (((byteMask8 << 2) ^ tempVar) >>> 4)) & 0xF0F0F0F);
                  state = 6;
                  return;
                }
                throw new Error('Unreachable code reached');
              }
              return Pb(0x1C);
            }
            state = (0xB ? 0xD : tempVar);
            return;
          }
          byteMask1 = (byteMask1 ^ byteMask3);
          tempVar = (local2 ^ byteMask7);
          local2 = (((byteMask1 ^ byteMask3) ^ ((local2 ^ byteMask7) >>> 4)) & 0xF0F0F0F);
          state = 3;
          return;
        }
        state = (3 ? 0xE : byteMask1);
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function performs a series of bitwise operations and calls to the `ub` function to likely implement a custom hashing or encryption algorithm. 
  
   */

  function func245() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func246() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func247() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: state=local3 */
  function func248(local0, local1, local2) {
    let Error, Unreachable, code, local3, local4, local5, local6, loop0, reached;
    local3 = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    switch (local3) {
                      case 0: continue loop0;
                      case 1: return;
                      case 2: return;
                      case 3: return;
                      case 4: return;
                      case 5: return;
                      case 6: return;
                      default: return;
                    }
                  }
                  local0 = (local0 + 1);
                  local1 = (local1 + 1);
                  local2 = (local2 - 1);
                  if ((local2 - 1)) {
                  } else {
                  }
                  local3 = 3;
                  return;
                }
                Gb(local0, 0);
                local5 = 5;
                Gb(local1, 0);
                local6 = 5;
                if (5) {
                } else {
                }
                local3 = 6;
                return;
              }
              local4 = 0;
              if (local2) {
              } else {
              }
              local3 = 3;
              return;
            }
            return local4;
          }
          local3 = 1;
          return;
        }
        local3 = 1;
        return;
      }
      local4 = (local5 - local6);
      local3 = 3;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 4;

  }

  /*
   * AI Summary: The function `func248` immediately returns without any side effects.
  
   */

  function func249(local0, local1) {


  }


  function func250(local0) {
    let local1;

    local1 = (global0 - 0x30);
    global0 = (global0 - 0x30);
    Qb(local1, 2, Pb(0x14), local1, 0x1010A0, Pb(0x10), local1, 1n, 0x1C);
    Qb(local1, 1, Pb(0xC), local1, local0, Pb(8), local1, ((local1 + 8) | 0x100000000n), 0x28);
    global0 = (local1 + 0x30);
    return func221((local1 + 0x10));

  }


  /* renamed vars: state=local1 */
  function func251(local0) {
    let Error, Ma, Unreachable, a, code, local1, local2, loop0, reached;
    local1 = 1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  switch (local1) {
                                    case 0: continue loop0;
                                    case 1: return;
                                    case 2: return;
                                    case 3: return;
                                    case 4: return;
                                    case 5: return;
                                    case 6: return;
                                    case 7: return;
                                    case 8: return;
                                    case 9: return;
                                    case 10: return;
                                    case 11: return;
                                    case 12: return;
                                    case 13: return;
                                    default: return;
                                  }
                                }
                                Gb(local0, 0x364);
                                if (3) {
                                } else {
                                }
                                local1 = 5;
                                return;
                              }
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          Gb(local0, 0x6D8);
                                          switch (0xC) {
                                            case 0: continue loop0;
                                            case 1: return;
                                            case 2: return;
                                            case 3: return;
                                            default: return;
                                          }
                                        }
                                        return;
                                      }
                                      return;
                                    }
                                    return;
                                  }
                                  return;
                                }
                              }
                              local1 = 0xB;
                              return;
                            }
                            local2 = ub(3, local0, 0x6D0);
                            if (0x84) {
                            } else {
                            }
                            local1 = 6;
                            return;
                          }
                          Gb(local0, 0x6CC);
                          if (3) {
                          } else {
                          }
                          local1 = 2;
                          return;
                        }
                        imports['a']['Ma'](local2);
                        local1 = 8;
                        return;
                      }
                      local2 = ub(0xA, local0, 0x6D0);
                      if (0x84) {
                      } else {
                      }
                      local1 = 8;
                      return;
                    }
                    local0 = ub(4, local0, 0x6D4);
                    if (0x83) {
                    } else {
                    }
                    local1 = 0xB;
                    return;
                  }
                  local1 = 0xB;
                  return;
                }
                local0 = ub(0xD, local0, 0x6D4);
                if (0x83) {
                } else {
                }
                local1 = 0xD;
                return;
              }
              imports['a']['Ma'](local2);
              local1 = 6;
              return;
            }
            local1 = 2;
            return;
          }
          return func455(ub(0xD, local0, 0x6D4), 7, (local0 + 0x368));
        }
        local1 = 5;
        return;
      }
      imports['a']['Ma'](local0);
      local1 = 0xB;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function uses a state machine and multiple calls to a memory access/manipulation utility function (`ub`) to conditionally update its state and return, possibly invoking an external function (`Ma`).
  
   */

  function func252(local0, local1) {

    return func218(local1);

  }


  function func253() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func254() {
    let Attempted, ERROR, FATAL, POP, add, an, empty, from, i32, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in i32.add */
  }


  /* renamed vars: local5=state, local6=i, local7=j, local8=k, local9=count, local10=flag, local11=temp */
  function func255(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, count, flag, i, j, k, local12, local13, local14, local15, local16, loop0, reached, state, temp;
    state = 0xB;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                switch (state) {
                                                                                                                                                  case 0: continue loop0;
                                                                                                                                                  case 1: return;
                                                                                                                                                  case 2: return;
                                                                                                                                                  case 3: return;
                                                                                                                                                  case 4: return;
                                                                                                                                                  case 5: return;
                                                                                                                                                  case 6: return;
                                                                                                                                                  case 7: return;
                                                                                                                                                  case 8: return;
                                                                                                                                                  case 9: return;
                                                                                                                                                  case 10: return;
                                                                                                                                                  case 11: return;
                                                                                                                                                  case 12: return;
                                                                                                                                                  case 13: return;
                                                                                                                                                  case 14: return;
                                                                                                                                                  case 15: return;
                                                                                                                                                  case 16: return;
                                                                                                                                                  case 17: return;
                                                                                                                                                  case 18: return;
                                                                                                                                                  case 19: return;
                                                                                                                                                  case 20: return;
                                                                                                                                                  case 21: return;
                                                                                                                                                  case 22: return;
                                                                                                                                                  case 23: return;
                                                                                                                                                  case 24: return;
                                                                                                                                                  case 25: return;
                                                                                                                                                  case 26: return;
                                                                                                                                                  case 27: return;
                                                                                                                                                  case 28: return;
                                                                                                                                                  case 29: return;
                                                                                                                                                  case 30: return;
                                                                                                                                                  case 31: return;
                                                                                                                                                  case 32: return;
                                                                                                                                                  case 33: return;
                                                                                                                                                  case 34: return;
                                                                                                                                                  case 35: return;
                                                                                                                                                  case 36: return;
                                                                                                                                                  case 37: return;
                                                                                                                                                  case 38: return;
                                                                                                                                                  case 39: return;
                                                                                                                                                  case 40: return;
                                                                                                                                                  case 41: return;
                                                                                                                                                  case 42: return;
                                                                                                                                                  case 43: return;
                                                                                                                                                  case 44: return;
                                                                                                                                                  case 45: return;
                                                                                                                                                  case 46: return;
                                                                                                                                                  case 47: return;
                                                                                                                                                  case 48: return;
                                                                                                                                                  case 49: return;
                                                                                                                                                  case 50: return;
                                                                                                                                                  case 51: return;
                                                                                                                                                  case 52: return;
                                                                                                                                                  case 53: return;
                                                                                                                                                  case 54: return;
                                                                                                                                                  case 55: return;
                                                                                                                                                  case 56: return;
                                                                                                                                                  case 57: return;
                                                                                                                                                  case 58: return;
                                                                                                                                                  case 59: return;
                                                                                                                                                  case 60: return;
                                                                                                                                                  case 61: return;
                                                                                                                                                  case 62: return;
                                                                                                                                                  case 63: return;
                                                                                                                                                  case 64: return;
                                                                                                                                                  case 65: return;
                                                                                                                                                  case 66: return;
                                                                                                                                                  case 67: return;
                                                                                                                                                  case 68: return;
                                                                                                                                                  default: return;
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              state = 0x1D;
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            k = (count + 1);
                                                                                                                                            i = 0;
                                                                                                                                            flag = 1;
                                                                                                                                            local12 = count;
                                                                                                                                            state = 0x12;
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          temp = ((local4 + (i ^ 0xFFFFFFFF)) - local12);
                                                                                                                                          if (((local4 + (i ^ 0xFFFFFFFF)) - local12)) {
                                                                                                                                          } else {
                                                                                                                                          }
                                                                                                                                          state = 0x27;
                                                                                                                                          return;
                                                                                                                                        }
                                                                                                                                        Gb(i, 0);
                                                                                                                                        local16 = (96n | local16);
                                                                                                                                        i = (i + 1);
                                                                                                                                        count = (count - 1);
                                                                                                                                        if ((count - 1)) {
                                                                                                                                        } else {
                                                                                                                                        }
                                                                                                                                        state = 0x1E;
                                                                                                                                        return;
                                                                                                                                      }
                                                                                                                                      j = (i + 1);
                                                                                                                                      flag = local12;
                                                                                                                                      i = (flag ? 0 : j);
                                                                                                                                      j = ((flag ? j : 0) + count);
                                                                                                                                      state = 5;
                                                                                                                                      return;
                                                                                                                                    }
                                                                                                                                    flag = (i + j);
                                                                                                                                    if ((i + j)) {
                                                                                                                                    } else {
                                                                                                                                    }
                                                                                                                                    state = 0x42;
                                                                                                                                    return;
                                                                                                                                  }
                                                                                                                                  k = ((local4 - i) + (count ^ 0xFFFFFFFF));
                                                                                                                                  if (((local4 - i) + (count ^ 0xFFFFFFFF))) {
                                                                                                                                  } else {
                                                                                                                                  }
                                                                                                                                  state = 0x27;
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                count = k;
                                                                                                                                local13 = (k + i);
                                                                                                                                if ((k + i)) {
                                                                                                                                } else {
                                                                                                                                }
                                                                                                                                state = 0x17;
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              k = (j & 3);
                                                                                                                              temp = 0;
                                                                                                                              if (4) {
                                                                                                                              } else {
                                                                                                                              }
                                                                                                                              state = 0x41;
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            if (k) {
                                                                                                                            } else {
                                                                                                                            }
                                                                                                                            state = 0x2C;
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          if (temp) {
                                                                                                                          } else {
                                                                                                                          }
                                                                                                                          state = 0x32;
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        k = 0;
                                                                                                                        local12 = local4;
                                                                                                                        local13 = local4;
                                                                                                                        flag = 0;
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                switch (local4) {
                                                                                                                                  case 0: continue loop0;
                                                                                                                                  case 1: return;
                                                                                                                                  default: return;
                                                                                                                                }
                                                                                                                              }
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            return;
                                                                                                                          }
                                                                                                                        }
                                                                                                                        state = 0x35;
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      if (flag) {
                                                                                                                      } else {
                                                                                                                      }
                                                                                                                      state = 0x2E;
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    temp = (i + j);
                                                                                                                    if ((i + j)) {
                                                                                                                    } else {
                                                                                                                    }
                                                                                                                    state = 0x1C;
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  count = (local4 & 3);
                                                                                                                  if (3) {
                                                                                                                  } else {
                                                                                                                  }
                                                                                                                  state = 0x40;
                                                                                                                  return;
                                                                                                                }
                                                                                                                Gb((local3 + k), 0);
                                                                                                                k = 19;
                                                                                                                Gb((local3 + temp), 0);
                                                                                                                temp = 19;
                                                                                                                if (19) {
                                                                                                                } else {
                                                                                                                }
                                                                                                                state = 0x3E;
                                                                                                                return;
                                                                                                              }
                                                                                                              state = 0x3A;
                                                                                                              return;
                                                                                                            }
                                                                                                            if (i) {
                                                                                                            } else {
                                                                                                            }
                                                                                                            state = 0x27;
                                                                                                            return;
                                                                                                          }
                                                                                                          if (flag) {
                                                                                                          } else {
                                                                                                          }
                                                                                                          state = 7;
                                                                                                          return;
                                                                                                        }
                                                                                                        j = 0;
                                                                                                        local16 = 0n;
                                                                                                        state = 0x38;
                                                                                                        return;
                                                                                                      }
                                                                                                      j = (i ? local12 : local13);
                                                                                                      i = (local14 + (i ? local12 : local13));
                                                                                                      if (j) {
                                                                                                      } else {
                                                                                                      }
                                                                                                      state = 0x27;
                                                                                                      return;
                                                                                                    }
                                                                                                    state = 9;
                                                                                                    return;
                                                                                                  }
                                                                                                  state = 0x38;
                                                                                                  return;
                                                                                                }
                                                                                                flag = 1;
                                                                                                i = 0;
                                                                                                k = 1;
                                                                                                local13 = 0;
                                                                                                state = 0x2E;
                                                                                                return;
                                                                                              }
                                                                                              local16 = 0n;
                                                                                              j = 0;
                                                                                              temp = 0;
                                                                                              state = 0x2C;
                                                                                              return;
                                                                                            }
                                                                                            k = (local13 + 1);
                                                                                            flag = ((local13 + 1) - local12);
                                                                                            i = 0;
                                                                                            state = 0x12;
                                                                                            return;
                                                                                          }
                                                                                          i = (local3 + j);
                                                                                          state = 3;
                                                                                          return;
                                                                                        }
                                                                                        local12 = 1;
                                                                                        j = (count + 1);
                                                                                        i = 0;
                                                                                        k = count;
                                                                                        state = 5;
                                                                                        return;
                                                                                      }
                                                                                      count = j;
                                                                                      j = (i + flag);
                                                                                      if ((i + flag)) {
                                                                                      } else {
                                                                                      }
                                                                                      state = 0x27;
                                                                                      return;
                                                                                    }
                                                                                    local12 = (local13 - (local13 ? local12 : local12));
                                                                                    if (j) {
                                                                                    } else {
                                                                                    }
                                                                                    state = 0x18;
                                                                                    return;
                                                                                  }
                                                                                  state = 0x20;
                                                                                  return;
                                                                                }
                                                                                k = (local15 + 1);
                                                                                flag = ((local15 + 1) - local13);
                                                                                i = 0;
                                                                                state = 0xC;
                                                                                return;
                                                                              }
                                                                              j = ((local14 ? local14 : k) + 1);
                                                                              temp = 0xFFFFFFFF;
                                                                              local12 = local14;
                                                                              i = 0xFFFFFFFF;
                                                                              state = 0x21;
                                                                              return;
                                                                            }
                                                                            Qb(local0, local12, Pb(0x14), local0, local14, Pb(0x10), local0, local16, 8);
                                                                            return Pb(0);
                                                                          }
                                                                          j = ((i + count) + 1);
                                                                          local13 = (((i + count) + 1) - flag);
                                                                          i = 0;
                                                                          state = 0xD;
                                                                          return;
                                                                        }
                                                                        k = (count + 1);
                                                                        i = 0;
                                                                        flag = 1;
                                                                        local13 = count;
                                                                        state = 0xC;
                                                                        return;
                                                                      }
                                                                      if (func248(1, local3, (local3 + j), local14)) {
                                                                      } else {
                                                                      }
                                                                      state = 0x26;
                                                                      return;
                                                                    }
                                                                    k = (i + 1);
                                                                    temp = flag;
                                                                    i = (temp ? 0 : k);
                                                                    k = ((temp ? k : 0) + count);
                                                                    state = 0xC;
                                                                    return;
                                                                  }
                                                                  flag = 1;
                                                                  i = 0;
                                                                  k = 1;
                                                                  local12 = 0;
                                                                  state = 7;
                                                                  return;
                                                                }
                                                                throw new Error('Unreachable code reached');
                                                              }
                                                              local13 = 1;
                                                              j = (count + 1);
                                                              i = 0;
                                                              flag = count;
                                                              state = 0xD;
                                                              return;
                                                            }
                                                            temp = ((local4 + (i ^ 0xFFFFFFFF)) - local13);
                                                            if (((local4 + (i ^ 0xFFFFFFFF)) - local13)) {
                                                            } else {
                                                            }
                                                            state = 0x27;
                                                            return;
                                                          }
                                                          j = ((i + count) + 1);
                                                          local12 = (((i + count) + 1) - k);
                                                          i = 0;
                                                          state = 5;
                                                          return;
                                                        }
                                                        Gb(i, 0);
                                                        local16 = (30n | local16);
                                                        i = (i + 1);
                                                        k = (k - 1);
                                                        if ((k - 1)) {
                                                        } else {
                                                        }
                                                        state = 0x36;
                                                        return;
                                                      }
                                                      i = local4;
                                                      state = 0x21;
                                                      return;
                                                    }
                                                    k = (i + 1);
                                                    temp = flag;
                                                    i = (temp ? 0 : k);
                                                    k = ((temp ? k : 0) + count);
                                                    state = 0x12;
                                                    return;
                                                  }
                                                  count = k;
                                                  local15 = (k + i);
                                                  if ((k + i)) {
                                                  } else {
                                                  }
                                                  state = 0x1D;
                                                  return;
                                                }
                                                k = ((local4 - i) + (count ^ 0xFFFFFFFF));
                                                if (((local4 - i) + (count ^ 0xFFFFFFFF))) {
                                                } else {
                                                }
                                                state = 0x27;
                                                return;
                                              }
                                              Gb((local3 + k), 0);
                                              k = 2;
                                              Gb((local3 + temp), 0);
                                              temp = 2;
                                              if (2) {
                                              } else {
                                              }
                                              state = 0x39;
                                              return;
                                            }
                                            i = (local3 + j);
                                            Gb(((local3 + j) + 3), 0);
                                            Gb((i + 2), 0);
                                            Gb((i + 1), 0);
                                            Gb(i, 0);
                                            local16 = (local4 | (6 | (local4 | (400n | local16))));
                                            j = (j + 4);
                                            if ((j + 4)) {
                                            } else {
                                            }
                                            state = 0x31;
                                            return;
                                          }
                                          j = (i + 1);
                                          temp = local13;
                                          i = (temp ? 0 : j);
                                          j = ((temp ? j : 0) + count);
                                          state = 0xD;
                                          return;
                                        }
                                        if (flag) {
                                        } else {
                                        }
                                        state = 4;
                                        return;
                                      }
                                      Qb(local0, 0x101, Bb(0xC), local0, local2, Pb(8), local0, 0n, 0);
                                      return sb(local0, 0, 0xE);
                                    }
                                    flag = 1;
                                    k = 0;
                                    j = 1;
                                    i = 0;
                                    local12 = 1;
                                    state = 0x42;
                                    return;
                                  }
                                  state = 0x2C;
                                  return;
                                }
                                Gb((local3 + flag), 0);
                                flag = (Pb(0x30) & 0xFF);
                                Gb((local3 + j), 0);
                                j = (Pb(0x30) & 0xFF);
                                if ((Pb(0x30) & 0xFF)) {
                                } else {
                                }
                                state = 0x33;
                                return;
                              }
                              k = (local4 - local14);
                              if (count) {
                              } else {
                              }
                              state = 0x20;
                              return;
                            }
                            if (temp) {
                            } else {
                            }
                            state = 0x2D;
                            return;
                          }
                          i = flag;
                          local14 = (flag ? flag : k);
                          if ((flag ? flag : k)) {
                          } else {
                          }
                          state = 0x27;
                          return;
                        }
                        temp = 1;
                        flag = 0;
                        j = 1;
                        i = 0;
                        local13 = 1;
                        state = 0x1C;
                        return;
                      }
                      i = (local3 + count);
                      state = 0x2B;
                      return;
                    }
                    i = (local3 + count);
                    Gb(((local3 + count) + 3), 0);
                    Gb((i + 2), 0);
                    Gb((i + 1), 0);
                    Gb(i, 0);
                    local16 = (1 | (local4 | (k | (320n | local16))));
                    count = (count + 4);
                    if ((count + 4)) {
                    } else {
                    }
                    state = 0x3D;
                    return;
                  }
                  if (temp) {
                  } else {
                  }
                  state = 0x25;
                  return;
                }
                local16 = 0n;
                count = 0;
                state = 9;
                return;
              }
              k = (local4 & 0xFFFFFFFC);
              j = 0;
              local16 = 0n;
              state = 0x31;
              return;
            }
            flag = (j & 0xFFFFFFFC);
            count = 0;
            local16 = 0n;
            state = 0x3D;
            return;
          }
          count = j;
          j = (i + k);
          if ((i + k)) {
          } else {
          }
          state = 0x27;
          return;
        }
        Gb((local3 + temp), 0);
        temp = 55;
        Gb((local3 + j), 0);
        j = local4;
        if (temp) {
        } else {
        }
        state = 0xA;
        return;
      }
      state = 0x17;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func255` implements a state machine that ultimately constructs and returns a value based on complex bitwise operations and conditional function calls to external functions like `Gb`, `Pb`, `Qb`, `Bb`, and `sb`.
  
   */

  // func256 is Eb
  function Eb(local0) {

    global0 = (local0 + global0);
    return global0;

  }


  function func257() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: state=local2 */
  function func258(local0, local1) {
    let Error, Unreachable, code, local2, local3, local4, loop0, reached;
    local2 = 4;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  switch (local2) {
                    case 0: continue loop0;
                    case 1: return;
                    case 2: return;
                    case 3: return;
                    case 4: return;
                    case 5: return;
                    default: return;
                  }
                }
                func458(local3);
                local1 = local1;
                return Pb(0);
              }
              throw new Error('Unreachable code reached');
            }
            Gb(0, 0x10FC88);
            local4 = func213(local0, local3, 1);
            local2 = func213(local0, local3, 1);
            return;
          }
          local4 = 1;
          local2 = 0;
          return;
        }
        local3 = ub(1, local1, 8);
        local2 = (0 ? 5 : ub(1, local1, 8));
        return;
      }
      local1 = ub(Pb(4), local1, 4);
      local2 = (local3 ? 2 : 3);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a state machine using a switch statement, primarily focusing on conditionally retrieving and potentially modifying values from memory using the `ub` function before returning a value or terminating.
  
   */

  /* renamed vars: local4=state, local5=subState, local6=bufferIdx, local7=bufferPtr1, local8=tempVar1, local9=tempVar2, local10=tempVar3, local11=tempVar4, local12=tempVar5, local13=flag, local14=arg3Copy, local15=size */
  function func259(local0, local1, local2, local3) {
    let Error, Sb, Unreachable, arg3Copy, bufferIdx, bufferPtr1, code, flag, local16, local17, local18, local19, loop0, loop1, reached, size, state, subState, tempVar1, tempVar2, tempVar3, tempVar4, tempVar5;
    state = 9;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              switch (state) {
                                                                case 0: continue loop0;
                                                                case 1: return;
                                                                case 2: return;
                                                                case 3: return;
                                                                case 4: return;
                                                                case 5: return;
                                                                case 6: return;
                                                                case 7: return;
                                                                case 8: return;
                                                                case 9: return;
                                                                case 10: return;
                                                                case 11: return;
                                                                case 12: return;
                                                                case 13: return;
                                                                case 14: return;
                                                                case 15: return;
                                                                case 16: return;
                                                                case 17: return;
                                                                case 18: return;
                                                                case 19: return;
                                                                case 20: return;
                                                                case 21: return;
                                                                case 22: return;
                                                                case 23: return;
                                                                case 24: return;
                                                                case 25: return;
                                                                case 26: return;
                                                                case 27: return;
                                                                default: return;
                                                              }
                                                            }
                                                            tempVar5 = (tempVar5 + local16);
                                                            local16 = (local16 + 8);
                                                            tempVar5 = (tempVar2 & tempVar5);
                                                            local19 = (wb(0) & 0x8080808080808080n);
                                                            state = (0n ? (flag + (tempVar2 & tempVar5)) : (wb(0) & 0x8080808080808080n));
                                                            return;
                                                          }
                                                          tempVar1 = (local17 >>> 0x19);
                                                          state = 0xA;
                                                          return;
                                                        }
                                                        state = 0x18;
                                                        return;
                                                      }
                                                      state = local18;
                                                      bufferPtr1 = tempVar2;
                                                      arg3Copy = local3;
                                                      tempVar4 = 0;
                                                      subState = 9;
                                                      loop1: while (true) {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  switch (subState) {
                                                                                    case 0: continue loop1;
                                                                                    case 1: continue loop0;
                                                                                    case 2: return;
                                                                                    case 3: return;
                                                                                    case 4: return;
                                                                                    case 5: return;
                                                                                    case 6: return;
                                                                                    case 7: return;
                                                                                    case 8: return;
                                                                                    case 9: return;
                                                                                    case 10: return;
                                                                                    case 11: return;
                                                                                    case 12: return;
                                                                                    default: return;
                                                                                  }
                                                                                }
                                                                                subState = ub(sb(((ub(sb((bufferIdx + flag), (local17 >>> 0x19), 0), local0, 0) + (tempVar2 & (bufferIdx - 8))) + 8), tempVar1, 0), state, 0x10);
                                                                                subState = (5 ? 5 : tempVar4);
                                                                                return;
                                                                              }
                                                                              subState = (arg3Copy & 0x1C);
                                                                              bufferPtr1 = ((arg3Copy & 0x1C) + bufferPtr1);
                                                                              state = (state + subState);
                                                                              subState = (1 ? 4 : tempVar4);
                                                                              return;
                                                                            }
                                                                            subState = ub(8, state, 8);
                                                                            subState = (3 ? 5 : tempVar4);
                                                                            return;
                                                                          }
                                                                          tempVar4 = Sb(subState, Pb(8), 0xB, state, 0);
                                                                          subState = ((arg3Copy & 1) ? 0xC : 3);
                                                                          return;
                                                                        }
                                                                        tempVar4 = (arg3Copy & 3);
                                                                        subState = ((arg3Copy & 3) ? 1 : 3);
                                                                        return;
                                                                      }
                                                                      tempVar4 = ub(Bb(0), state, 0x14);
                                                                      subState = 5;
                                                                      return;
                                                                    }
                                                                    subState = ub(Pb(0x14), state, 4);
                                                                    subState = (2 ? 5 : tempVar4);
                                                                    return;
                                                                  }
                                                                  arg3Copy = 0;
                                                                  subState = 0xA;
                                                                  return;
                                                                }
                                                                tempVar4 = ub(2, state, 0);
                                                                tempVar4 = (arg3Copy >>> 2);
                                                                subState = (1 ? 5 : (arg3Copy >>> 2));
                                                                return;
                                                              }
                                                              state = (state + arg3Copy);
                                                              Gb((state + arg3Copy), 0);
                                                              tempVar4 = 7;
                                                              bufferPtr1 = (bufferPtr1 + arg3Copy);
                                                              Gb((bufferPtr1 + arg3Copy), 0);
                                                              subState = 3;
                                                              return;
                                                            }
                                                            subState = ub(sb(bufferPtr1, tempVar4, 0), state, 0xC);
                                                            subState = (4 ? 0 : tempVar4);
                                                            return;
                                                          }
                                                          arg3Copy = 2;
                                                          subState = 0xA;
                                                          continue loop0;
                                                        }
                                                      }
                                                      state = 0xC;
                                                      return;
                                                    }
                                                    tempVar1 = ub(5, local0, 4);
                                                    func458(local3);
                                                    state = 0xA;
                                                    return;
                                                  }
                                                  bufferIdx = ub(tempVar2, local0, 4);
                                                  tempVar3 = (((ub(tempVar2, local0, 4) + 1) >>> 3) * 7);
                                                  state = 7;
                                                  return;
                                                }
                                                state = (8 ? 1 : (((tempVar5 - tempVar1) ^ (bufferIdx - tempVar1)) & tempVar2));
                                                return;
                                              }
                                              return Pb(8);
                                            }
                                            tempVar2 = 1;
                                            tempVar3 = 0;
                                            state = 0x14;
                                            return;
                                          }
                                          bufferIdx = 0;
                                          tempVar1 = ub((bufferIdx - ub((8 ? tempVar3 : bufferIdx), local0, 0xC)), local0, 0);
                                          size = (ub(0x1B, local0, 4) + 1);
                                          tempVar3 = ((size & 7) + 0);
                                          state = (((size & 7) + 0) ? 0xF : ((ub(0x1B, local0, 4) + 1) >>> 3));
                                          return;
                                        }
                                        bufferIdx = size;
                                        tempVar2 = (tempVar3 + size);
                                        state = (bufferIdx ? 0x14 : 5);
                                        return;
                                      }
                                      state = (size ? 8 : 0x19);
                                      return;
                                    }
                                    local19 = table0[local2](local1, local0, bufferIdx);
                                    tempVar2 = ub(tempVar1, local0, 4);
                                    local17 = local19;
                                    tempVar1 = (ub(tempVar1, local0, 4) & local19);
                                    tempVar5 = (ub(tempVar1, local0, 4) & local19);
                                    flag = ub(0x16, local0, 0);
                                    local19 = (wb(0) & 0x8080808080808080n);
                                    state = ((wb(0) & 0x8080808080808080n) ? 0x12 : (ub(0x16, local0, 0) + tempVar1));
                                    return;
                                  }
                                  local18 = (tempVar2 + (local3 * (bufferIdx ^ 0xFFFFFFFF)));
                                  state = 0xC;
                                  return;
                                }
                                state = 0x16;
                                return;
                              }
                              flag = (tempVar3 & 1);
                              state = (1 ? 0x18 : tempVar3);
                              return;
                            }
                            Qb(0x11, local0, tempVar3, (tempVar1 + 8), 0x15, (tempVar1 + size), tempVar1, wb(0), 0);
                            state = 8;
                            return;
                          }
                          tempVar1 = (tempVar5 + flag);
                          Gb((tempVar5 + flag), 0);
                          local16 = sb(((ub(sb((ub(Pb(0xC), local0, 0) + bufferIdx), 0xFF, 0), local0, 0) + (tempVar1 & (bufferIdx - 8))) + 8), 0xFF, 0);
                          local17 = (local17 >>> 0x19);
                          tempVar2 = (flag + (local3 * (tempVar5 ^ 0xFFFFFFFF)));
                          state = (0xFF ? 3 : local16);
                          return;
                        }
                        local16 = 8;
                        tempVar5 = tempVar1;
                        state = 0;
                        return;
                      }
                      bufferIdx = (bufferIdx + tempVar1);
                      local19 = wb(0);
                      Qb(Pb(0xC), bufferPtr1, subState, sb(((ub(sb(tempVar1, (local17 >>> 0x19), 0), local0, 0) + ((tempVar5 - 8) & tempVar2)) + 8), local17, 0), 4, (bufferIdx + tempVar1), bufferIdx, ((((local19 ^ 0xFFFFFFFFFFFFFFFFn) >> 7n) & 0x101010101010101n) + (local19 | 0x7F7F7F7F7F7F7F7Fn)), 0);
                      state = 0x1B;
                      return;
                    }
                    bufferIdx = tempVar3;
                    tempVar3 = tempVar2;
                    tempVar2 = ub(0xA, local0, 0);
                    Gb((ub(0xA, local0, 0) + bufferIdx), 0);
                    state = (0x80 ? ub(state, bufferPtr1, 0xC) : 0xD);
                    return;
                  }
                  tempVar2 = (tempVar3 & 0x3FFFFFFE);
                  bufferIdx = 0;
                  state = 0x17;
                  return;
                }
                tempVar5 = (((local19 >>> 3) + tempVar5) & tempVar2);
                state = (0 ? (flag + (((local19 >>> 3) + tempVar5) & tempVar2)) : vb(0));
                return;
              }
              tempVar3 = (bufferIdx + tempVar1);
              local19 = wb(0);
              Qb(bufferPtr1, tempVar4, sb(Pb(0), state, 0), 0x1A, 6, (bufferIdx + tempVar1), tempVar3, ((((local19 ^ 0xFFFFFFFFFFFFFFFFn) >> 7n) & 0x101010101010101n) + (local19 | 0x7F7F7F7F7F7F7F7Fn)), 0);
              tempVar3 = (tempVar3 + 8);
              local19 = wb(0);
              Qb(bufferPtr1, subState, Pb(4), ub(state, bufferPtr1, 0), Pb(0), (tempVar3 + 8), tempVar3, ((((local19 ^ 0xFFFFFFFFFFFFFFFFn) >> 7n) & 0x101010101010101n) + (local19 | 0x7F7F7F7F7F7F7F7Fn)), 0);
              bufferIdx = (bufferIdx + 0x10);
              tempVar2 = (tempVar2 - 2);
              state = ((tempVar2 - 2) ? 0x17 : 2);
              return;
            }
            state = (flag ? 0x13 : 0x1B);
            return;
          }
          bufferIdx = 0xFFFFFFFF;
          tempVar3 = 0;
          state = 7;
          return;
        }
        tempVar5 = ((wb(0) & 0x8080808080808080n) >>> 3);
        state = 6;
        return;
      }
      state = (8 ? 0xB : size);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that manipulates memory buffers using various bitwise operations, conditional logic, and external function calls (likely related to memory management or data processing). 
  
   */

  function func260() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func261() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func262() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local3=memoryBuffer, local10=conditionResult, local4=state, local5=temp, local6=counter, local7=offset, local8=size, local9=dataAddress */
  function func263(local0, local1, local2) {
    let Error, Unreachable, code, conditionResult, counter, dataAddress, local11, local12, local13, loop0, offset, reached, size, state, temp;
    state = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                switch (state) {
                                  case 0: continue loop0;
                                  case 1: return;
                                  case 2: return;
                                  case 3: return;
                                  case 4: return;
                                  case 5: return;
                                  case 6: return;
                                  case 7: return;
                                  case 8: return;
                                  case 9: return;
                                  case 10: return;
                                  case 11: return;
                                  case 12: return;
                                  default: return;
                                }
                              }
                              offset = (offset + 8);
                              func458(temp);
                              local1 = (local1 + temp);
                              counter = (counter + 1);
                              local12 = (local12 - 8);
                              state = ((local12 - 8) ? 1 : 0xA);
                              return;
                            }
                            dataAddress = (offset + 4);
                            temp = ub(local2, (offset + 4), 0);
                            state = ((local1 + 0) ? 4 : (ub(local2, (offset + 4), 0) + local1));
                            return;
                          }
                          calculateMemoryOffset(1, 1);
                          conditionResult = ub(1, memoryBuffer, 4);
                          size = ub(local1, memoryBuffer, 8);
                          local1 = ub((memoryBuffer + 4), memoryBuffer, 0xC);
                          state = 6;
                          return;
                        }
                        dataAddress = ub(8, offset, 0);
                        state = (temp ? 0 : (conditionResult - local1));
                        return;
                      }
                      Qb((local1 + size), memoryBuffer, (local1 + temp), Pb(0xC), 0xB, local0, memoryBuffer, wb(4), 0);
                      global0 = (memoryBuffer + 0x10);
                      return Pb(0);
                    }
                    offset = ub(ub((local0 + 8), (memoryBuffer + 0xC), 0), local1, 4);
                    local12 = (local11 << 3);
                    local13 = (((local11 - 1) & 0x1FFFFFFF) + 1);
                    size = 1;
                    local1 = 0;
                    counter = 0;
                    state = 1;
                    return;
                  }
                  func458(1);
                  local1 = (local1 + 1);
                  temp = ub(Pb(0xC), dataAddress, 0);
                  state = 3;
                  return;
                }
                memoryBuffer = (global0 - 0x10);
                global0 = (global0 - 0x10);
                counter = 0;
                Qb((local1 + size), memoryBuffer, (local1 + 1), memoryBuffer, 0, Pb(0xC), memoryBuffer, 0x100000000n, 4);
                local11 = ub(4, local1, 8);
                state = (ub(4, local1, 8) ? Pb(0xC) : 5);
                return;
              }
              conditionResult = ub((local11 - counter), memoryBuffer, 4);
              state = (local1 ? 0xC : 9);
              return;
            }
            local1 = 0;
            state = 3;
            return;
          }
          counter = local13;
          state = 4;
          return;
        }
        calculateMemoryOffset(1, 1);
        size = ub(temp, memoryBuffer, 8);
        local1 = ub(local1, memoryBuffer, 0xC);
        state = 0;
        return;
      }
      state = (conditionResult ? 6 : local1);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function deobfuscates and executes a state machine that reads, writes, and manipulates data within a memory buffer, likely implementing a custom data structure or algorithm.
  
   */

  // func264 is Pb
  function Pb() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func265() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: remainingBytes=local3 */
  function func266(local0, local1, local2) {
    let Error, Unreachable, code, local3, local4, local5, local6, loop0, reached;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    switch (local4) {
                      case 0: continue loop0;
                      case 1: return;
                      case 2: return;
                      case 3: return;
                      case 4: return;
                      case 5: return;
                      case 6: return;
                      default: return;
                    }
                  }
                  local3 = (global0 - 0x20);
                  global0 = (global0 - 0x20);
                  local2 = (local1 + local2);
                  if ((local1 + local2)) {
                  } else {
                  }
                  local4 = 4;
                  return;
                }
                if (local5) {
                } else {
                }
                local4 = 3;
                return;
              }
              local6 = 1;
              local4 = 3;
              return;
            }
            if (1) {
            } else {
            }
            local4 = 5;
            return;
          }
          throw new Error('Unreachable code reached');
        }
        local2 = ub(4, local3, 0xC);
        global0 = (local3 + 0x20);
        return Pb(4);
      }
      local6 = 0;
      local5 = ub(local2, local0, 0);
      local1 = (ub(local2, local0, 0) << 1);
      local1 = (local2 ? (ub(local2, local0, 0) << 1) : local1);
      local1 = (8 ? (local2 ? (ub(local2, local0, 0) << 1) : local1) : local1);
      if (0) {
      } else {
      }
      local4 = 4;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function conditionally computes and returns a value based on memory reads via `ub` calls, potentially shifting and adjusting a global memory pointer.
  
   */

  function func267() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local2=state, local3=memAddr, local4=arg1, local5=arg2, local6=arg3 */
  function func268(local0, local1) {
    let Error, Unreachable, arg1, arg2, arg3, code, local7, local8, loop0, memAddr, reached, state;
    state = 0x1C;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                switch (state) {
                                                                                                                  case 0: continue loop0;
                                                                                                                  case 1: return;
                                                                                                                  case 2: return;
                                                                                                                  case 3: return;
                                                                                                                  case 4: return;
                                                                                                                  case 5: return;
                                                                                                                  case 6: return;
                                                                                                                  case 7: return;
                                                                                                                  case 8: return;
                                                                                                                  case 9: return;
                                                                                                                  case 10: return;
                                                                                                                  case 11: return;
                                                                                                                  case 12: return;
                                                                                                                  case 13: return;
                                                                                                                  case 14: return;
                                                                                                                  case 15: return;
                                                                                                                  case 16: return;
                                                                                                                  case 17: return;
                                                                                                                  case 18: return;
                                                                                                                  case 19: return;
                                                                                                                  case 20: return;
                                                                                                                  case 21: return;
                                                                                                                  case 22: return;
                                                                                                                  case 23: return;
                                                                                                                  case 24: return;
                                                                                                                  case 25: return;
                                                                                                                  case 26: return;
                                                                                                                  case 27: return;
                                                                                                                  case 28: return;
                                                                                                                  case 29: return;
                                                                                                                  case 30: return;
                                                                                                                  case 31: return;
                                                                                                                  case 32: return;
                                                                                                                  case 33: return;
                                                                                                                  case 34: return;
                                                                                                                  case 35: return;
                                                                                                                  case 36: return;
                                                                                                                  case 37: return;
                                                                                                                  case 38: return;
                                                                                                                  case 39: return;
                                                                                                                  case 40: return;
                                                                                                                  case 41: return;
                                                                                                                  case 42: return;
                                                                                                                  case 43: return;
                                                                                                                  case 44: return;
                                                                                                                  case 45: return;
                                                                                                                  case 46: return;
                                                                                                                  case 47: return;
                                                                                                                  case 48: return;
                                                                                                                  case 49: return;
                                                                                                                  case 50: return;
                                                                                                                  case 51: return;
                                                                                                                  case 52: return;
                                                                                                                  default: return;
                                                                                                                }
                                                                                                              }
                                                                                                              state = (0x10 ? 4 : arg1);
                                                                                                              return;
                                                                                                            }
                                                                                                            arg3 = 0;
                                                                                                            state = 0x14;
                                                                                                            return;
                                                                                                          }
                                                                                                          arg2 = (ub(0x29, memAddr, 0x24) + 0x10);
                                                                                                          state = ((ub(0x29, memAddr, 0x24) + 0x10) ? 0x1E : 0x23);
                                                                                                          return;
                                                                                                        }
                                                                                                        state = (arg2 ? 0x19 : arg1);
                                                                                                        return;
                                                                                                      }
                                                                                                      state = (0xE ? 0x16 : arg1);
                                                                                                      return;
                                                                                                    }
                                                                                                    state = (func248(0x32, 0x102674, local1, 0xD) ? 0x1B : 0x15);
                                                                                                    return;
                                                                                                  }
                                                                                                  state = (arg1 ? 0x1A : 0x10);
                                                                                                  return;
                                                                                                }
                                                                                                global0 = (memAddr + 0x70);
                                                                                                return 0x17;
                                                                                              }
                                                                                              state = 0x32;
                                                                                              return;
                                                                                            }
                                                                                            state = (local7 ? 0xA : arg1);
                                                                                            return;
                                                                                          }
                                                                                          state = (0xFFFFFFBF ? (local1 + local7) : vb(0));
                                                                                          return;
                                                                                        }
                                                                                        state = (0xFFFFFFBF ? arg3 : vb(0));
                                                                                        return;
                                                                                      }
                                                                                      arg2 = 0x40;
                                                                                      state = 0x15;
                                                                                      return;
                                                                                    }
                                                                                    arg1 = ub(0x12, local1, 4);
                                                                                    state = (1 ? 0x20 : ub(0x21, memAddr, 0x30));
                                                                                    return;
                                                                                  }
                                                                                  state = (0xFFFFFFC0 ? (local1 + arg2) : vb(0));
                                                                                  return;
                                                                                }
                                                                                state = (arg2 ? 0xB : arg1);
                                                                                return;
                                                                              }
                                                                              state = (local1 ? 0x2F : 0x26);
                                                                              return;
                                                                            }
                                                                            state = 0x28;
                                                                            return;
                                                                          }
                                                                          state = (local7 ? 9 : 0x18);
                                                                          return;
                                                                        }
                                                                        arg1 = ub(3, local1, 0x20);
                                                                        arg2 = ub(0x28, local1, 0x1C);
                                                                        state = 0x2B;
                                                                        return;
                                                                      }
                                                                      arg1 = (arg3 ? local7 : arg2);
                                                                      local1 = (arg3 ? arg3 : local1);
                                                                      state = 0x10;
                                                                      return;
                                                                    }
                                                                    Qb(memAddr, arg2, Pb(0x38), memAddr, 0, Pb(0x1C), memAddr, 0x100000000n, 0x14);
                                                                    func454((memAddr + 0x30));
                                                                    state = 0x22;
                                                                    return;
                                                                  }
                                                                  arg2 = 0x40;
                                                                  state = (0xD ? 0x15 : arg1);
                                                                  return;
                                                                }
                                                                state = 0x12;
                                                                return;
                                                              }
                                                              Qb(memAddr, 2, Pb(0x34), memAddr, 0x1026C0, Pb(0x30), memAddr, 1n, 0x3C);
                                                              Qb(memAddr, local8, Pb(0x10), memAddr, arg3, Pb(0xC), memAddr, ((memAddr + 0xC) | 0x100000000n), 0x20);
                                                              func430((memAddr + 0x30));
                                                              state = 0x22;
                                                              return;
                                                            }
                                                            throw new Error('Unreachable code reached');
                                                          }
                                                          local7 = 0xFFFFFFFF;
                                                          arg2 = (arg1 - 1);
                                                          arg3 = ((arg1 - 1) + local1);
                                                          Gb(((arg1 - 1) + local1), 0);
                                                          state = (0xA ? 0x31 : 0x10);
                                                          return;
                                                        }
                                                        state = (memAddr + 0x30);
                                                        func255(0x102674, 0xD);
                                                        state = (ub(0xC, memAddr, 0x20) ? func203(state) : 0x32);
                                                        return;
                                                      }
                                                      memAddr = (global0 - 0x70);
                                                      global0 = (global0 - 0x70);
                                                      Gb(local1, 0x25);
                                                      state = (0xD ? (memAddr + 0x20) : 0x26);
                                                      return;
                                                    }
                                                    state = (arg2 ? 0x29 : arg1);
                                                    return;
                                                  }
                                                  state = (func248(0x1F, 0x102664, local1, 0x10) ? 0x11 : 0x1B);
                                                  return;
                                                }
                                                state = 0x32;
                                                return;
                                              }
                                              arg2 = ub(arg1, local1, 0x1C);
                                              arg3 = ub(local1, memAddr, 0x38);
                                              local1 = (arg1 + arg2);
                                              arg1 = (arg3 - arg2);
                                              state = 6;
                                              return;
                                            }
                                            Gb(local1, 0x25);
                                            state = (0x2E ? Pb(0x1C) : 0x26);
                                            return;
                                          }
                                          Qb(Pb(0x38), (memAddr + 0x14), (memAddr + 0x30), local1, ub(local1, memAddr, 0x38), local0, memAddr, wb(0x14), 0);
                                          state = 7;
                                          return;
                                        }
                                        state = (arg2 ? 0xE : arg1);
                                        return;
                                      }
                                      state = 0x18;
                                      return;
                                    }
                                    local8 = ub(0x19, memAddr, 0x24);
                                    local7 = (ub(0x19, memAddr, 0x24) + arg2);
                                    state = (local8 ? 0x2A : (ub(0x19, memAddr, 0x24) + arg2));
                                    return;
                                  }
                                  state = 7;
                                  return;
                                }
                                arg1 = ub(0x26, local1, 0x20);
                                arg2 = ub(ub(0x26, local1, 0x20), local1, 0x1C);
                                state = (ub(ub(0x26, local1, 0x20), local1, 0x1C) ? Pb(0) : 0x2B);
                                return;
                              }
                              throw new Error('Unreachable code reached');
                            }
                            state = (memAddr + 0x30);
                            arg3 = (local1 + arg2);
                            func255(0x102691, 0x16);
                            state = (ub(0x34, memAddr, 0x20) ? func203(state) : 0x25);
                            return;
                          }
                          state = (arg2 ? 0xF : 0x12);
                          return;
                        }
                        arg1 = (arg1 - arg2);
                        local1 = (ub((memAddr + 0x20), local1, 4) + arg2);
                        state = 6;
                        return;
                      }
                      state = (local7 ? 0x19 : arg1);
                      return;
                    }
                    state = 0x19;
                    return;
                  }
                  Gb(local1, 0x24);
                  state = (1 ? 0x13 : 0x27);
                  return;
                }
                state = (memAddr + 0x30);
                func255(0x102681, 0x10);
                state = (1 ? 2 : ub(0x34, memAddr, 0x20));
                return;
              }
              Gb((arg3 - 1), 0);
              arg3 = (0xD ? local1 : 0);
              local7 = (arg1 - 2);
              state = 0x14;
              return;
            }
            state = (arg2 ? 0x30 : 1);
            return;
          }
          arg2 = 0x80;
          state = 0x15;
          return;
        }
        state = (memAddr + 0x30);
        func255(0x102664, 0x10);
        state = (ub(0x1B, memAddr, 0x20) ? func203(state) : 8);
        return;
      }
      state = (0x11 ? 0 : arg1);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func268` implements a complex state machine manipulating memory and calling external functions (`func255`, `func203`, `ub`, `vb`, `wb`, `Gb`, `Pb`, `Qb`) based on bitwise operations and conditional logic. 
  
   */

  function func269() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func270 is Gb
  function Gb(local0, local1) {
    let local2;

    local0 = (local0 + local1);
    local1 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    local2 = (((local1 << 3) + local0) + 0x408);
    if (viewI32_0[(((local1 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    return ((viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8] ^ viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]) & 0xFF);

  }

  /*
   * AI Summary: The function calculates an index based on two inputs, accesses a typed array (viewI64_0) at an index derived from the first input modulo 60, performs a bitwise XOR and AND operation on the accessed value with itself, and returns the least significant byte.
  
   */

  /* renamed vars: local3=state, local10=dataOffset, local4=dataByte, local5=memAddress, local6=counter, local7=memValue, local8=tempByte, local9=memOffset, local11=memLocation */
  function func271(local0, local1, local2) {
    let Error, Unreachable, code, counter, dataByte, dataOffset, local12, local13, local14, loop0, memAddress, memLocation, memOffset, memValue, reached, state, tempByte;
    state = 0x25;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    switch (state) {
                                                                                                      case 0: continue loop0;
                                                                                                      case 1: return;
                                                                                                      case 2: return;
                                                                                                      case 3: return;
                                                                                                      case 4: return;
                                                                                                      case 5: return;
                                                                                                      case 6: return;
                                                                                                      case 7: return;
                                                                                                      case 8: return;
                                                                                                      case 9: return;
                                                                                                      case 10: return;
                                                                                                      case 11: return;
                                                                                                      case 12: return;
                                                                                                      case 13: return;
                                                                                                      case 14: return;
                                                                                                      case 15: return;
                                                                                                      case 16: return;
                                                                                                      case 17: return;
                                                                                                      case 18: return;
                                                                                                      case 19: return;
                                                                                                      case 20: return;
                                                                                                      case 21: return;
                                                                                                      case 22: return;
                                                                                                      case 23: return;
                                                                                                      case 24: return;
                                                                                                      case 25: return;
                                                                                                      case 26: return;
                                                                                                      case 27: return;
                                                                                                      case 28: return;
                                                                                                      case 29: return;
                                                                                                      case 30: return;
                                                                                                      case 31: return;
                                                                                                      case 32: return;
                                                                                                      case 33: return;
                                                                                                      case 34: return;
                                                                                                      case 35: return;
                                                                                                      case 36: return;
                                                                                                      case 37: return;
                                                                                                      case 38: return;
                                                                                                      case 39: return;
                                                                                                      case 40: return;
                                                                                                      case 41: return;
                                                                                                      case 42: return;
                                                                                                      case 43: return;
                                                                                                      case 44: return;
                                                                                                      case 45: return;
                                                                                                      case 46: return;
                                                                                                      default: return;
                                                                                                    }
                                                                                                  }
                                                                                                  throw new Error('Unreachable code reached');
                                                                                                }
                                                                                                counter = memLocation;
                                                                                                state = 0x16;
                                                                                                return;
                                                                                              }
                                                                                              Gb(((tempByte & 0xF) + 0x107C30), 0);
                                                                                              memValue = Pb(8);
                                                                                              Gb(((tempByte >>> 4) + 0x107C30), 0);
                                                                                              tempByte = dataByte;
                                                                                              state = (5 ? 0xF : (ub(0xD, local0, 0) - dataByte));
                                                                                              return;
                                                                                            }
                                                                                            calculateMemoryOffset(1, 1);
                                                                                            dataByte = ub(1, local0, 8);
                                                                                            state = 0x13;
                                                                                            return;
                                                                                          }
                                                                                          calculateMemoryOffset(1, 1);
                                                                                          dataByte = ub(2, local0, 8);
                                                                                          state = 0x1B;
                                                                                          return;
                                                                                        }
                                                                                        state = (memOffset ? 7 : local2);
                                                                                        return;
                                                                                      }
                                                                                      state = (counter ? 9 : local2);
                                                                                      return;
                                                                                    }
                                                                                    state = (0xFFFFFFBF ? ((counter + local12) + memAddress) : vb(0));
                                                                                    return;
                                                                                  }
                                                                                  calculateMemoryOffset(1, 1);
                                                                                  dataByte = ub(memOffset, local0, 8);
                                                                                  state = 0x1F;
                                                                                  return;
                                                                                }
                                                                                state = (dataByte ? 3 : ub(0x13, local0, 0));
                                                                                return;
                                                                              }
                                                                              state = 0;
                                                                              return;
                                                                            }
                                                                            throw new Error('Unreachable code reached');
                                                                          }
                                                                          state = (0xFFFFFFC0 ? (local1 + counter) : vb(0));
                                                                          return;
                                                                        }
                                                                        memAddress = (ub(0x2E, local0, 4) + dataByte);
                                                                        dataByte = (dataByte + 6);
                                                                        state = 1;
                                                                        return;
                                                                      }
                                                                      state = (1 ? 4 : (ub(0x1B, local0, 0) - dataByte));
                                                                      return;
                                                                    }
                                                                    calculateMemoryOffset(1, 1);
                                                                    dataByte = ub(6, local0, 8);
                                                                    state = 0xD;
                                                                    return;
                                                                  }
                                                                  memAddress = 0x100812;
                                                                  state = 0xE;
                                                                  return;
                                                                }
                                                                memAddress = (memAddress + 1);
                                                                Gb(memValue, 0);
                                                                tempByte = 0x2B;
                                                                Gb(1080427, 0);
                                                                memValue = 0x15;
                                                                state = (0x15 ? local0 : dataByte);
                                                                return;
                                                              }
                                                              state = 0x1E;
                                                              return;
                                                            }
                                                            return 0;
                                                          }
                                                          memAddress = 0x100806;
                                                          state = (0x22 ? 0xB : memValue);
                                                          return;
                                                        }
                                                        memLocation = (memAddress + counter);
                                                        memOffset = ((memAddress + counter) - 1);
                                                        state = (counter ? 0x27 : ((memAddress + counter) - 1));
                                                        return;
                                                      }
                                                      memAddress = 0;
                                                      state = 0x2B;
                                                      return;
                                                    }
                                                    calculateMemoryOffset(1, 1);
                                                    dataByte = ub(memAddress, local0, 8);
                                                    state = 0x20;
                                                    return;
                                                  }
                                                  state = (counter ? 0x2A : 5);
                                                  return;
                                                }
                                                state = (counter ? 5 : local2);
                                                return;
                                              }
                                              memAddress = 0x10080A;
                                              state = 0xE;
                                              return;
                                            }
                                            dataByte = (dataByte + 2);
                                            state = 1;
                                            return;
                                          }
                                          state = (counter ? 0x29 : 0x24);
                                          return;
                                        }
                                        memAddress = 0x10080C;
                                        state = 0xE;
                                        return;
                                      }
                                      memOffset = (memAddress - 1);
                                      state = ((ub((memAddress - 1), local0, 0) - dataByte) ? 8 : 0x1F);
                                      return;
                                    }
                                    func458(memOffset);
                                    dataByte = ((dataByte + memAddress) - 1);
                                    state = 0x27;
                                    return;
                                  }
                                  func458(memAddress);
                                  dataByte = (dataByte + memAddress);
                                  state = 9;
                                  return;
                                }
                                state = ((memLocation + local13) ? 0 : 0x12);
                                return;
                              }
                              memAddress = 0x100808;
                              state = 0xE;
                              return;
                            }
                            dataByte = (memAddress + 1);
                            local13 = (local2 ^ 0xFFFFFFFF);
                            local12 = (local1 - 1);
                            local14 = (local1 + local2);
                            counter = 0;
                            dataOffset = local1;
                            state = 0x16;
                            return;
                          }
                          memValue = (local1 + counter);
                          memAddress = (local2 - counter);
                          state = ((ub((local2 - counter), local0, 0) - dataByte) ? 0x17 : 0x20);
                          return;
                        }
                        state = ub(sb((ub(Pb(8), local0, 4) + memAddress), 0x22, 0), local0, 0);
                        memAddress = ub(state, local0, 8);
                        state = (ub(state, local0, 8) ? 0x26 : 0x23);
                        return;
                      }
                      calculateMemoryOffset(1, 1);
                      memAddress = ub(1, local0, 8);
                      state = 0x23;
                      return;
                    }
                    dataOffset = (memAddress + dataOffset);
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            switch ((memValue - 0x5C)) {
                                                                              case 0: continue loop0;
                                                                              case 1: return;
                                                                              case 2: return;
                                                                              case 3: return;
                                                                              case 4: return;
                                                                              case 5: return;
                                                                              case 6: return;
                                                                              case 7: return;
                                                                              case 8: return;
                                                                              case 9: return;
                                                                              case 10: return;
                                                                              case 11: return;
                                                                              case 12: return;
                                                                              case 13: return;
                                                                              case 14: return;
                                                                              case 15: return;
                                                                              case 16: return;
                                                                              case 17: return;
                                                                              case 18: return;
                                                                              case 19: return;
                                                                              case 20: return;
                                                                              case 21: return;
                                                                              case 22: return;
                                                                              case 23: return;
                                                                              case 24: return;
                                                                              case 25: return;
                                                                              default: return;
                                                                            }
                                                                          }
                                                                          return;
                                                                        }
                                                                        return;
                                                                      }
                                                                      return;
                                                                    }
                                                                    return;
                                                                  }
                                                                  return;
                                                                }
                                                                return;
                                                              }
                                                              return;
                                                            }
                                                            return;
                                                          }
                                                          return;
                                                        }
                                                        return;
                                                      }
                                                      return;
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                                return;
                                              }
                                              return;
                                            }
                                            return;
                                          }
                                          return;
                                        }
                                        return;
                                      }
                                      return;
                                    }
                                    return;
                                  }
                                  return;
                                }
                                return;
                              }
                              return;
                            }
                            return;
                          }
                          return;
                        }
                        return;
                      }
                    }
                    state = 0x14;
                    return;
                  }
                  memAddress = 0x10080E;
                  state = 0xE;
                  return;
                }
                state = (counter ? 0x2E : local2);
                return;
              }
              state = (counter ? 0x2D : local2);
              return;
            }
            memValue = (memAddress + dataOffset);
            state = ((memAddress + dataOffset) ? 6 : local14);
            return;
          }
          memAddress = 0x100810;
          state = 0xE;
          return;
        }
        state = (0xFFFFFFC0 ? (local1 + counter) : vb(0));
        return;
      }
    }
    throw new Error('Unreachable code reached');
    return 0;

  }

  /*
   * AI Summary: The function implements a state machine that reads and writes to memory based on various conditions, using helper functions `ub`, `vb`, and `Gb` to interact with memory and typed arrays, ultimately returning nothing meaningful directly. 
  
   */

  function func272(local0, local1, local2) {
    let Error, Unreachable, code, local3, loop0, reached;

    local3 = 1;
    loop0: while (true) {
      {
        {
          {
            switch (local3) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          throw new Error('Unreachable code reached');
        }
        if (local0) {
        } else {
        }
        local3 = 0;
        return;
      }
    }
    return table0[ub(local2, local1, 0x10)](2, local0);

  }

  /*
   * AI Summary: The function `func272` conditionally executes a function pointer from a table, indexed by a calculated memory address using `ub`, passing two arguments, with short-circuiting return paths based on a control flow variable. 
  
   */

  function func273(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, loop0, reached;

    local5 = 2;
    loop0: while (true) {
      {
        {
          {
            switch (local5) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          throw new Error('Unreachable code reached');
        }
        table0[ub(local4, local1, 0x10)](func217(), local0, local2, local3);
        return 0x32;
      }
      if (local0) {
      } else {
      }
      local5 = 0;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func273` conditionally executes a function from a table indexed by a computed memory address before returning a value, effectively acting as a conditional function dispatcher. 
  
   */

  function func274() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func275() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local2=scratchMem, local3=state, local4=tempVar */
  function func276(local0, local1) {
    let Error, Unreachable, code, local5, local6, loop0, reached, scratchMem, state, tempVar;
    state = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          switch (state) {
                                                                            case 0: continue loop0;
                                                                            case 1: return;
                                                                            case 2: return;
                                                                            case 3: return;
                                                                            case 4: return;
                                                                            case 5: return;
                                                                            case 6: return;
                                                                            case 7: return;
                                                                            case 8: return;
                                                                            case 9: return;
                                                                            case 10: return;
                                                                            case 11: return;
                                                                            case 12: return;
                                                                            case 13: return;
                                                                            case 14: return;
                                                                            case 15: return;
                                                                            case 16: return;
                                                                            case 17: return;
                                                                            case 18: return;
                                                                            case 19: return;
                                                                            case 20: return;
                                                                            case 21: return;
                                                                            case 22: return;
                                                                            case 23: return;
                                                                            case 24: return;
                                                                            case 25: return;
                                                                            case 26: return;
                                                                            case 27: return;
                                                                            case 28: return;
                                                                            case 29: return;
                                                                            case 30: return;
                                                                            case 31: return;
                                                                            case 32: return;
                                                                            case 33: return;
                                                                            default: return;
                                                                          }
                                                                        }
                                                                        local5 = (tempVar - 0x99);
                                                                        state = (0x1F ? 5 : (tempVar - 0x99));
                                                                        return;
                                                                      }
                                                                      local1 = 6;
                                                                      tempVar = local5;
                                                                      state = 0x1A;
                                                                      return;
                                                                    }
                                                                    scratchMem = (global0 - 0x60);
                                                                    global0 = (global0 - 0x60);
                                                                    local5 = ((local1 >>> 0) / (0x3C >>> 0));
                                                                    local6 = ((local1 >>> 0) / (0xE10 >>> 0));
                                                                    tempVar = ((local1 >>> 0) / (0x15180 >>> 0));
                                                                    local1 = 0x7B2;
                                                                    state = 0x11;
                                                                    return;
                                                                  }
                                                                  local5 = (local1 % 0x190);
                                                                  local6 = ((local1 % 0x190) ? 0x1C : 0x1D);
                                                                  local5 = (local5 ? 0x16D : 0x16E);
                                                                  state = 0x19;
                                                                  return;
                                                                }
                                                                local5 = (tempVar - 0x1F);
                                                                state = (0x1E ? 0xB : (tempVar - 0x1F));
                                                                return;
                                                              }
                                                              local5 = (tempVar - 0xB8);
                                                              state = (0x1E ? 0x10 : (tempVar - 0xB8));
                                                              return;
                                                            }
                                                            local6 = 0x1D;
                                                            local5 = 0x16E;
                                                            state = 0x19;
                                                            return;
                                                          }
                                                          Gb(0, 0x10FC88);
                                                          state = (0x1E ? 0x1D : tempVar);
                                                          return;
                                                        }
                                                        local1 = 0xA;
                                                        tempVar = local5;
                                                        state = 0x1A;
                                                        return;
                                                      }
                                                      local1 = 2;
                                                      state = 0x1A;
                                                      return;
                                                    }
                                                    local5 = (tempVar - 0x5C);
                                                    state = (0x1E ? 0x1B : (tempVar - 0x5C));
                                                    return;
                                                  }
                                                  local5 = (tempVar - 0x3D);
                                                  state = (0x1F ? 0xA : (tempVar - 0x3D));
                                                  return;
                                                }
                                                global0 = (scratchMem + 0x60);
                                                return 0x14;
                                              }
                                              local1 = 3;
                                              state = 0x1A;
                                              return;
                                            }
                                            local1 = 7;
                                            tempVar = local5;
                                            state = 0x1A;
                                            return;
                                          }
                                          local1 = (tempVar - 0x113);
                                          tempVar = (0x1F ? 0 : local1);
                                          local1 = 0xC;
                                          state = 0x1A;
                                          return;
                                        }
                                        local5 = (tempVar - 0xD6);
                                        state = (0x1F ? 0x15 : (tempVar - 0xD6));
                                        return;
                                      }
                                      local5 = 0x16D;
                                      local6 = 0x1C;
                                      state = ((local1 & 3) ? 0x19 : 0x21);
                                      return;
                                    }
                                    local1 = 8;
                                    tempVar = local5;
                                    state = 0x1A;
                                    return;
                                  }
                                  Qb(scratchMem, 0x1022F0, Pb(0x18), scratchMem, 3, Pb(0x24), scratchMem, ((scratchMem + 0xC) | 0xA00000000n), 0x40);
                                  Qb(scratchMem, 0x102308, Pb(0x28), scratchMem, 3, Pb(0x1C), scratchMem, ((scratchMem + 0x14) | 0xA00000000n), 0x38);
                                  Qb(1, (tempVar - 0x113), 8, scratchMem, 3, Pb(0x2C), scratchMem, ((scratchMem + 0x10) | 0x1100000000n), 0x30);
                                  func430((scratchMem + 0x18));
                                  state = 0xC;
                                  return;
                                }
                                local1 = 5;
                                tempVar = local5;
                                state = 0x1A;
                                return;
                              }
                              local5 = (tempVar - 0xF5);
                              state = (0x1E ? 0xF : (tempVar - 0xF5));
                              return;
                            }
                            local1 = 9;
                            tempVar = local5;
                            state = 0x1A;
                            return;
                          }
                          tempVar = (tempVar - local6);
                          state = (0x1F ? 4 : (tempVar - local6));
                          return;
                        }
                        local1 = 4;
                        tempVar = local5;
                        state = 0x1A;
                        return;
                      }
                      state = (local5 ? 7 : tempVar);
                      return;
                    }
                    state = 0x13;
                    return;
                  }
                  local5 = (tempVar - 0x7A);
                  state = (0x1F ? 0 : (tempVar - 0x7A));
                  return;
                }
                local1 = 1;
                state = 0x1A;
                return;
              }
              tempVar = (tempVar - 0x1F);
              state = ((tempVar - 0x1F) ? 0x17 : local6);
              return;
            }
            local1 = (local1 + 1);
            tempVar = (tempVar - local5);
            state = 0x11;
            return;
          }
          Qb(scratchMem, 0x102228, Pb(0x18), scratchMem, 6, Pb(0x24), scratchMem, (scratchMem | 0xA00000000n), 0x58);
          Qb(scratchMem, 0x102260, Pb(0x28), scratchMem, 7, Pb(0x1C), scratchMem, ((scratchMem + 4) | 0xA00000000n), 0x50);
          Qb(Pb(0xC), 0xE, 9, scratchMem, 6, Pb(0x2C), scratchMem, ((scratchMem + 8) | 0xA00000000n), 0x48);
          Qb(0x1E, scratchMem, local1, Pb(0x14), scratchMem, (tempVar + 1), scratchMem, ((scratchMem + 0xC) | 0xA00000000n), 0x40);
          Qb(scratchMem, (scratchMem + 0x30), Pb(0x20), local0, 0x20, 0xD, scratchMem, ((scratchMem + 0x14) | 0xA00000000n), 0x38);
          Qb(Pb(8), 0x18, scratchMem, local1, Pb(0x10), 0x1C, scratchMem, ((scratchMem + 0x10) | 0x1100000000n), 0x30);
          func430((scratchMem + 0x18));
          state = 0xC;
          return;
        }
        local1 = 0xB;
        tempVar = local5;
        state = 0x1A;
        return;
      }
      state = ((local1 % 0x64) ? 6 : 3);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that ultimately returns, likely after manipulating memory based on calculations and calls to external functions (Gb, Qb, Pb, func430). 
  
   */

  function func277() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func278() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: nextState=local2 */
  function func279(local0, local1) {
    let Error, Unreachable, code, local2, local3, local4, loop0, reached;
    local2 = 3;
    loop0: while (true) {
      {
        {
          {
            {
              {
                switch (local2) {
                  case 0: continue loop0;
                  case 1: return;
                  case 2: return;
                  case 3: return;
                  case 4: return;
                  default: return;
                }
              }
              local2 = (local3 ? 1 : (local1 + 0x27));
              return;
            }
            throw new Error('Unreachable code reached');
          }
          local2 = (local4 ? 0 : 4);
          return;
        }
        local2 = ub(1, (local0 - 4), 0);
        local3 = (ub(1, (local0 - 4), 0) & 0xFFFFFFF8);
        local4 = (local2 & 3);
        local2 = ((((local2 & 3) ? 4 : 8) + local1) ? 2 : (ub(1, (local0 - 4), 0) & 0xFFFFFFF8));
        return;
      }
    }
    handleMemoryValue(local0);

  }

  /*
   * AI Summary: The function determines a return path based on a memory address calculation and bitwise operations, ultimately returning or throwing an error depending on the calculated values.
  
   */

  function func280() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func281(local0, local1) {
    let Error, Unreachable, code, local2, local3, loop0, reached;

    local2 = 3;
    loop0: while (true) {
      {
        {
          {
            {
              {
                switch (local2) {
                  case 0: continue loop0;
                  case 1: return;
                  case 2: return;
                  case 3: return;
                  case 4: return;
                  default: return;
                }
              }
              global0 = (local3 + 0x10);
              return;
            }
            local1 = (ub(local0, local0, 0) - 1);
            if (local1) {
            } else {
            }
            local2 = 2;
            return;
          }
          func348(0, (local3 + 0xC));
          local2 = 0;
          return;
        }
        local3 = (global0 - 0x10);
        global0 = (global0 - 0x10);
        local0 = ub(Pb(0), local0, 0);
        if (ub(Pb(0), local0, 0)) {
        } else {
        }
        local2 = 4;
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function conditionally executes one of two code paths based on a memory-fetched and XORed value, either returning immediately or updating state and looping based on a secondary memory-fetched and XORed value. 
  
   */

  function func282() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  /* renamed vars: local4=state, local5=offset */
  function func283(local0, local1, local2, local3) {
    let Error, Unreachable, code, local6, local7, local8, local9, loop0, offset, reached, state;
    state = 0xF;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              switch (state) {
                                                case 0: continue loop0;
                                                case 1: return;
                                                case 2: return;
                                                case 3: return;
                                                case 4: return;
                                                case 5: return;
                                                case 6: return;
                                                case 7: return;
                                                case 8: return;
                                                case 9: return;
                                                case 10: return;
                                                case 11: return;
                                                case 12: return;
                                                case 13: return;
                                                case 14: return;
                                                case 15: return;
                                                case 16: return;
                                                case 17: return;
                                                case 18: return;
                                                case 19: return;
                                                default: return;
                                              }
                                            }
                                            Gb((local2 + offset), 0);
                                            if (local6) {
                                            } else {
                                            }
                                            state = 6;
                                            return;
                                          }
                                          local6 = (local6 + 1);
                                          if ((local6 + 1)) {
                                          } else {
                                          }
                                          state = 2;
                                          return;
                                        }
                                        Gb((local2 + local6), 0);
                                        if (local8) {
                                        } else {
                                        }
                                        state = 0xA;
                                        return;
                                      }
                                      state = (local2 + offset);
                                      local7 = (ub(1, (local2 + offset), 0) ^ local6);
                                      local8 = (ub(((ub(1, (local2 + offset), 0) ^ local6) | (0x1010100 - local7)), (state + 4), 0) ^ local6);
                                      if (0x80808080) {
                                      } else {
                                      }
                                      state = 0xB;
                                      return;
                                    }
                                    state = 0x10;
                                    return;
                                  }
                                  local6 = offset;
                                  state = 0xA;
                                  return;
                                }
                                offset = (offset + 1);
                                if ((offset + 1)) {
                                } else {
                                }
                                state = 0;
                                return;
                              }
                              local6 = (local1 & 0xFF);
                              local7 = 1;
                              state = 0;
                              return;
                            }
                            local9 = (local3 - 8);
                            offset = 0;
                            state = 0x13;
                            return;
                          }
                          local9 = (local3 - 8);
                          if ((local3 - 8)) {
                          } else {
                          }
                          state = 0xB;
                          return;
                        }
                        return Pb(0);
                      }
                      if (offset) {
                      } else {
                      }
                      state = 0x10;
                      return;
                    }
                    offset = (offset + 8);
                    if (local9) {
                    } else {
                    }
                    state = 3;
                    return;
                  }
                  state = 0x13;
                  return;
                }
                local6 = 0;
                local8 = (local1 & 0xFF);
                local7 = 1;
                state = 2;
                return;
              }
              offset = ((local2 + 3) & 0xFFFFFFFC);
              if (((local2 + 3) & 0xFFFFFFFC)) {
              } else {
              }
              state = 8;
              return;
            }
            local7 = 0;
            state = 0xA;
            return;
          }
          state = 0xB;
          return;
        }
        offset = (offset - local2);
        offset = (offset ? (offset - local2) : local3);
        if ((offset ? (offset - local2) : local3)) {
        } else {
        }
        state = 8;
        return;
      }
      local6 = ((local1 & 0xFF) * 0x1010101);
      state = 3;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function performs a series of bitwise operations and memory accesses based on input parameters, likely implementing a checksum or obfuscation algorithm. 
  
   */

  function func284() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  /* renamed vars: local3=state, local10=countMinus8, local4=offset, local5=size, local6=dest, local7=count, local8=src, local9=init, local11=color, local12=flags */
  function func285(local0, local1, local2) {
    let Error, Unreachable, code, color, count, countMinus8, dest, flags, init, local13, local14, local15, loop0, offset, reached, size, src, state;
    state = 0x25;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            switch (state) {
                                                                                              case 0: continue loop0;
                                                                                              case 1: return;
                                                                                              case 2: return;
                                                                                              case 3: return;
                                                                                              case 4: return;
                                                                                              case 5: return;
                                                                                              case 6: return;
                                                                                              case 7: return;
                                                                                              case 8: return;
                                                                                              case 9: return;
                                                                                              case 10: return;
                                                                                              case 11: return;
                                                                                              case 12: return;
                                                                                              case 13: return;
                                                                                              case 14: return;
                                                                                              case 15: return;
                                                                                              case 16: return;
                                                                                              case 17: return;
                                                                                              case 18: return;
                                                                                              case 19: return;
                                                                                              case 20: return;
                                                                                              case 21: return;
                                                                                              case 22: return;
                                                                                              case 23: return;
                                                                                              case 24: return;
                                                                                              case 25: return;
                                                                                              case 26: return;
                                                                                              case 27: return;
                                                                                              case 28: return;
                                                                                              case 29: return;
                                                                                              case 30: return;
                                                                                              case 31: return;
                                                                                              case 32: return;
                                                                                              case 33: return;
                                                                                              case 34: return;
                                                                                              case 35: return;
                                                                                              case 36: return;
                                                                                              case 37: return;
                                                                                              case 38: return;
                                                                                              case 39: return;
                                                                                              case 40: return;
                                                                                              case 41: return;
                                                                                              case 42: return;
                                                                                              default: return;
                                                                                            }
                                                                                          }
                                                                                          if (size) {
                                                                                          } else {
                                                                                          }
                                                                                          state = 0x1F;
                                                                                          return;
                                                                                        }
                                                                                        if (size) {
                                                                                        } else {
                                                                                        }
                                                                                        state = 0x1C;
                                                                                        return;
                                                                                      }
                                                                                      state = 0x17;
                                                                                      return;
                                                                                    }
                                                                                    countMinus8 = (count - 8);
                                                                                    if ((count - 8)) {
                                                                                    } else {
                                                                                    }
                                                                                    state = 0x1A;
                                                                                    return;
                                                                                  }
                                                                                  Gb((offset + dest), 0);
                                                                                  if (0xA) {
                                                                                  } else {
                                                                                  }
                                                                                  state = 0x15;
                                                                                  return;
                                                                                }
                                                                                count = (local0 - init);
                                                                                offset = 0;
                                                                                if (init) {
                                                                                } else {
                                                                                }
                                                                                state = 0x18;
                                                                                return;
                                                                              }
                                                                              state = 4;
                                                                              return;
                                                                            }
                                                                            state = 0x1F;
                                                                            return;
                                                                          }
                                                                          local0 = (local0 + 1);
                                                                          if (count) {
                                                                          } else {
                                                                          }
                                                                          state = 0x10;
                                                                          return;
                                                                        }
                                                                        Gb((local0 + dest), 0);
                                                                        if (0xA) {
                                                                        } else {
                                                                        }
                                                                        state = 0x28;
                                                                        return;
                                                                      }
                                                                      src = (src + 8);
                                                                      offset = (offset + 8);
                                                                      if (countMinus8) {
                                                                      } else {
                                                                      }
                                                                      state = 0x13;
                                                                      return;
                                                                    }
                                                                    local0 = offset;
                                                                    state = 0x28;
                                                                    return;
                                                                  }
                                                                  if (table0[ub(4, flags, 0xC)](2, color, 0x10C64C)) {
                                                                  } else {
                                                                  }
                                                                  state = 5;
                                                                  return;
                                                                }
                                                                return local13;
                                                              }
                                                              Gb((local0 + dest), 0);
                                                              if (0xA) {
                                                              } else {
                                                              }
                                                              state = 1;
                                                              return;
                                                            }
                                                            countMinus8 = (count - 8);
                                                            state = 0x1A;
                                                            return;
                                                          }
                                                          Gb((local0 + dest), 0);
                                                          if (0xA) {
                                                          } else {
                                                          }
                                                          state = 0x28;
                                                          return;
                                                        }
                                                        if ((dest & 1)) {
                                                        } else {
                                                        }
                                                        state = 0;
                                                        return;
                                                      }
                                                      state = 0x17;
                                                      return;
                                                    }
                                                    local0 = ub(0xD, src, 0);
                                                    local0 = ub((ub(0xD, src, 0) | (0x1010100 - (local0 ^ 0xA0A0A0A))), (src + 4), 0);
                                                    if (0x80808080) {
                                                    } else {
                                                    }
                                                    state = 0x17;
                                                    return;
                                                  }
                                                  local13 = 1;
                                                  state = 0xD;
                                                  return;
                                                }
                                                offset = (offset + 1);
                                                if ((offset + 1)) {
                                                } else {
                                                }
                                                state = 4;
                                                return;
                                              }
                                              size = local2;
                                              state = 0x1F;
                                              return;
                                            }
                                            if (count) {
                                            } else {
                                            }
                                            state = 6;
                                            return;
                                          }
                                          local0 = (local1 + init);
                                          init = src;
                                          if (table0[ub(count, flags, 0xC)](sb(local14, offset, 0), color, local0)) {
                                          } else {
                                          }
                                          state = 0x11;
                                          return;
                                        }
                                        Gb(local14, 0);
                                        if (0x14) {
                                        } else {
                                        }
                                        state = 5;
                                        return;
                                      }
                                      state = 0x13;
                                      return;
                                    }
                                    state = 0x1C;
                                    return;
                                  }
                                  dest = (local1 + size);
                                  count = (local2 - size);
                                  if (7) {
                                  } else {
                                  }
                                  state = 0x1E;
                                  return;
                                }
                                dest = 0;
                                src = size;
                                local0 = size;
                                state = 0x19;
                                return;
                              }
                              src = ((dest + 3) & 0xFFFFFFFC);
                              offset = (((dest + 3) & 0xFFFFFFFC) - dest);
                              if ((((dest + 3) & 0xFFFFFFFC) - dest)) {
                              } else {
                              }
                              state = 0xF;
                              return;
                            }
                            if (init) {
                            } else {
                            }
                            state = 0xD;
                            return;
                          }
                          size = local2;
                          state = 0x1F;
                          return;
                        }
                        local0 = 0;
                        state = 9;
                        return;
                      }
                      local0 = 0;
                      state = 0x10;
                      return;
                    }
                    size = local2;
                    state = 0x1F;
                    return;
                  }
                  size = local2;
                  state = 0x1F;
                  return;
                }
                local15 = (local1 - 1);
                flags = ub(0x26, local0, 4);
                color = ub(local2, local0, 0);
                local14 = ub(0x21, local0, 8);
                local13 = 0;
                init = 0;
                size = 0;
                dest = 0;
                state = 0x11;
                return;
              }
              dest = 1;
              src = init;
              local0 = local2;
              state = 0x19;
              return;
            }
            if (size) {
            } else {
            }
            state = 0x22;
            return;
          }
          offset = (local0 + size);
          size = ((local0 + size) + 1);
          if (offset) {
          } else {
          }
          state = 1;
          return;
        }
        Gb((local0 + local15), 0);
        offset = 0xA;
        state = 0x18;
        return;
      }
      local0 = (local0 + 1);
      if (offset) {
      } else {
      }
      state = 9;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 3;

  }

  /*
   * AI Summary: The function implements a state machine that performs conditional memory operations (reads, writes, and bitwise manipulations) based on input parameters and internal state, likely related to image processing given the "color" and "flags" variables.
  
   */

  function func286() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func287(local0, local1) {

    return func243(ub(ub(local1, local0, 4), local0, 8));

  }


  /* renamed vars: local2=state, local3=memAddr, local4=dataSize */
  function func288(local0, local1) {
    let Error, Unreachable, code, dataSize, local5, local6, loop0, memAddr, reached, state;
    state = 4;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            switch (state) {
                                              case 0: continue loop0;
                                              case 1: return;
                                              case 2: return;
                                              case 3: return;
                                              case 4: return;
                                              case 5: return;
                                              case 6: return;
                                              case 7: return;
                                              case 8: return;
                                              case 9: return;
                                              case 10: return;
                                              case 11: return;
                                              case 12: return;
                                              case 13: return;
                                              case 14: return;
                                              case 15: return;
                                              case 16: return;
                                              case 17: return;
                                              case 18: return;
                                              default: return;
                                            }
                                          }
                                          state = 0xE;
                                          return;
                                        }
                                        state = 0xE;
                                        return;
                                      }
                                      Gb(memAddr, 0xF);
                                      local5 = sb((memAddr + 0xD), 1, 0);
                                      state = 9;
                                      return;
                                    }
                                    Gb(memAddr, 0xD);
                                    if ((sb((memAddr + 0xE), 1, 0) & 1)) {
                                    } else {
                                    }
                                    state = 9;
                                    return;
                                  }
                                  memAddr = (global0 - 0x10);
                                  global0 = (global0 - 0x10);
                                  local5 = 0;
                                  if (local1) {
                                  } else {
                                  }
                                  state = 9;
                                  return;
                                }
                                local6 = (local1 * 0xC);
                                local1 = (local0 + 8);
                                state = 0x11;
                                return;
                              }
                              state = 0xE;
                              return;
                            }
                            if (7) {
                            } else {
                            }
                            state = 0xE;
                            return;
                          }
                          if (8) {
                          } else {
                          }
                          state = 7;
                          return;
                        }
                        global0 = (memAddr + 0x10);
                        return (local5 & 1);
                      }
                      dataSize = (local0 + dataSize);
                      if (func248(0x10, 0x101482, ((local0 + dataSize) - 6), 6)) {
                      } else {
                      }
                      state = 1;
                      return;
                    }
                    Gb(memAddr, 0xE);
                    if (1) {
                    } else {
                    }
                    state = 9;
                    return;
                  }
                  if (func248(2, 0x101488, (dataSize - 7), 7)) {
                  } else {
                  }
                  state = 6;
                  return;
                }
                if (6) {
                } else {
                }
                state = 0xE;
                return;
              }
              local1 = (local1 + 0xC);
              local6 = (local6 - 0xC);
              if ((local6 - 0xC)) {
              } else {
              }
              state = 3;
              return;
            }
            state = 0xE;
            return;
          }
          if (0x6573696D6F72505Fn) {
          } else {
          }
          state = 0xC;
          return;
        }
        dataSize = ub(0, (local1 - 4), 0);
        local0 = ub(wb(0), local1, 0);
        if (0x1A) {
        } else {
        }
        state = 0xD;
        return;
      }
      if (func248(0x12, 0x101468, dataSize, 0x1A)) {
      } else {
      }
      state = 0xF;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 0xA;

  }

  /*
   * AI Summary: The function `func288` performs a series of conditional operations based on a state machine, involving memory reads, writes, and bitwise operations, ultimately returning a boolean value or undefined.
  
   */

  // func289 is qb
  function qb() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func290(local0, local1) {
    let Ea, a;

    local1 = imports['a']['Ea'](ub(local0, local1, 0));

  }


  /* renamed vars: state=local2 */
  function func291(local0, local1) {
    let Error, Unreachable, code, local2, local3, local4, loop0, reached;
    local2 = 2;
    loop0: while (true) {
      {
        {
          {
            switch (local2) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          local2 = (local0 & 0xF);
          local3 = (local3 - 1);
          local0 = (local0 >>> 4);
          if (0xF) {
          } else {
          }
          local2 = 1;
          return;
        }
        processStream(((local3 + local4) + 0x80), (0 - local3));
        global0 = (local4 + 0x80);
        return 2;
      }
      local4 = (global0 - 0x80);
      global0 = (global0 - 0x80);
      local0 = ub(0x10C65F, local0, 0);
      local3 = 0;
      local2 = 0;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 1;

  }

  /*
   * AI Summary: The function appears to conditionally execute a memory address calculation using `ub` based on an input value, before ultimately returning a fixed value (1 or 2). 
  
   */

  /* renamed vars: local2=state, local3=src, local4=rounds, local5=len, local6=end, local7=i, local8=acc */
  function func292(local0, local1) {
    let Error, Unreachable, acc, code, end, i, len, local10, local9, loop0, reached, rounds, src, state;
    state = 0x1F;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    switch (state) {
                                                                                                                                      case 0: continue loop0;
                                                                                                                                      case 1: return;
                                                                                                                                      case 2: return;
                                                                                                                                      case 3: return;
                                                                                                                                      case 4: return;
                                                                                                                                      case 5: return;
                                                                                                                                      case 6: return;
                                                                                                                                      case 7: return;
                                                                                                                                      case 8: return;
                                                                                                                                      case 9: return;
                                                                                                                                      case 10: return;
                                                                                                                                      case 11: return;
                                                                                                                                      case 12: return;
                                                                                                                                      case 13: return;
                                                                                                                                      case 14: return;
                                                                                                                                      case 15: return;
                                                                                                                                      case 16: return;
                                                                                                                                      case 17: return;
                                                                                                                                      case 18: return;
                                                                                                                                      case 19: return;
                                                                                                                                      case 20: return;
                                                                                                                                      case 21: return;
                                                                                                                                      case 22: return;
                                                                                                                                      case 23: return;
                                                                                                                                      case 24: return;
                                                                                                                                      case 25: return;
                                                                                                                                      case 26: return;
                                                                                                                                      case 27: return;
                                                                                                                                      case 28: return;
                                                                                                                                      case 29: return;
                                                                                                                                      case 30: return;
                                                                                                                                      case 31: return;
                                                                                                                                      case 32: return;
                                                                                                                                      case 33: return;
                                                                                                                                      case 34: return;
                                                                                                                                      case 35: return;
                                                                                                                                      case 36: return;
                                                                                                                                      case 37: return;
                                                                                                                                      case 38: return;
                                                                                                                                      case 39: return;
                                                                                                                                      case 40: return;
                                                                                                                                      case 41: return;
                                                                                                                                      case 42: return;
                                                                                                                                      case 43: return;
                                                                                                                                      case 44: return;
                                                                                                                                      case 45: return;
                                                                                                                                      case 46: return;
                                                                                                                                      case 47: return;
                                                                                                                                      case 48: return;
                                                                                                                                      case 49: return;
                                                                                                                                      case 50: return;
                                                                                                                                      case 51: return;
                                                                                                                                      case 52: return;
                                                                                                                                      case 53: return;
                                                                                                                                      case 54: return;
                                                                                                                                      case 55: return;
                                                                                                                                      case 56: return;
                                                                                                                                      case 57: return;
                                                                                                                                      case 58: return;
                                                                                                                                      case 59: return;
                                                                                                                                      case 60: return;
                                                                                                                                      case 61: return;
                                                                                                                                      case 62: return;
                                                                                                                                      default: return;
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  state = (i ? 0x2A : 0xB);
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                state = ((local1 & 0x80) ? 4 : 0x31);
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              len = (end & 0x7FFFFFFC);
                                                                                                                              acc = 0n;
                                                                                                                              src = local0;
                                                                                                                              state = 3;
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            acc = ((ub(src, src, 0) * local9) + acc);
                                                                                                                            state = (src + 4);
                                                                                                                            acc = ((ub(Pb(0), (src + 4), 0) * local9) + (acc >> 0x20n));
                                                                                                                            state = (src + 8);
                                                                                                                            acc = ((ub(Pb(0), (src + 8), 0) * local9) + (acc >> 0x20n));
                                                                                                                            end = (src + 0xC);
                                                                                                                            local10 = ((ub(Pb(0), (src + 0xC), 0) * local9) + (acc >> 0x20n));
                                                                                                                            acc = (local10 >> 0x20n);
                                                                                                                            src = (src + 0x10);
                                                                                                                            len = (len - 4);
                                                                                                                            state = ((len - 4) ? 3 : 0x29);
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          state = 0x31;
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        end = ub(0x10, local0, 0xA0);
                                                                                                                        state = (0x29 ? 0x30 : ub(0x10, local0, 0xA0));
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      state = (rounds ? 0x24 : 0x3C);
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    acc = 0n;
                                                                                                                    src = local0;
                                                                                                                    state = 8;
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  state = (i ? 0x12 : 0x19);
                                                                                                                  return;
                                                                                                                }
                                                                                                                return Pb(0xA0);
                                                                                                              }
                                                                                                              state = ((local1 & 0x40) ? 0x11 : 1);
                                                                                                              return;
                                                                                                            }
                                                                                                            state = (0x100000000n ? 0x20 : local10);
                                                                                                            return;
                                                                                                          }
                                                                                                          state = ((local1 & 0x10) ? 0x28 : 0x21);
                                                                                                          return;
                                                                                                        }
                                                                                                        rounds = (rounds + 1);
                                                                                                        state = 0x3E;
                                                                                                        return;
                                                                                                      }
                                                                                                      local9 = ((ub(src, src, 0) * 0x5F5E1n) + acc);
                                                                                                      src = (src + 4);
                                                                                                      acc = (local9 >> 0x20n);
                                                                                                      i = (i - 1);
                                                                                                      state = ((i - 1) ? 0xE : 0x32);
                                                                                                      return;
                                                                                                    }
                                                                                                    state = 0xA;
                                                                                                    return;
                                                                                                  }
                                                                                                  throw new Error('Unreachable code reached');
                                                                                                }
                                                                                                state = 1;
                                                                                                return;
                                                                                              }
                                                                                              state = 0xE;
                                                                                              return;
                                                                                            }
                                                                                            state = (rounds ? 0x34 : 0x22);
                                                                                            return;
                                                                                          }
                                                                                          rounds = ub(0x10, local0, 0xA0);
                                                                                          state = (0x29 ? 0x13 : ub(0x10, local0, 0xA0));
                                                                                          return;
                                                                                        }
                                                                                        acc = 0n;
                                                                                        src = local0;
                                                                                        state = 0;
                                                                                        return;
                                                                                      }
                                                                                      len = (len & 0x7FFFFFFC);
                                                                                      acc = 0n;
                                                                                      src = local0;
                                                                                      state = 0x1A;
                                                                                      return;
                                                                                    }
                                                                                    src = (local1 & 7);
                                                                                    state = ((local1 & 7) ? 0x1B : 0x1C);
                                                                                    return;
                                                                                  }
                                                                                  state = 0xB;
                                                                                  return;
                                                                                }
                                                                                state = (0x100000000n ? 0x3E : local9);
                                                                                return;
                                                                              }
                                                                              acc = ((ub(src, src, 0) * 0x5F5E1n) + acc);
                                                                              state = (src + 4);
                                                                              acc = ((ub(Pb(0), (src + 4), 0) * 0x5F5E1n) + (acc >> 0x20n));
                                                                              state = (src + 8);
                                                                              acc = ((ub(Pb(0), (src + 8), 0) * 0x5F5E1n) + (acc >> 0x20n));
                                                                              end = (src + 0xC);
                                                                              local9 = ((ub(Pb(0), (src + 0xC), 0) * 0x5F5E1n) + (acc >> 0x20n));
                                                                              acc = (local9 >> 0x20n);
                                                                              src = (src + 0x10);
                                                                              len = (len - 4);
                                                                              state = ((len - 4) ? 0x1A : 0x2F);
                                                                              return;
                                                                            }
                                                                            rounds = ub(0x10, local0, 0xA0);
                                                                            state = (0x29 ? 6 : ub(0x10, local0, 0xA0));
                                                                            return;
                                                                          }
                                                                          state = ((local1 & 8) ? 0x14 : 0xC);
                                                                          return;
                                                                        }
                                                                        rounds = (rounds + 1);
                                                                        state = 0x20;
                                                                        return;
                                                                      }
                                                                      state = 0x3D;
                                                                      return;
                                                                    }
                                                                    state = (8 ? 5 : local1);
                                                                    return;
                                                                  }
                                                                  state = 0x1C;
                                                                  return;
                                                                }
                                                                state = ((local1 & 0x20) ? 0xF : 0xA);
                                                                return;
                                                              }
                                                              rounds = 0;
                                                              state = 0x3E;
                                                              return;
                                                            }
                                                            state = (0x100000000n ? 0x2E : local10);
                                                            return;
                                                          }
                                                          len = ((rounds - 1) & 0x3FFFFFFF);
                                                          end = (((rounds - 1) & 0x3FFFFFFF) + 1);
                                                          i = ((((rounds - 1) & 0x3FFFFFFF) + 1) & 3);
                                                          local9 = (ub(0x3A, ((src << 2) + 0x10C5F0), 0) >>> src);
                                                          state = (3 ? 2 : len);
                                                          return;
                                                        }
                                                        state = (0x28 ? 0x10 : rounds);
                                                        return;
                                                      }
                                                      state = (0x28 ? 0x10 : rounds);
                                                      return;
                                                    }
                                                    state = 0x38;
                                                    return;
                                                  }
                                                  state = 0x21;
                                                  return;
                                                }
                                                state = 0;
                                                return;
                                              }
                                              state = 0x3B;
                                              return;
                                            }
                                            state = 0x23;
                                            return;
                                          }
                                          return func191(local0, local1);
                                        }
                                        state = 0x2C;
                                        return;
                                      }
                                      return Pb(0xA0);
                                    }
                                    state = 8;
                                    return;
                                  }
                                  state = (end ? 0x33 : 9);
                                  return;
                                }
                                state = ((local1 & 0x100) ? 0x2D : 0x2C);
                                return;
                              }
                              state = 0x19;
                              return;
                            }
                            local9 = ub(end, ((local1 << 2) + 0x10C5F0), 0);
                            src = ((end - 1) & 0x3FFFFFFF);
                            len = (((end - 1) & 0x3FFFFFFF) + 1);
                            i = ((((end - 1) & 0x3FFFFFFF) + 1) & 3);
                            state = (3 ? 0x36 : src);
                            return;
                          }
                          src = ((rounds - 1) & 0x3FFFFFFF);
                          len = (((rounds - 1) & 0x3FFFFFFF) + 1);
                          i = ((((rounds - 1) & 0x3FFFFFFF) + 1) & 3);
                          state = (3 ? 0x16 : src);
                          return;
                        }
                        acc = ((ub(src, src, 0) * local9) + acc);
                        local1 = (src + 4);
                        acc = ((ub(Pb(0), (src + 4), 0) * local9) + (acc >> 0x20n));
                        local1 = (src + 8);
                        acc = ((ub(Pb(0), (src + 8), 0) * local9) + (acc >> 0x20n));
                        local1 = (src + 0xC);
                        local10 = ((ub(Pb(0), (src + 0xC), 0) * local9) + (acc >> 0x20n));
                        acc = (local10 >> 0x20n);
                        src = (src + 0x10);
                        len = (len - 4);
                        state = ((len - 4) ? 0x35 : 0x27);
                        return;
                      }
                      len = (len & 0x7FFFFFFC);
                      acc = 0n;
                      src = local0;
                      state = 0x35;
                      return;
                    }
                    acc = 0n;
                    src = local0;
                    state = 0x38;
                    return;
                  }
                  state = (i ? 0x1E : 0x23);
                  return;
                }
                end = (end + 1);
                state = 0x2E;
                return;
              }
              state = (0x28 ? 0x10 : end);
              return;
            }
            local10 = ((ub(src, src, 0) * local9) + acc);
            src = (src + 4);
            acc = (local10 >> 0x20n);
            i = (i - 1);
            state = ((i - 1) ? 0x3B : 0x18);
            return;
          }
          state = 0x1C;
          return;
        }
        local10 = ((ub(src, src, 0) * local9) + acc);
        src = (src + 4);
        acc = (local10 >> 0x20n);
        i = (i - 1);
        state = ((i - 1) ? 0x3D : 0x2B);
        return;
      }
      state = 0xC;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func292` implements a complex state machine that uses the `ub` helper function for memory manipulation, likely performing a cryptographic operation based on varying input parameters.
  
   */

  function func293() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func294() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  /* renamed vars: local20=step, local6=state, local21=baseAddr, local7=ptr1, local8=ptr2, local13=temp4, local9=counter, local12=temp3, local10=temp1, local11=temp2, local14=node1, local15=node2, local16=index1, local17=index2, local18=offset1, local19=offset2, local22=result */
  function func295(local0, local1, local2, local3, local4, local5) {
    let Error, Unreachable, baseAddr, code, counter, index1, index2, local23, local24, local25, local26, local27, local28, loop0, node1, node2, offset1, offset2, ptr1, ptr2, reached, result, state, step, temp1, temp2, temp3, temp4;
    state = 0x30;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                {
                                                                                                                                                  {
                                                                                                                                                    {
                                                                                                                                                      {
                                                                                                                                                        switch (state) {
                                                                                                                                                          case 0: continue loop0;
                                                                                                                                                          case 1: return;
                                                                                                                                                          case 2: return;
                                                                                                                                                          case 3: return;
                                                                                                                                                          case 4: return;
                                                                                                                                                          case 5: return;
                                                                                                                                                          case 6: return;
                                                                                                                                                          case 7: return;
                                                                                                                                                          case 8: return;
                                                                                                                                                          case 9: return;
                                                                                                                                                          case 10: return;
                                                                                                                                                          case 11: return;
                                                                                                                                                          case 12: return;
                                                                                                                                                          case 13: return;
                                                                                                                                                          case 14: return;
                                                                                                                                                          case 15: return;
                                                                                                                                                          case 16: return;
                                                                                                                                                          case 17: return;
                                                                                                                                                          case 18: return;
                                                                                                                                                          case 19: return;
                                                                                                                                                          case 20: return;
                                                                                                                                                          case 21: return;
                                                                                                                                                          case 22: return;
                                                                                                                                                          case 23: return;
                                                                                                                                                          case 24: return;
                                                                                                                                                          case 25: return;
                                                                                                                                                          case 26: return;
                                                                                                                                                          case 27: return;
                                                                                                                                                          case 28: return;
                                                                                                                                                          case 29: return;
                                                                                                                                                          case 30: return;
                                                                                                                                                          case 31: return;
                                                                                                                                                          case 32: return;
                                                                                                                                                          case 33: return;
                                                                                                                                                          case 34: return;
                                                                                                                                                          case 35: return;
                                                                                                                                                          case 36: return;
                                                                                                                                                          case 37: return;
                                                                                                                                                          case 38: return;
                                                                                                                                                          case 39: return;
                                                                                                                                                          case 40: return;
                                                                                                                                                          case 41: return;
                                                                                                                                                          case 42: return;
                                                                                                                                                          case 43: return;
                                                                                                                                                          case 44: return;
                                                                                                                                                          case 45: return;
                                                                                                                                                          case 46: return;
                                                                                                                                                          case 47: return;
                                                                                                                                                          case 48: return;
                                                                                                                                                          case 49: return;
                                                                                                                                                          case 50: return;
                                                                                                                                                          case 51: return;
                                                                                                                                                          case 52: return;
                                                                                                                                                          case 53: return;
                                                                                                                                                          case 54: return;
                                                                                                                                                          case 55: return;
                                                                                                                                                          case 56: return;
                                                                                                                                                          case 57: return;
                                                                                                                                                          case 58: return;
                                                                                                                                                          case 59: return;
                                                                                                                                                          case 60: return;
                                                                                                                                                          case 61: return;
                                                                                                                                                          case 62: return;
                                                                                                                                                          case 63: return;
                                                                                                                                                          case 64: return;
                                                                                                                                                          case 65: return;
                                                                                                                                                          case 66: return;
                                                                                                                                                          case 67: return;
                                                                                                                                                          case 68: return;
                                                                                                                                                          case 69: return;
                                                                                                                                                          case 70: return;
                                                                                                                                                          case 71: return;
                                                                                                                                                          case 72: return;
                                                                                                                                                          default: return;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      state = (temp3 ? 0x3A : 8);
                                                                                                                                                      return;
                                                                                                                                                    }
                                                                                                                                                    offset1 = 0;
                                                                                                                                                    step = 1;
                                                                                                                                                    local25 = index1;
                                                                                                                                                    state = (index1 ? 0x42 : local1);
                                                                                                                                                    return;
                                                                                                                                                  }
                                                                                                                                                  temp1 = (ptr1 + (ptr2 * 0xC));
                                                                                                                                                  temp2 = (temp3 * 0xC);
                                                                                                                                                  func458((temp3 * 0xC));
                                                                                                                                                  index2 = (temp2 ? (ptr1 + (ptr2 * 0xC)) : ptr1);
                                                                                                                                                  temp2 = ((temp2 ? (ptr1 + (ptr2 * 0xC)) : ptr1) + temp2);
                                                                                                                                                  state = (counter ? 0 : ptr2);
                                                                                                                                                  return;
                                                                                                                                                }
                                                                                                                                                state = (local25 ? 0xA : 0x32);
                                                                                                                                                return;
                                                                                                                                              }
                                                                                                                                              temp3 = (counter >>> 1);
                                                                                                                                              state = 0x45;
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            ptr1 = temp2;
                                                                                                                                            state = 3;
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          func426(0, local5);
                                                                                                                                          state = 0x33;
                                                                                                                                          return;
                                                                                                                                        }
                                                                                                                                        local23 = (local0 - 0xC);
                                                                                                                                        local24 = (local0 + 0x20);
                                                                                                                                        temp1 = 1;
                                                                                                                                        index1 = 0;
                                                                                                                                        temp2 = 0;
                                                                                                                                        state = 1;
                                                                                                                                        return;
                                                                                                                                      }
                                                                                                                                      ptr2 = index2;
                                                                                                                                      state = 0x48;
                                                                                                                                      return;
                                                                                                                                    }
                                                                                                                                    counter = (temp2 - 0xC);
                                                                                                                                    temp3 = (temp1 - 0xC);
                                                                                                                                    temp2 = ub(ub(ub((temp1 - 0xC), (temp2 - 8), 0), (temp1 - 8), 0), (temp2 - 4), 0);
                                                                                                                                    temp1 = ub(ub(ub(ub((temp1 - 0xC), (temp2 - 8), 0), (temp1 - 8), 0), (temp2 - 4), 0), (temp1 - 4), 0);
                                                                                                                                    temp4 = func248((((ptr2 | 1) << 1) ^ 0x3E), ptr2, (temp2 - 0xC), (temp2 ? ub(ub(ub(ub((temp1 - 0xC), (temp2 - 8), 0), (temp1 - 8), 0), (temp2 - 4), 0), (temp1 - 4), 0) : temp1));
                                                                                                                                    temp1 = (temp4 ? func248((((ptr2 | 1) << 1) ^ 0x3E), ptr2, (temp2 - 0xC), (temp2 ? ub(ub(ub(ub((temp1 - 0xC), (temp2 - 8), 0), (temp1 - 8), 0), (temp2 - 4), 0), (temp1 - 4), 0) : temp1)) : (temp2 - temp1));
                                                                                                                                    temp4 = 0;
                                                                                                                                    temp2 = (0 ? local3 : (temp4 ? func248((((ptr2 | 1) << 1) ^ 0x3E), ptr2, (temp2 - 0xC), (temp2 ? ub(ub(ub(ub((temp1 - 0xC), (temp2 - 8), 0), (temp1 - 8), 0), (temp2 - 4), 0), (temp1 - 4), 0) : temp1)) : (temp2 - temp1)));
                                                                                                                                    Qb(((baseAddr + 4) + (ptr1 << 2)), temp1, Pb(0), ptr1, ptr2, local2, (0 ? local3 : (temp4 ? func248((((ptr2 | 1) << 1) ^ 0x3E), ptr2, (temp2 - 0xC), (temp2 ? ub(ub(ub(ub((temp1 - 0xC), (temp2 - 8), 0), (temp1 - 8), 0), (temp2 - 4), 0), (temp1 - 4), 0) : temp1)) : (temp2 - temp1))), wb(0), 0);
                                                                                                                                    temp2 = (counter + ((temp1 >>> 0x1F) * 0xC));
                                                                                                                                    temp1 = (temp3 + (temp4 * 0xC));
                                                                                                                                    state = (ptr1 ? 0x26 : (temp3 + (temp4 * 0xC)));
                                                                                                                                    return;
                                                                                                                                  }
                                                                                                                                  temp2 = (ptr1 + 1);
                                                                                                                                  index1 = ((step >>> 1) + index1);
                                                                                                                                  temp1 = step;
                                                                                                                                  state = 1;
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                counter = node1;
                                                                                                                                state = 0x12;
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              temp2 = counter;
                                                                                                                              temp3 = (counter ? ptr2 : ptr2);
                                                                                                                              state = (local3 ? counter : (counter ? ptr2 : ptr2));
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            local28 = index1;
                                                                                                                            offset1 = (((index1 + ((step >>> 1) + index1)) * local27) ^ (((index1 - (temp1 >>> 1)) + local28) * local27));
                                                                                                                            state = 0x42;
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          state = 0x45;
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        state = (2 ? 4 : counter);
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      func426(0, local5);
                                                                                                                      state = 0x23;
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    state = 0x12;
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  step = ((counter << 1) | 1);
                                                                                                                  state = 0xD;
                                                                                                                  return;
                                                                                                                }
                                                                                                                ptr2 = local26;
                                                                                                                state = 9;
                                                                                                                return;
                                                                                                              }
                                                                                                              temp1 = (local1 - (local1 >>> 1));
                                                                                                              offset2 = (0x40 ? (local1 - (local1 >>> 1)) : temp1);
                                                                                                              state = 7;
                                                                                                              return;
                                                                                                            }
                                                                                                            offset1 = (index1 * 0xC);
                                                                                                            ptr2 = ((index1 * 0xC) + local0);
                                                                                                            node1 = (local1 - index1);
                                                                                                            state = ((local1 - index1) ? 0x3D : offset2);
                                                                                                            return;
                                                                                                          }
                                                                                                          func426(0, local5);
                                                                                                          state = 0x29;
                                                                                                          return;
                                                                                                        }
                                                                                                        temp2 = ub(0x19, ((baseAddr + 4) + (node1 << 2)), 0);
                                                                                                        ptr2 = (ub(0x19, ((baseAddr + 4) + (node1 << 2)), 0) >>> 1);
                                                                                                        counter = (temp1 >>> 1);
                                                                                                        node2 = ((ub(0x19, ((baseAddr + 4) + (node1 << 2)), 0) >>> 1) + (temp1 >>> 1));
                                                                                                        state = (local3 ? 0x43 : ((ub(0x19, ((baseAddr + 4) + (node1 << 2)), 0) >>> 1) + (temp1 >>> 1)));
                                                                                                        return;
                                                                                                      }
                                                                                                      local27 = local1;
                                                                                                      local27 = ((local1 + 0x3FFFFFFFFFFFFFFFn) / local27);
                                                                                                      state = (0x1001 ? 0x14 : local1);
                                                                                                      return;
                                                                                                    }
                                                                                                    ptr1 = (local0 + ((index1 - node2) * 0xC));
                                                                                                    state = ((temp2 & 1) ? 0x33 : 6);
                                                                                                    return;
                                                                                                  }
                                                                                                  ptr1 = (0x20 ? node1 : node1);
                                                                                                  func426(0, local5);
                                                                                                  step = ((ptr1 << 1) | 1);
                                                                                                  state = 0xD;
                                                                                                  return;
                                                                                                }
                                                                                                temp3 = (temp3 + 0xC);
                                                                                                ptr1 = temp4;
                                                                                                node2 = index2;
                                                                                                counter = (counter + 1);
                                                                                                state = ((counter + 1) ? 0x46 : node1);
                                                                                                return;
                                                                                              }
                                                                                              state = (2 ? 0x21 : node1);
                                                                                              return;
                                                                                            }
                                                                                            counter = ub(ub(ub(temp1, (temp1 + 4), 0), (ptr2 + 4), 0), (temp1 + 8), 0);
                                                                                            temp4 = ub(ub(ub(ub(temp1, (temp1 + 4), 0), (ptr2 + 4), 0), (temp1 + 8), 0), (ptr2 + 8), 0);
                                                                                            state = func248(0xB, ptr1, ptr2, (temp4 ? ub(ub(ub(ub(temp1, (temp1 + 4), 0), (ptr2 + 4), 0), (temp1 + 8), 0), (ptr2 + 8), 0) : counter));
                                                                                            temp4 = (state ? func248(0xB, ptr1, ptr2, (temp4 ? ub(ub(ub(ub(temp1, (temp1 + 4), 0), (ptr2 + 4), 0), (temp1 + 8), 0), (ptr2 + 8), 0) : counter)) : (counter - temp4));
                                                                                            counter = 0;
                                                                                            temp3 = (0 ? 0x28 : (state ? func248(0xB, ptr1, ptr2, (temp4 ? ub(ub(ub(ub(temp1, (temp1 + 4), 0), (ptr2 + 4), 0), (temp1 + 8), 0), (ptr2 + 8), 0) : counter)) : (counter - temp4)));
                                                                                            Qb(ptr2, 0x20, (0x20 ? node1 : node1), local2, local3, 0, (0 ? 0x28 : (state ? func248(0xB, ptr1, ptr2, (temp4 ? ub(ub(ub(ub(temp1, (temp1 + 4), 0), (ptr2 + 4), 0), (temp1 + 8), 0), (ptr2 + 8), 0) : counter)) : (counter - temp4))), wb(0), 0);
                                                                                            ptr1 = (ptr1 + 0xC);
                                                                                            ptr2 = (ptr2 + (counter * 0xC));
                                                                                            state = ((ptr2 + (counter * 0xC)) ? 0x48 : temp2);
                                                                                            return;
                                                                                          }
                                                                                          ptr2 = (ptr2 - 0xC);
                                                                                          state = (index2 ? 9 : temp2);
                                                                                          return;
                                                                                        }
                                                                                        state = 0x2D;
                                                                                        return;
                                                                                      }
                                                                                      ptr1 = (index1 * 0xC);
                                                                                      local26 = (local23 + (index1 * 0xC));
                                                                                      result = (local0 + ptr1);
                                                                                      state = 0x47;
                                                                                      return;
                                                                                    }
                                                                                    node2 = ub(0x2E, (ptr2 + 0x10), 0);
                                                                                    ptr1 = ub(ub(ub(0x2E, (ptr2 + 0x10), 0), (ptr2 + 4), 0), (ptr2 + 0x14), 0);
                                                                                    counter = ub(ub(ub(ub(0x2E, (ptr2 + 0x10), 0), (ptr2 + 4), 0), (ptr2 + 0x14), 0), (ptr2 + 8), 0);
                                                                                    temp3 = func248(0x3B, 0x24, 0x34, (counter ? ub(ub(ub(ub(0x2E, (ptr2 + 0x10), 0), (ptr2 + 4), 0), (ptr2 + 0x14), 0), (ptr2 + 8), 0) : ptr1));
                                                                                    result = 0;
                                                                                    state = (0 ? Pb(0) : (temp3 ? func248(0x3B, 0x24, 0x34, (counter ? ub(ub(ub(ub(0x2E, (ptr2 + 0x10), 0), (ptr2 + 4), 0), (ptr2 + 0x14), 0), (ptr2 + 8), 0) : ptr1)) : (ptr1 - counter)));
                                                                                    return;
                                                                                  }
                                                                                  temp3 = (temp3 + 0xC);
                                                                                  ptr1 = temp4;
                                                                                  node2 = index2;
                                                                                  counter = (counter + 1);
                                                                                  state = ((counter + 1) ? 0x3C : node1);
                                                                                  return;
                                                                                }
                                                                                state = (2 ? 0x44 : temp1);
                                                                                return;
                                                                              }
                                                                              state = 0x26;
                                                                              return;
                                                                            }
                                                                            node1 = ub(0x3E, ptr2, 0);
                                                                            node1 = (ptr2 + 4);
                                                                            local28 = wb(0);
                                                                            temp4 = (ptr1 + 4);
                                                                            Qb(Pb(0), ptr1, node1, Pb(0), (ptr2 + 4), node1, (ptr1 + 4), wb(0), 0);
                                                                            Qb(local3, (((local1 | 1) << 1) ^ 0x3E), 0x2F, ub((ptr1 + 8), (temp3 + 8), 0), 0x1F, ub(ptr2, ptr1, 0), temp4, local28, 0);
                                                                            ptr1 = (ptr1 - 0xC);
                                                                            ptr2 = (ptr2 + 0xC);
                                                                            temp3 = (temp3 - 1);
                                                                            state = ((temp3 - 1) ? 0x25 : 0x2C);
                                                                            return;
                                                                          }
                                                                          ptr1 = temp1;
                                                                          ptr2 = index2;
                                                                          state = 0x48;
                                                                          return;
                                                                        }
                                                                        ptr1 = 1;
                                                                        temp2 = node1;
                                                                        state = (1 ? 0x47 : node1);
                                                                        return;
                                                                      }
                                                                      state = 0x2D;
                                                                      return;
                                                                    }
                                                                    global0 = (baseAddr + 0x150);
                                                                    return 0x31;
                                                                  }
                                                                  step = ((offset2 ? offset2 : node1) << 1);
                                                                  state = 0xD;
                                                                  return;
                                                                }
                                                                temp3 = (offset1 + local24);
                                                                counter = 2;
                                                                state = 0x3C;
                                                                return;
                                                              }
                                                              state = 0x12;
                                                              return;
                                                            }
                                                            counter = node1;
                                                            state = 0x39;
                                                            return;
                                                          }
                                                          state = (2 ? 0x38 : node1);
                                                          return;
                                                        }
                                                        state = ((0x20 - (local1 | 1)) >>> 1);
                                                        offset2 = (((1 << ((0x20 - (local1 | 1)) >>> 1)) + (local1 >>> state)) >>> 1);
                                                        state = 7;
                                                        return;
                                                      }
                                                      baseAddr = (global0 - 0x150);
                                                      global0 = (global0 - 0x150);
                                                      state = (2 ? 0x29 : local1);
                                                      return;
                                                    }
                                                    state = 3;
                                                    return;
                                                  }
                                                  state = ((temp1 & 1) ? 0x29 : 0x16);
                                                  return;
                                                }
                                                state = ((temp1 & 1) ? 0x23 : 0x10);
                                                return;
                                              }
                                              state = (2 ? 0x41 : node1);
                                              return;
                                            }
                                            state = 0x48;
                                            return;
                                          }
                                          temp3 = (offset1 + local24);
                                          counter = 2;
                                          state = 0x46;
                                          return;
                                        }
                                        temp1 = (node2 << 1);
                                        state = 0x27;
                                        return;
                                      }
                                      counter = 2;
                                      state = (2 ? 0x3D : offset2);
                                      return;
                                    }
                                    state = (offset2 ? 0x3D : counter);
                                    return;
                                  }
                                  ptr2 = index2;
                                  state = 0x1D;
                                  return;
                                }
                                temp1 = (temp1 + ((temp4 >>> 0x1F) * 0xC));
                                state = ((temp1 + ((temp4 >>> 0x1F) * 0xC)) ? 0x1D : result);
                                return;
                              }
                              index2 = ub(0x39, (temp3 - 4), 0);
                              temp4 = ub(node2, temp3, 0);
                              node2 = func248(0x22, ub(0x39, (temp3 - 4), 0), ub(node2, temp3, 0), (temp4 ? ptr1 : ptr1));
                              state = (0 ? 0x35 : (node2 ? func248(0x22, ub(0x39, (temp3 - 4), 0), ub(node2, temp3, 0), (temp4 ? ptr1 : ptr1)) : (temp4 - ptr1)));
                              return;
                            }
                            state = (local4 ? 0x1A : 0x2A);
                            return;
                          }
                          state = (2 ? 0x44 : temp2);
                          return;
                        }
                        counter = 1;
                        state = 0x12;
                        return;
                      }
                      state = (result ? 0xF : 0x12);
                      return;
                    }
                    counter = 2;
                    temp3 = 1;
                    state = (2 ? 0x3D : offset2);
                    return;
                  }
                  state = (2 ? 5 : temp2);
                  return;
                }
                state = (((temp1 | temp2) & 1) ? 0x19 : 0x37);
                return;
              }
              temp1 = ((node2 << 1) | 1);
              state = 0x27;
              return;
            }
            ptr1 = (local23 + ((counter * 0xC) + offset1));
            state = 0x25;
            return;
          }
          index2 = ub(0x39, (temp3 - 4), 0);
          temp4 = ub(node2, temp3, 0);
          node2 = func248(0x1B, ub(0x39, (temp3 - 4), 0), ub(node2, temp3, 0), (temp4 ? ptr1 : ptr1));
          state = (0 ? 0x20 : (node2 ? func248(0x1B, ub(0x39, (temp3 - 4), 0), ub(node2, temp3, 0), (temp4 ? ptr1 : ptr1)) : (temp4 - ptr1)));
          return;
        }
        node1 = (temp2 - 1);
        Gb(((temp2 - 1) + (baseAddr + 0x10E)), 0);
        state = (offset1 ? 0x17 : 5);
        return;
      }
      func458((temp2 - ptr2));
      state = 0x44;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that traverses and manipulates a data structure in memory using bitwise operations and function calls, likely related to a binary tree or linked list. 
  
   */

  function func296(local0, local1, local2) {
    let Error, F, Ma, Sa, T, Unreachable, Ya, _, a, code, local3, local4, local5, loop0, reached;

    local3 = 6;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        switch (local3) {
                          case 0: continue loop0;
                          case 1: return;
                          case 2: return;
                          case 3: return;
                          case 4: return;
                          case 5: return;
                          case 6: return;
                          case 7: return;
                          case 8: return;
                          default: return;
                        }
                      }
                      local0 = imports['a']['F']();
                      local4 = imports['a']['Sa'](imports['a']['F']());
                      local2 = imports['a']['T'](imports['a']['Sa'](imports['a']['F']()), local1, local2);
                      local3 = (0x84 ? 7 : local0);
                      return;
                    }
                    imports['a']['_'](local5, local2, 0);
                    local3 = (0x84 ? 5 : local2);
                    return;
                  }
                  imports['a']['Ma'](local0);
                  local3 = 7;
                  return;
                }
                imports['a']['Ma'](local4);
                local3 = 1;
                return;
              }
              imports['a']['Ma'](local2);
              local3 = 5;
              return;
            }
            return 4;
          }
          local5 = ub(0, local0, 0);
          local3 = (local2 ? 8 : imports['a']['Ya'](ub(0, local0, 0)));
          return;
        }
        local3 = (0x84 ? 1 : local4);
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a switch statement with fallthrough behavior, ultimately returning a value determined by a series of conditional calls to imported functions, including a memory address calculation via `ub`.
  
   */

  function func297() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func298() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func299() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func300 is processState
  /* renamed vars: local3=state, local4=offset, local5=address, local6=tmp, local7=value, local8=size */
  function processState(local0, local1, local2) {
    let Error, Unreachable, address, code, local10, local11, local9, loop0, offset, reached, size, state, tmp, value;
    state = 0x1E;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          switch (state) {
                                                                                                                            case 0: continue loop0;
                                                                                                                            case 1: return;
                                                                                                                            case 2: return;
                                                                                                                            case 3: return;
                                                                                                                            case 4: return;
                                                                                                                            case 5: return;
                                                                                                                            case 6: return;
                                                                                                                            case 7: return;
                                                                                                                            case 8: return;
                                                                                                                            case 9: return;
                                                                                                                            case 10: return;
                                                                                                                            case 11: return;
                                                                                                                            case 12: return;
                                                                                                                            case 13: return;
                                                                                                                            case 14: return;
                                                                                                                            case 15: return;
                                                                                                                            case 16: return;
                                                                                                                            case 17: return;
                                                                                                                            case 18: return;
                                                                                                                            case 19: return;
                                                                                                                            case 20: return;
                                                                                                                            case 21: return;
                                                                                                                            case 22: return;
                                                                                                                            case 23: return;
                                                                                                                            case 24: return;
                                                                                                                            case 25: return;
                                                                                                                            case 26: return;
                                                                                                                            case 27: return;
                                                                                                                            case 28: return;
                                                                                                                            case 29: return;
                                                                                                                            case 30: return;
                                                                                                                            case 31: return;
                                                                                                                            case 32: return;
                                                                                                                            case 33: return;
                                                                                                                            case 34: return;
                                                                                                                            case 35: return;
                                                                                                                            case 36: return;
                                                                                                                            case 37: return;
                                                                                                                            case 38: return;
                                                                                                                            case 39: return;
                                                                                                                            case 40: return;
                                                                                                                            case 41: return;
                                                                                                                            case 42: return;
                                                                                                                            case 43: return;
                                                                                                                            case 44: return;
                                                                                                                            case 45: return;
                                                                                                                            case 46: return;
                                                                                                                            case 47: return;
                                                                                                                            case 48: return;
                                                                                                                            case 49: return;
                                                                                                                            case 50: return;
                                                                                                                            case 51: return;
                                                                                                                            case 52: return;
                                                                                                                            case 53: return;
                                                                                                                            case 54: return;
                                                                                                                            case 55: return;
                                                                                                                            case 56: return;
                                                                                                                            case 57: return;
                                                                                                                            default: return;
                                                                                                                          }
                                                                                                                        }
                                                                                                                        tmp = vb(0);
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      switch ((address - 0xF0)) {
                                                                                                                                        case 0: continue loop0;
                                                                                                                                        case 1: return;
                                                                                                                                        case 2: return;
                                                                                                                                        case 3: return;
                                                                                                                                        case 4: return;
                                                                                                                                        default: return;
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    return;
                                                                                                                                  }
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            return;
                                                                                                                          }
                                                                                                                        }
                                                                                                                        state = 0xE;
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      local10 = 0n;
                                                                                                                      state = 0x13;
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    if (0xFFFFFF9F) {
                                                                                                                    } else {
                                                                                                                    }
                                                                                                                    state = 0x1D;
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  return Pb(0);
                                                                                                                }
                                                                                                                if (0x30) {
                                                                                                                } else {
                                                                                                                }
                                                                                                                state = 0x1D;
                                                                                                                return;
                                                                                                              }
                                                                                                              if (0xFFFFFF8F) {
                                                                                                              } else {
                                                                                                              }
                                                                                                              state = 0x1D;
                                                                                                              return;
                                                                                                            }
                                                                                                            state = 7;
                                                                                                            return;
                                                                                                          }
                                                                                                          local10 = 0n;
                                                                                                          address = (offset + 2);
                                                                                                          if ((offset + 2)) {
                                                                                                          } else {
                                                                                                          }
                                                                                                          state = 0x13;
                                                                                                          return;
                                                                                                        }
                                                                                                        state = 0x32;
                                                                                                        return;
                                                                                                      }
                                                                                                      state = 3;
                                                                                                      return;
                                                                                                    }
                                                                                                    local11 = 0x20000000000n;
                                                                                                    state = 0x14;
                                                                                                    return;
                                                                                                  }
                                                                                                  state = 3;
                                                                                                  return;
                                                                                                }
                                                                                                if (((local9 - offset) & 3)) {
                                                                                                } else {
                                                                                                }
                                                                                                state = 0x16;
                                                                                                return;
                                                                                              }
                                                                                              state = 0x1D;
                                                                                              return;
                                                                                            }
                                                                                            if (2) {
                                                                                            } else {
                                                                                            }
                                                                                            state = 0x1D;
                                                                                            return;
                                                                                          }
                                                                                          offset = (address + 1);
                                                                                          state = 0x1C;
                                                                                          return;
                                                                                        }
                                                                                        local10 = 0n;
                                                                                        state = 0x13;
                                                                                        return;
                                                                                      }
                                                                                      offset = (offset + 8);
                                                                                      if (size) {
                                                                                      } else {
                                                                                      }
                                                                                      state = 0x25;
                                                                                      return;
                                                                                    }
                                                                                    state = (local2 - 7);
                                                                                    size = (state ? 0 : local2);
                                                                                    local9 = (((local1 + 3) & 0xFFFFFFFC) - local1);
                                                                                    offset = 0;
                                                                                    state = 0x2B;
                                                                                    return;
                                                                                  }
                                                                                  Qb(0x20, ((value + 0xF) & 0xFF), 0x15, (offset + 8), 8, (local2 - 7), local0, ((local11 | offset) | local10), 4);
                                                                                  return Pb(0);
                                                                                }
                                                                                local10 = 0x100000000n;
                                                                                state = 0x13;
                                                                                return;
                                                                              }
                                                                              if (0xFFFFFFC0) {
                                                                              } else {
                                                                              }
                                                                              state = 0x1D;
                                                                              return;
                                                                            }
                                                                            if (size) {
                                                                            } else {
                                                                            }
                                                                            state = 0x32;
                                                                            return;
                                                                          }
                                                                          state = 0x35;
                                                                          return;
                                                                        }
                                                                        local11 = 0x10000000000n;
                                                                        local10 = 0x100000000n;
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  Gb((address + 0x10C772), 0);
                                                                                  switch (37) {
                                                                                    case 0: continue loop0;
                                                                                    case 1: return;
                                                                                    case 2: return;
                                                                                    default: return;
                                                                                  }
                                                                                }
                                                                                return;
                                                                              }
                                                                              return;
                                                                            }
                                                                            return;
                                                                          }
                                                                        }
                                                                        state = 0x13;
                                                                        return;
                                                                      }
                                                                      if (0xFFFFFFBF) {
                                                                      } else {
                                                                      }
                                                                      state = 0xF;
                                                                      return;
                                                                    }
                                                                    if (0xFFFFFFBF) {
                                                                    } else {
                                                                    }
                                                                    state = 0xA;
                                                                    return;
                                                                  }
                                                                  local11 = 0n;
                                                                  tmp = (offset + 1);
                                                                  if ((offset + 1)) {
                                                                  } else {
                                                                  }
                                                                  state = 0;
                                                                  return;
                                                                }
                                                                if (offset) {
                                                                } else {
                                                                }
                                                                state = 0x2B;
                                                                return;
                                                              }
                                                              local11 = 0x10000000000n;
                                                              state = 0x14;
                                                              return;
                                                            }
                                                            if (local2) {
                                                            } else {
                                                            }
                                                            state = 3;
                                                            return;
                                                          }
                                                          state = 0xF;
                                                          return;
                                                        }
                                                        offset = (offset + 1);
                                                        state = 0x1C;
                                                        return;
                                                      }
                                                      if (0xFFFFFFC0) {
                                                      } else {
                                                      }
                                                      state = 7;
                                                      return;
                                                    }
                                                    local10 = 0n;
                                                    address = (offset + 3);
                                                    if ((offset + 3)) {
                                                    } else {
                                                    }
                                                    state = 0x13;
                                                    return;
                                                  }
                                                  local10 = 0n;
                                                  state = 0x13;
                                                  return;
                                                }
                                                if (0xFFFFFFC0) {
                                                } else {
                                                }
                                                state = 0xF;
                                                return;
                                              }
                                              address = (local1 + offset);
                                              if (((vb(0) | ub(ub(0x37, ((local1 + offset) + 4), 0), address, 0)) & 0x80808080)) {
                                              } else {
                                              }
                                              state = 0x11;
                                              return;
                                            }
                                            state = 0x1D;
                                            return;
                                          }
                                          state = 0x25;
                                          return;
                                        }
                                        address = (offset + 1);
                                        if ((offset + 1)) {
                                        } else {
                                        }
                                        state = 0x33;
                                        return;
                                      }
                                      if (0xFFFFFFC0) {
                                      } else {
                                      }
                                      state = 7;
                                      return;
                                    }
                                    local11 = 0n;
                                    tmp = (offset + 1);
                                    if ((offset + 1)) {
                                    } else {
                                    }
                                    state = 0x2F;
                                    return;
                                  }
                                  Gb((local1 + offset), 0);
                                  address = 1;
                                  value = 1;
                                  if (0) {
                                  } else {
                                  }
                                  state = 0x18;
                                  return;
                                }
                                local11 = 0n;
                                local10 = 0n;
                                state = 0x13;
                                return;
                              }
                              if (0xFFFFFFEE) {
                              } else {
                              }
                              state = 0x1D;
                              return;
                            }
                            state = 0x1D;
                            return;
                          }
                          tmp = vb(0);
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          switch ((address - 0xE0)) {
                                                            case 0: continue loop0;
                                                            case 1: return;
                                                            case 2: return;
                                                            case 3: return;
                                                            case 4: return;
                                                            case 5: return;
                                                            case 6: return;
                                                            case 7: return;
                                                            case 8: return;
                                                            case 9: return;
                                                            case 10: return;
                                                            case 11: return;
                                                            case 12: return;
                                                            case 13: return;
                                                            default: return;
                                                          }
                                                        }
                                                        return;
                                                      }
                                                      return;
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                                return;
                                              }
                                              return;
                                            }
                                            return;
                                          }
                                          return;
                                        }
                                        return;
                                      }
                                      return;
                                    }
                                    return;
                                  }
                                  return;
                                }
                                return;
                              }
                              return;
                            }
                          }
                          state = 0x39;
                          return;
                        }
                        state = 0x35;
                        return;
                      }
                      offset = (offset + 1);
                      if ((offset + 1)) {
                      } else {
                      }
                      state = 0x34;
                      return;
                    }
                    if (offset) {
                    } else {
                    }
                    state = 0x1C;
                    return;
                  }
                  local11 = 0x10000000000n;
                  local10 = 0x100000000n;
                  if (0xFFFFFFBF) {
                  } else {
                  }
                  state = 0x13;
                  return;
                }
                if (0) {
                } else {
                }
                state = 0x1C;
                return;
              }
              address = (offset + 2);
              if ((offset + 2)) {
              } else {
              }
              state = 0x1A;
              return;
            }
            if (0xFFFFFFA0) {
            } else {
            }
            state = 7;
            return;
          }
          local11 = 0x30000000000n;
          state = 0x14;
          return;
        }
        state = 0x34;
        return;
      }
      if (0xC) {
      } else {
      }
      state = 0x21;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func300` implements a state machine that manipulates memory addresses and values using bitwise operations and calls to helper functions `vb`, `Gb`, and `ub`, likely for data processing or encoding. 
  
   */

  function func301() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func302 is encodeUtf8
  /* renamed vars: local2=state, local3=byteResult */
  function encodeUtf8(local0, local1) {
    let Error, Unreachable, byteResult, code, local4, local5, loop0, reached, state;
    state = 1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    switch (state) {
                                      case 0: continue loop0;
                                      case 1: return;
                                      case 2: return;
                                      case 3: return;
                                      case 4: return;
                                      case 5: return;
                                      case 6: return;
                                      case 7: return;
                                      case 8: return;
                                      case 9: return;
                                      case 10: return;
                                      case 11: return;
                                      case 12: return;
                                      case 13: return;
                                      case 14: return;
                                      default: return;
                                    }
                                  }
                                  state = 8;
                                  return;
                                }
                                local5 = ub(sb(byteResult, (((local1 >>> 6) & 0x3F) | 0x80), 1), local0, 8);
                                if (0x80) {
                                } else {
                                }
                                state = 9;
                                return;
                              }
                              byteResult = (ub(0xE, local0, 4) + byteResult);
                              if (0x80) {
                              } else {
                              }
                              state = 5;
                              return;
                            }
                            local4 = 2;
                            state = 0xD;
                            return;
                          }
                          local4 = (0x10000 ? 4 : local1);
                          state = 0xD;
                          return;
                        }
                        state = 8;
                        return;
                      }
                      calculateMemoryOffset(1, 1);
                      byteResult = ub(local4, local0, 8);
                      state = 2;
                      return;
                    }
                    if (0x10000) {
                    } else {
                    }
                    state = 0;
                    return;
                  }
                  return 0;
                }
                if (0x800) {
                } else {
                }
                state = 4;
                return;
              }
              if (0x800) {
              } else {
              }
              state = 0xC;
              return;
            }
            state = 8;
            return;
          }
          state = 8;
          return;
        }
        byteResult = local5;
        if (local4) {
        } else {
        }
        state = 2;
        return;
      }
      local4 = 1;
      state = 0xD;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 6;

  }

  /*
   * AI Summary: The function appears to simulate a state machine, likely for decoding or processing data based on memory lookups using the `ub` function, but its current structure suggests incomplete or obfuscated code resulting in a premature return after initializing a state variable.
  
   */

  function func303() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func304() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func305() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func306() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func307 is initChunk
  /* renamed vars: chunkAddr=local1 */
  function initChunk(local0) {
    let local1, local2, loop0;
    local1 = ((local0 * 0x148) + 0x400);
    if (viewI32_0[(((local0 * 0x148) + 0x400)) / 4]) {
      local2 = ((local0 << 3) + 0x408);
      viewI32_0[(local1) / 4] = 1;
      local0 = (local1 + 8);
      local1 = ((local1 + 8) + 0x140);
      loop0: while (true) {
        if (local1) {
          viewI64_0[(local0) / 8] = viewI64_0[(((((local0 - local2) >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8];
          local0 = (local0 + 1);
          return;
        }
      }
    }

  }

  /*
   * AI Summary: The function `func307` initializes a chunk of memory at an address calculated from the input, copying 8 bytes from a cyclic buffer within a larger data structure to the beginning of the chunk. 
  
   */

  // func308 is dispatchTable
  function dispatchTable(local0, local1, local2) {
    let Error, Unreachable, code, local3, loop0, reached;

    local3 = 1;
    loop0: while (true) {
      {
        {
          {
            switch (local3) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          throw new Error('Unreachable code reached');
        }
        if (local0) {
        } else {
        }
        local3 = 0;
        return;
      }
    }
    table0[ub(local2, local1, 0x10)](2, local0);

  }

  /*
   * AI Summary: The function `func308` conditionally executes a function from a table based on a computed memory address, using inputs `local1` and `local2`, passing `local0` as an argument, if `local0` is falsy. 
  
   */

  // func309 is checkValue
  function checkValue(local0, local1) {
    let Error, Unreachable, code, local2, loop0, reached;

    local2 = 2;
    loop0: while (true) {
      {
        {
          {
            switch (local2) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          throw new Error('Unreachable code reached');
        }
        return Pb(0);
      }
      if (local1) {
      } else {
      }
      local2 = 1;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func309` immediately returns either undefined (if `local2` is 1 or 2 initially) or throws an error.
  
   */

  // func310 is allocateAndCopy
  function allocateAndCopy(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, local6, local7, loop0, reached;

    local5 = 6;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          switch (local5) {
                            case 0: continue loop0;
                            case 1: return;
                            case 2: return;
                            case 3: return;
                            case 4: return;
                            case 5: return;
                            case 6: return;
                            case 7: return;
                            case 8: return;
                            case 9: return;
                            default: return;
                          }
                        }
                        func210(local1, (local6 + 4));
                        local3 = 1;
                        local5 = 8;
                        return;
                      }
                      local5 = 7;
                      return;
                    }
                    local3 = (local3 + 1);
                    if (local4) {
                    } else {
                    }
                    local5 = 4;
                    return;
                  }
                  local3 = ub(1, local1, 0x14);
                  local4 = ub(ub(1, local1, 0x14), local1, 0x10);
                  if (ub(ub(1, local1, 0x14), local1, 0x10)) {
                  } else {
                  }
                  local5 = 7;
                  return;
                }
                Gb((local3 + local7), 0);
                if (0xA) {
                } else {
                }
                local5 = 7;
                return;
              }
              if (local4) {
              } else {
              }
              local5 = 3;
              return;
            }
            local6 = (global0 - 0x10);
            global0 = (global0 - 0x10);
            if (local3) {
            } else {
            }
            local5 = 5;
            return;
          }
          Qb(Pb(0x14), local3, 217, 2, 0, 3, local0, (local2 ? 0n : 0x8000000000000000n), 8);
          local3 = 0;
          local5 = 8;
          return;
        }
        global0 = (local6 + 0x10);
        return Pb(0);
      }
      local7 = ub(local3, local1, 0xC);
      local5 = 4;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function manipulates memory and global state based on several inputs, utilizing helper functions to perform bitwise operations and memory access, ultimately returning different values based on a switch controlled by conditional logic and function calls. 
  
   */

  function func311() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func312 is handleResize
  function handleResize(local0, local1, local2, local3) {
    let Error, Unreachable, code, local4, local5, loop0, reached;

    local4 = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    switch (local4) {
                                      case 0: continue loop0;
                                      case 1: return;
                                      case 2: return;
                                      case 3: return;
                                      case 4: return;
                                      case 5: return;
                                      case 6: return;
                                      case 7: return;
                                      case 8: return;
                                      case 9: return;
                                      case 10: return;
                                      case 11: return;
                                      case 12: return;
                                      case 13: return;
                                      case 14: return;
                                      default: return;
                                    }
                                  }
                                  return Pb(0);
                                }
                                Gb(0, 0x10FC88);
                                local4 = 0xA;
                                return;
                              }
                              local4 = (0 ? 9 : local2);
                              return;
                            }
                            local4 = (local3 ? 0xC : 0);
                            return;
                          }
                          Gb(0, 0x10FC88);
                          local4 = 0xA;
                          return;
                        }
                        local3 = func125(local2);
                        local4 = 3;
                        return;
                      }
                      local3 = local1;
                      local4 = 3;
                      return;
                    }
                    local5 = ub(0xE, local3, 8);
                    local4 = (ub(0xE, local3, 8) ? local1 : 5);
                    return;
                  }
                  local4 = (ub(0xD, local3, 4) ? local5 : 7);
                  return;
                }
                return Pb(0);
              }
              local3 = func213(1, local2, local1);
              local4 = 3;
              return;
            }
            local3 = local1;
            local4 = 3;
            return;
          }
          return Pb(0);
        }
        local4 = (local2 ? 4 : 0xB);
        return;
      }
      local4 = (local2 ? 1 : 6);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func312` acts as a dispatcher, immediately returning based on the initial value of `local4` or redirecting execution based on conditional checks of input parameters and the results of memory-related operations performed by helper functions (`ub`, `Gb`, `func125`).
  
   */

  function func313() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func314(local0, local1) {


  }


  function func315() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v2;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v2 */
  }


  function func316() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func317() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func318() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func319 is Kb
  function Kb() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func320() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func321 is processBuffer
  /* renamed vars: local1=state, local2=ptr, local3=count, local4=size, local5=length, local6=buffer, local7=temp1, local8=temp2 */
  function processBuffer(local0) {
    let Error, Sb, Unreachable, buffer, code, count, length, local9, loop0, ptr, reached, size, state, temp1, temp2;
    state = 0x35;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                {
                                                                                                                                                  {
                                                                                                                                                    {
                                                                                                                                                      {
                                                                                                                                                        {
                                                                                                                                                          {
                                                                                                                                                            {
                                                                                                                                                              {
                                                                                                                                                                {
                                                                                                                                                                  {
                                                                                                                                                                    {
                                                                                                                                                                      {
                                                                                                                                                                        {
                                                                                                                                                                          {
                                                                                                                                                                            {
                                                                                                                                                                              {
                                                                                                                                                                                {
                                                                                                                                                                                  {
                                                                                                                                                                                    {
                                                                                                                                                                                      {
                                                                                                                                                                                        {
                                                                                                                                                                                          {
                                                                                                                                                                                            {
                                                                                                                                                                                              {
                                                                                                                                                                                                {
                                                                                                                                                                                                  {
                                                                                                                                                                                                    {
                                                                                                                                                                                                      {
                                                                                                                                                                                                        {
                                                                                                                                                                                                          {
                                                                                                                                                                                                            {
                                                                                                                                                                                                              {
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                    switch (state) {
                                                                                                                                                                                                                                                                                      case 0: continue loop0;
                                                                                                                                                                                                                                                                                      case 1: return;
                                                                                                                                                                                                                                                                                      case 2: return;
                                                                                                                                                                                                                                                                                      case 3: return;
                                                                                                                                                                                                                                                                                      case 4: return;
                                                                                                                                                                                                                                                                                      case 5: return;
                                                                                                                                                                                                                                                                                      case 6: return;
                                                                                                                                                                                                                                                                                      case 7: return;
                                                                                                                                                                                                                                                                                      case 8: return;
                                                                                                                                                                                                                                                                                      case 9: return;
                                                                                                                                                                                                                                                                                      case 10: return;
                                                                                                                                                                                                                                                                                      case 11: return;
                                                                                                                                                                                                                                                                                      case 12: return;
                                                                                                                                                                                                                                                                                      case 13: return;
                                                                                                                                                                                                                                                                                      case 14: return;
                                                                                                                                                                                                                                                                                      case 15: return;
                                                                                                                                                                                                                                                                                      case 16: return;
                                                                                                                                                                                                                                                                                      case 17: return;
                                                                                                                                                                                                                                                                                      case 18: return;
                                                                                                                                                                                                                                                                                      case 19: return;
                                                                                                                                                                                                                                                                                      case 20: return;
                                                                                                                                                                                                                                                                                      case 21: return;
                                                                                                                                                                                                                                                                                      case 22: return;
                                                                                                                                                                                                                                                                                      case 23: return;
                                                                                                                                                                                                                                                                                      case 24: return;
                                                                                                                                                                                                                                                                                      case 25: return;
                                                                                                                                                                                                                                                                                      case 26: return;
                                                                                                                                                                                                                                                                                      case 27: return;
                                                                                                                                                                                                                                                                                      case 28: return;
                                                                                                                                                                                                                                                                                      case 29: return;
                                                                                                                                                                                                                                                                                      case 30: return;
                                                                                                                                                                                                                                                                                      case 31: return;
                                                                                                                                                                                                                                                                                      case 32: return;
                                                                                                                                                                                                                                                                                      case 33: return;
                                                                                                                                                                                                                                                                                      case 34: return;
                                                                                                                                                                                                                                                                                      case 35: return;
                                                                                                                                                                                                                                                                                      case 36: return;
                                                                                                                                                                                                                                                                                      case 37: return;
                                                                                                                                                                                                                                                                                      case 38: return;
                                                                                                                                                                                                                                                                                      case 39: return;
                                                                                                                                                                                                                                                                                      case 40: return;
                                                                                                                                                                                                                                                                                      case 41: return;
                                                                                                                                                                                                                                                                                      case 42: return;
                                                                                                                                                                                                                                                                                      case 43: return;
                                                                                                                                                                                                                                                                                      case 44: return;
                                                                                                                                                                                                                                                                                      case 45: return;
                                                                                                                                                                                                                                                                                      case 46: return;
                                                                                                                                                                                                                                                                                      case 47: return;
                                                                                                                                                                                                                                                                                      case 48: return;
                                                                                                                                                                                                                                                                                      case 49: return;
                                                                                                                                                                                                                                                                                      case 50: return;
                                                                                                                                                                                                                                                                                      case 51: return;
                                                                                                                                                                                                                                                                                      case 52: return;
                                                                                                                                                                                                                                                                                      case 53: return;
                                                                                                                                                                                                                                                                                      case 54: return;
                                                                                                                                                                                                                                                                                      case 55: return;
                                                                                                                                                                                                                                                                                      case 56: return;
                                                                                                                                                                                                                                                                                      case 57: return;
                                                                                                                                                                                                                                                                                      case 58: return;
                                                                                                                                                                                                                                                                                      case 59: return;
                                                                                                                                                                                                                                                                                      case 60: return;
                                                                                                                                                                                                                                                                                      case 61: return;
                                                                                                                                                                                                                                                                                      case 62: return;
                                                                                                                                                                                                                                                                                      case 63: return;
                                                                                                                                                                                                                                                                                      case 64: return;
                                                                                                                                                                                                                                                                                      case 65: return;
                                                                                                                                                                                                                                                                                      case 66: return;
                                                                                                                                                                                                                                                                                      case 67: return;
                                                                                                                                                                                                                                                                                      case 68: return;
                                                                                                                                                                                                                                                                                      case 69: return;
                                                                                                                                                                                                                                                                                      case 70: return;
                                                                                                                                                                                                                                                                                      case 71: return;
                                                                                                                                                                                                                                                                                      case 72: return;
                                                                                                                                                                                                                                                                                      case 73: return;
                                                                                                                                                                                                                                                                                      case 74: return;
                                                                                                                                                                                                                                                                                      case 75: return;
                                                                                                                                                                                                                                                                                      case 76: return;
                                                                                                                                                                                                                                                                                      case 77: return;
                                                                                                                                                                                                                                                                                      case 78: return;
                                                                                                                                                                                                                                                                                      case 79: return;
                                                                                                                                                                                                                                                                                      case 80: return;
                                                                                                                                                                                                                                                                                      case 81: return;
                                                                                                                                                                                                                                                                                      case 82: return;
                                                                                                                                                                                                                                                                                      case 83: return;
                                                                                                                                                                                                                                                                                      case 84: return;
                                                                                                                                                                                                                                                                                      case 85: return;
                                                                                                                                                                                                                                                                                      case 86: return;
                                                                                                                                                                                                                                                                                      case 87: return;
                                                                                                                                                                                                                                                                                      case 88: return;
                                                                                                                                                                                                                                                                                      case 89: return;
                                                                                                                                                                                                                                                                                      case 90: return;
                                                                                                                                                                                                                                                                                      case 91: return;
                                                                                                                                                                                                                                                                                      case 92: return;
                                                                                                                                                                                                                                                                                      case 93: return;
                                                                                                                                                                                                                                                                                      case 94: return;
                                                                                                                                                                                                                                                                                      case 95: return;
                                                                                                                                                                                                                                                                                      case 96: return;
                                                                                                                                                                                                                                                                                      case 97: return;
                                                                                                                                                                                                                                                                                      case 98: return;
                                                                                                                                                                                                                                                                                      case 99: return;
                                                                                                                                                                                                                                                                                      case 100: return;
                                                                                                                                                                                                                                                                                      case 101: return;
                                                                                                                                                                                                                                                                                      case 102: return;
                                                                                                                                                                                                                                                                                      case 103: return;
                                                                                                                                                                                                                                                                                      case 104: return;
                                                                                                                                                                                                                                                                                      case 105: return;
                                                                                                                                                                                                                                                                                      case 106: return;
                                                                                                                                                                                                                                                                                      case 107: return;
                                                                                                                                                                                                                                                                                      case 108: return;
                                                                                                                                                                                                                                                                                      case 109: return;
                                                                                                                                                                                                                                                                                      case 110: return;
                                                                                                                                                                                                                                                                                      case 111: return;
                                                                                                                                                                                                                                                                                      case 112: return;
                                                                                                                                                                                                                                                                                      case 113: return;
                                                                                                                                                                                                                                                                                      case 114: return;
                                                                                                                                                                                                                                                                                      case 115: return;
                                                                                                                                                                                                                                                                                      case 116: return;
                                                                                                                                                                                                                                                                                      case 117: return;
                                                                                                                                                                                                                                                                                      case 118: return;
                                                                                                                                                                                                                                                                                      case 119: return;
                                                                                                                                                                                                                                                                                      case 120: return;
                                                                                                                                                                                                                                                                                      case 121: return;
                                                                                                                                                                                                                                                                                      case 122: return;
                                                                                                                                                                                                                                                                                      case 123: return;
                                                                                                                                                                                                                                                                                      case 124: return;
                                                                                                                                                                                                                                                                                      case 125: return;
                                                                                                                                                                                                                                                                                      case 126: return;
                                                                                                                                                                                                                                                                                      case 127: return;
                                                                                                                                                                                                                                                                                      case 128: return;
                                                                                                                                                                                                                                                                                      case 129: return;
                                                                                                                                                                                                                                                                                      case 130: return;
                                                                                                                                                                                                                                                                                      case 131: return;
                                                                                                                                                                                                                                                                                      case 132: return;
                                                                                                                                                                                                                                                                                      case 133: return;
                                                                                                                                                                                                                                                                                      case 134: return;
                                                                                                                                                                                                                                                                                      default: return;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  state = 0x5C;
                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                state = (size ? 0x6B : count);
                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              local0 = 0;
                                                                                                                                                                                                                                                                              count = 1;
                                                                                                                                                                                                                                                                              state = 0x4B;
                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            state = (temp1 ? 0x36 : size);
                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          state = 0x37;
                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        state = 0x69;
                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      state = (size ? 0x4F : 0x28);
                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    state = 0x21;
                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  calculateChecksum(local0, (buffer + 0x14));
                                                                                                                                                                                                                                                                  ptr = Pb(0x14);
                                                                                                                                                                                                                                                                  state = 0x5A;
                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                count = 0;
                                                                                                                                                                                                                                                                local0 = 1;
                                                                                                                                                                                                                                                                state = 0x3E;
                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              count = 0;
                                                                                                                                                                                                                                                              state = 0x69;
                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            size = (size & 0xFFFFFFFC);
                                                                                                                                                                                                                                                            local0 = 1;
                                                                                                                                                                                                                                                            count = 0;
                                                                                                                                                                                                                                                            state = 0x4D;
                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          state = 0x4B;
                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        ptr = ub(0x14, local0, 0);
                                                                                                                                                                                                                                                        length = (count & 3);
                                                                                                                                                                                                                                                        state = (4 ? 0x2A : count);
                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      Gb(ptr, 0);
                                                                                                                                                                                                                                                      size = 0xA;
                                                                                                                                                                                                                                                      local0 = (0xA ? 0 : (local0 + 1));
                                                                                                                                                                                                                                                      ptr = (ptr + 1);
                                                                                                                                                                                                                                                      count = (count + size);
                                                                                                                                                                                                                                                      length = (length - 1);
                                                                                                                                                                                                                                                      state = ((length - 1) ? 0xE : 0x1C);
                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    count = (length + 2);
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                Gb((ptr + temp1), 0);
                                                                                                                                                                                                                                                                                                                                                                                                                                switch ((Pb(8) - 0x22)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 0: continue loop0;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 1: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 2: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 3: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 4: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 5: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 6: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 7: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 8: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 9: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 10: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 11: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 12: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 13: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 14: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 15: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 16: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 17: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 18: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 19: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 20: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 21: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 22: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 23: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 24: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 25: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 26: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 27: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 28: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 29: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 30: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 31: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 32: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 33: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 34: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 35: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 36: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 37: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 38: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 39: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 40: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 41: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 42: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 43: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 44: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 45: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 46: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 47: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 48: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 49: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 50: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 51: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 52: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 53: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 54: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 55: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 56: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 57: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 58: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 59: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 60: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 61: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 62: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 63: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 64: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 65: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 66: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 67: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 68: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 69: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 70: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 71: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 72: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 73: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 74: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 75: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 76: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 77: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 78: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 79: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 80: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 81: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 82: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  case 83: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  default: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    state = 0x66;
                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  state = 6;
                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                size = ub(0x82, local0, 4);
                                                                                                                                                                                                                                                count = ub(0x23, local0, 8);
                                                                                                                                                                                                                                                state = (0xFFEF0800 ? 0x23 : ((length ^ 0xD800) - 0x110000));
                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              state = 0x41;
                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            state = (length ? 0x7F : 0x78);
                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          ptr = func145(local0);
                                                                                                                                                                                                                                          state = 0x5A;
                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        state = (count ? 0x3C : 0x18);
                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      state = 0x28;
                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    count = 1;
                                                                                                                                                                                                                                    local0 = 0;
                                                                                                                                                                                                                                    state = 0x6F;
                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  count = 1;
                                                                                                                                                                                                                                  local0 = 0;
                                                                                                                                                                                                                                  state = 0x30;
                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                Gb(ptr, 0);
                                                                                                                                                                                                                                temp1 = 0xA;
                                                                                                                                                                                                                                Gb((ptr + 1), 0);
                                                                                                                                                                                                                                state = 0xA;
                                                                                                                                                                                                                                Gb((ptr + 2), 0);
                                                                                                                                                                                                                                temp2 = 0xA;
                                                                                                                                                                                                                                Gb((ptr + 3), 0);
                                                                                                                                                                                                                                local9 = 0xA;
                                                                                                                                                                                                                                local0 = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (local0 + 4)))));
                                                                                                                                                                                                                                count = ((((count + temp1) + state) + temp2) + local9);
                                                                                                                                                                                                                                ptr = (ptr + 4);
                                                                                                                                                                                                                                size = (size - 4);
                                                                                                                                                                                                                                state = ((size - 4) ? 0x19 : 4);
                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              length = ((((ptr + 0x2400) & 0xFFFF) + (((length + 0x2800) & 0xFFFF) << 0xA)) + 0x10000);
                                                                                                                                                                                                                              state = 0x11;
                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            ptr = func145(local0);
                                                                                                                                                                                                                            state = 0x5A;
                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          state = 0x14;
                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        count = 0;
                                                                                                                                                                                                                        local0 = 1;
                                                                                                                                                                                                                        state = 0x13;
                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      state = 0x20;
                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    Gb(ptr, 0);
                                                                                                                                                                                                                    size = 0xA;
                                                                                                                                                                                                                    local0 = (0xA ? 0 : (local0 + 1));
                                                                                                                                                                                                                    ptr = (ptr + 1);
                                                                                                                                                                                                                    count = (count + size);
                                                                                                                                                                                                                    length = (length - 1);
                                                                                                                                                                                                                    state = ((length - 1) ? 0x1F : 0x27);
                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  state = (size ? 0x6D : count);
                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                ptr = func145(count);
                                                                                                                                                                                                                state = 0x5A;
                                                                                                                                                                                                                return;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              Gb(ptr, 0);
                                                                                                                                                                                                              temp1 = 0xA;
                                                                                                                                                                                                              Gb((ptr + 1), 0);
                                                                                                                                                                                                              state = 0xA;
                                                                                                                                                                                                              Gb((ptr + 2), 0);
                                                                                                                                                                                                              temp2 = 0xA;
                                                                                                                                                                                                              Gb((ptr + 3), 0);
                                                                                                                                                                                                              local9 = 0xA;
                                                                                                                                                                                                              local0 = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (local0 + 4)))));
                                                                                                                                                                                                              count = ((((count + temp1) + state) + temp2) + local9);
                                                                                                                                                                                                              ptr = (ptr + 4);
                                                                                                                                                                                                              size = (size - 4);
                                                                                                                                                                                                              state = ((size - 4) ? 0x22 : 0xC);
                                                                                                                                                                                                              return;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            state = (size ? 0x6C : count);
                                                                                                                                                                                                            return;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          count = ub(0x7A, local0, 8);
                                                                                                                                                                                                          temp1 = ub(ub(0x7A, local0, 8), local0, 4);
                                                                                                                                                                                                          state = (ub(ub(0x7A, local0, 8), local0, 4) ? 0x1E : 0x33);
                                                                                                                                                                                                          return;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        length = (length & 0xFFFFFFFC);
                                                                                                                                                                                                        count = 1;
                                                                                                                                                                                                        local0 = 0;
                                                                                                                                                                                                        state = 0x43;
                                                                                                                                                                                                        return;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      length = (temp1 & 0xFFFFFFFC);
                                                                                                                                                                                                      local0 = 1;
                                                                                                                                                                                                      count = 0;
                                                                                                                                                                                                      state = 0x5F;
                                                                                                                                                                                                      return;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    state = 0x30;
                                                                                                                                                                                                    return;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  ptr = func145(local0);
                                                                                                                                                                                                  state = 0x5A;
                                                                                                                                                                                                  return;
                                                                                                                                                                                                }
                                                                                                                                                                                                throw new Error('Unreachable code reached');
                                                                                                                                                                                              }
                                                                                                                                                                                              size = (count & 0xFFFFFFFC);
                                                                                                                                                                                              count = 1;
                                                                                                                                                                                              local0 = 0;
                                                                                                                                                                                              state = 0x22;
                                                                                                                                                                                              return;
                                                                                                                                                                                            }
                                                                                                                                                                                            throw new Error('Unreachable code reached');
                                                                                                                                                                                          }
                                                                                                                                                                                          ptr = ub(count, local0, 0);
                                                                                                                                                                                          length = (count & 3);
                                                                                                                                                                                          state = (4 ? 0x5B : count);
                                                                                                                                                                                          return;
                                                                                                                                                                                        }
                                                                                                                                                                                        state = (length ? 0 : 0x1B);
                                                                                                                                                                                        return;
                                                                                                                                                                                      }
                                                                                                                                                                                      state = (count ? 0x2C : 0x85);
                                                                                                                                                                                      return;
                                                                                                                                                                                    }
                                                                                                                                                                                    local0 = 0;
                                                                                                                                                                                    count = 1;
                                                                                                                                                                                    state = 0x2D;
                                                                                                                                                                                    return;
                                                                                                                                                                                  }
                                                                                                                                                                                  ptr = func145(local0);
                                                                                                                                                                                  state = 0x5A;
                                                                                                                                                                                  return;
                                                                                                                                                                                }
                                                                                                                                                                                length = (size & 3);
                                                                                                                                                                                state = (3 ? 0xB : count);
                                                                                                                                                                                return;
                                                                                                                                                                              }
                                                                                                                                                                              state = 0x6F;
                                                                                                                                                                              return;
                                                                                                                                                                            }
                                                                                                                                                                            state = (temp1 ? 0x29 : count);
                                                                                                                                                                            return;
                                                                                                                                                                          }
                                                                                                                                                                          state = 0x62;
                                                                                                                                                                          return;
                                                                                                                                                                        }
                                                                                                                                                                        buffer = (global0 - 0x20);
                                                                                                                                                                        global0 = (global0 - 0x20);
                                                                                                                                                                        count = ub(0x20, local0, 8);
                                                                                                                                                                        size = ub(ub(0x20, local0, 8), local0, 4);
                                                                                                                                                                        state = (ub(ub(0x20, local0, 8), local0, 4) ? 0x80 : 0x45);
                                                                                                                                                                        return;
                                                                                                                                                                      }
                                                                                                                                                                      Gb((ptr + size), 0);
                                                                                                                                                                      state = (0x75 ? 0x48 : 8);
                                                                                                                                                                      return;
                                                                                                                                                                    }
                                                                                                                                                                    state = (length ? 0x4C : 0x30);
                                                                                                                                                                    return;
                                                                                                                                                                  }
                                                                                                                                                                  count = 1;
                                                                                                                                                                  local0 = 0;
                                                                                                                                                                  state = 0x28;
                                                                                                                                                                  return;
                                                                                                                                                                }
                                                                                                                                                                ptr = ub(Pb(8), buffer, 0x18);
                                                                                                                                                                state = 0x5A;
                                                                                                                                                                return;
                                                                                                                                                              }
                                                                                                                                                              local0 = 0;
                                                                                                                                                              count = 1;
                                                                                                                                                              state = 0x37;
                                                                                                                                                              return;
                                                                                                                                                            }
                                                                                                                                                            state = 0x2D;
                                                                                                                                                            return;
                                                                                                                                                          }
                                                                                                                                                          ptr = ub((count + 2), local0, 0);
                                                                                                                                                          length = (count & 3);
                                                                                                                                                          state = (4 ? 0x75 : count);
                                                                                                                                                          return;
                                                                                                                                                        }
                                                                                                                                                        state = (length ? 0x7D : 0x38);
                                                                                                                                                        return;
                                                                                                                                                      }
                                                                                                                                                      state = (size ? 0x40 : 0x7E);
                                                                                                                                                      return;
                                                                                                                                                    }
                                                                                                                                                    ptr = 0;
                                                                                                                                                    state = 0x5A;
                                                                                                                                                    return;
                                                                                                                                                  }
                                                                                                                                                  state = 0x81;
                                                                                                                                                  return;
                                                                                                                                                }
                                                                                                                                                Gb(ptr, 0);
                                                                                                                                                length = 0xA;
                                                                                                                                                count = (0xA ? 0 : (count + 1));
                                                                                                                                                ptr = (ptr + 1);
                                                                                                                                                local0 = (local0 + length);
                                                                                                                                                size = (size - 1);
                                                                                                                                                state = ((size - 1) ? 0x41 : 0x68);
                                                                                                                                                return;
                                                                                                                                              }
                                                                                                                                              size = (count & 0xFFFFFFFC);
                                                                                                                                              count = 1;
                                                                                                                                              local0 = 0;
                                                                                                                                              state = 0x46;
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            Gb(ptr, 0);
                                                                                                                                            temp1 = 0xA;
                                                                                                                                            Gb((ptr + 1), 0);
                                                                                                                                            state = 0xA;
                                                                                                                                            Gb((ptr + 2), 0);
                                                                                                                                            temp2 = 0xA;
                                                                                                                                            Gb((ptr + 3), 0);
                                                                                                                                            local9 = 0xA;
                                                                                                                                            local0 = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (local0 + 4)))));
                                                                                                                                            count = ((((count + temp1) + state) + temp2) + local9);
                                                                                                                                            ptr = (ptr + 4);
                                                                                                                                            length = (length - 4);
                                                                                                                                            state = ((length - 4) ? 0x43 : 0x10);
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          Gb(ptr, 0);
                                                                                                                                          temp1 = 0xA;
                                                                                                                                          Gb((ptr + 1), 0);
                                                                                                                                          state = 0xA;
                                                                                                                                          Gb((ptr + 2), 0);
                                                                                                                                          temp2 = 0xA;
                                                                                                                                          Gb((ptr + 3), 0);
                                                                                                                                          local9 = 0xA;
                                                                                                                                          count = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (count + 4)))));
                                                                                                                                          local0 = ((((local0 + temp1) + state) + temp2) + local9);
                                                                                                                                          ptr = (ptr + 4);
                                                                                                                                          length = (length - 4);
                                                                                                                                          state = ((length - 4) ? 0x44 : 5);
                                                                                                                                          return;
                                                                                                                                        }
                                                                                                                                        state = 0x6C;
                                                                                                                                        return;
                                                                                                                                      }
                                                                                                                                      Gb(ptr, 0);
                                                                                                                                      temp1 = 0xA;
                                                                                                                                      Gb((ptr + 1), 0);
                                                                                                                                      state = 0xA;
                                                                                                                                      Gb((ptr + 2), 0);
                                                                                                                                      temp2 = 0xA;
                                                                                                                                      Gb((ptr + 3), 0);
                                                                                                                                      local9 = 0xA;
                                                                                                                                      local0 = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (local0 + 4)))));
                                                                                                                                      count = ((((count + temp1) + state) + temp2) + local9);
                                                                                                                                      ptr = (ptr + 4);
                                                                                                                                      size = (size - 4);
                                                                                                                                      state = ((size - 4) ? 0x46 : 0x34);
                                                                                                                                      return;
                                                                                                                                    }
                                                                                                                                    state = 0x54;
                                                                                                                                    return;
                                                                                                                                  }
                                                                                                                                  processMemoryChunks((buffer + 0x14), local0);
                                                                                                                                  state = (Sb(Pb(8), 0x39, 0x64, buffer, 0x14) ? local0 : (length + 1));
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                temp1 = (length + 1);
                                                                                                                                state = (temp1 ? 0xF : size);
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              state = 0xE;
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            state = (length ? 0x4A : 0x14);
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          state = 0x1F;
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        Gb(ptr, 0);
                                                                                                                        temp1 = 0xA;
                                                                                                                        Gb((ptr + 1), 0);
                                                                                                                        state = 0xA;
                                                                                                                        Gb((ptr + 2), 0);
                                                                                                                        temp2 = 0xA;
                                                                                                                        Gb((ptr + 3), 0);
                                                                                                                        local9 = 0xA;
                                                                                                                        count = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (count + 4)))));
                                                                                                                        local0 = ((((local0 + temp1) + state) + temp2) + local9);
                                                                                                                        ptr = (ptr + 4);
                                                                                                                        size = (size - 4);
                                                                                                                        state = ((size - 4) ? 0x4D : 0x7C);
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      state = 0x53;
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    state = 0x79;
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  count = 1;
                                                                                                                  local0 = 0;
                                                                                                                  state = 0x14;
                                                                                                                  return;
                                                                                                                }
                                                                                                                local0 = 0;
                                                                                                                count = 1;
                                                                                                                state = 6;
                                                                                                                return;
                                                                                                              }
                                                                                                              length = Sb(0x83, 0x63, 0x24, buffer, 0xE);
                                                                                                              ptr = (Sb(0x83, 0x63, 0x24, buffer, 0xE) & 0xFC00);
                                                                                                              state = (0xD800 ? Pb(8) : (Sb(0x83, 0x63, 0x24, buffer, 0xE) & 0xFC00));
                                                                                                              return;
                                                                                                            }
                                                                                                            Gb(ptr, 0);
                                                                                                            size = 0xA;
                                                                                                            local0 = (0xA ? 0 : (local0 + 1));
                                                                                                            ptr = (ptr + 1);
                                                                                                            count = (count + size);
                                                                                                            length = (length - 1);
                                                                                                            state = ((length - 1) ? 0x53 : 0x32);
                                                                                                            return;
                                                                                                          }
                                                                                                          Gb(ptr, 0);
                                                                                                          size = 0xA;
                                                                                                          count = (0xA ? 0 : (count + 1));
                                                                                                          ptr = (ptr + 1);
                                                                                                          local0 = (local0 + size);
                                                                                                          length = (length - 1);
                                                                                                          state = ((length - 1) ? 0x54 : 7);
                                                                                                          return;
                                                                                                        }
                                                                                                        Gb(ptr, 0);
                                                                                                        temp1 = 0xA;
                                                                                                        Gb((ptr + 1), 0);
                                                                                                        state = 0xA;
                                                                                                        Gb((ptr + 2), 0);
                                                                                                        temp2 = 0xA;
                                                                                                        Gb((ptr + 3), 0);
                                                                                                        local9 = 0xA;
                                                                                                        local0 = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (local0 + 4)))));
                                                                                                        count = ((((count + temp1) + state) + temp2) + local9);
                                                                                                        ptr = (ptr + 4);
                                                                                                        size = (size - 4);
                                                                                                        state = ((size - 4) ? 0x55 : 0x3B);
                                                                                                        return;
                                                                                                      }
                                                                                                      state = 0x1B;
                                                                                                      return;
                                                                                                    }
                                                                                                    state = (count ? 0xD : 0x50);
                                                                                                    return;
                                                                                                  }
                                                                                                  size = (size & 0xFFFFFFFC);
                                                                                                  local0 = 1;
                                                                                                  count = 0;
                                                                                                  state = 0x84;
                                                                                                  return;
                                                                                                }
                                                                                                ptr = ub(Pb(0x14), buffer, 0x10);
                                                                                                state = 0x5A;
                                                                                                return;
                                                                                              }
                                                                                              global0 = (buffer + 0x20);
                                                                                              return ptr;
                                                                                            }
                                                                                            size = (count & 0xFFFFFFFC);
                                                                                            count = 1;
                                                                                            local0 = 0;
                                                                                            state = 0x55;
                                                                                            return;
                                                                                          }
                                                                                          Gb(ptr, 0);
                                                                                          size = 0xA;
                                                                                          local0 = (0xA ? 0 : (local0 + 1));
                                                                                          ptr = (ptr + 1);
                                                                                          count = (count + size);
                                                                                          length = (length - 1);
                                                                                          state = ((length - 1) ? 0x5C : 0x56);
                                                                                          return;
                                                                                        }
                                                                                        length = (count & 0xFFFFFFFC);
                                                                                        local0 = 1;
                                                                                        count = 0;
                                                                                        state = 0x44;
                                                                                        return;
                                                                                      }
                                                                                      state = (length ? 0x47 : 0x21);
                                                                                      return;
                                                                                    }
                                                                                    Gb(ptr, 0);
                                                                                    temp1 = 0xA;
                                                                                    Gb((ptr + 1), 0);
                                                                                    state = 0xA;
                                                                                    Gb((ptr + 2), 0);
                                                                                    temp2 = 0xA;
                                                                                    Gb((ptr + 3), 0);
                                                                                    local9 = 0xA;
                                                                                    count = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (count + 4)))));
                                                                                    local0 = ((((local0 + temp1) + state) + temp2) + local9);
                                                                                    ptr = (ptr + 4);
                                                                                    length = (length - 4);
                                                                                    state = ((length - 4) ? 0x5F : 0x73);
                                                                                    return;
                                                                                  }
                                                                                  state = (0x22 ? 0x3F : count);
                                                                                  return;
                                                                                }
                                                                                length = (size & 3);
                                                                                state = (3 ? 0x58 : count);
                                                                                return;
                                                                              }
                                                                              state = (length ? 0x4E : 0x6F);
                                                                              return;
                                                                            }
                                                                            state = (0xDC00 ? 0x11 : ptr);
                                                                            return;
                                                                          }
                                                                          ptr = Sb(0x6A, 0x67, 0x1A, buffer, 0x16);
                                                                          state = (0xFBFF ? 0x1D : ((Sb(0x6A, 0x67, 0x1A, buffer, 0x16) - 0xFFFFE000) & 0xFFFF));
                                                                          return;
                                                                        }
                                                                        count = 0;
                                                                        local0 = 1;
                                                                        state = 0x5E;
                                                                        return;
                                                                      }
                                                                      size = (count & 3);
                                                                      local0 = 1;
                                                                      state = (3 ? 0x5D : (length + 1));
                                                                      return;
                                                                    }
                                                                    calculateChecksum(local0, (buffer + 0x14));
                                                                    ptr = Pb(0x14);
                                                                    state = 0x5A;
                                                                    return;
                                                                  }
                                                                  state = 0x70;
                                                                  return;
                                                                }
                                                                state = (size ? 0x12 : 0x70);
                                                                return;
                                                              }
                                                              count = ub(Pb(0x14), local0, 8);
                                                              ptr = ub(count, local0, 4);
                                                              state = (ub(count, local0, 4) ? 0x2E : 0x2B);
                                                              return;
                                                            }
                                                            throw new Error('Unreachable code reached');
                                                          }
                                                          ptr = ub(0x6E, local0, 0);
                                                          length = count;
                                                          Gb((ub(0x6E, local0, 0) + count), 0);
                                                          count = 0x76;
                                                          Gb(1080758, 0);
                                                          state = (0x11 ? 0x11 : buffer);
                                                          return;
                                                        }
                                                        throw new Error('Unreachable code reached');
                                                      }
                                                      count = (length + 1);
                                                      state = 0x23;
                                                      return;
                                                    }
                                                    ptr = func145(local0);
                                                    state = 0x5A;
                                                    return;
                                                  }
                                                  ptr = func145(count);
                                                  state = 0x5A;
                                                  return;
                                                }
                                                local0 = 0;
                                                count = 1;
                                                state = 0x62;
                                                return;
                                              }
                                              state = 0x78;
                                              return;
                                            }
                                            state = 0x3E;
                                            return;
                                          }
                                          ptr = ub(local0, local0, 0);
                                          length = (count & 3);
                                          state = (4 ? 0x42 : count);
                                          return;
                                        }
                                        size = (count & 0xFFFFFFFC);
                                        count = 1;
                                        local0 = 0;
                                        state = 0x19;
                                        return;
                                      }
                                      state = (0x5C ? 0x49 : count);
                                      return;
                                    }
                                    state = 0x13;
                                    return;
                                  }
                                  ptr = func145(count);
                                  state = 0x5A;
                                  return;
                                }
                                Gb(ptr, 0);
                                length = 0xA;
                                local0 = (0xA ? 0 : (local0 + 1));
                                ptr = (ptr + 1);
                                count = (count + length);
                                size = (size - 1);
                                state = ((size - 1) ? 0x79 : 0x16);
                                return;
                              }
                              size = (count + 1);
                              ptr = ub(count, local0, 0);
                              Gb((0x61 + ub(count, local0, 0)), 0);
                              state = (0x5C ? Pb(8) : 3);
                              return;
                            }
                            state = 0x7E;
                            return;
                          }
                          state = 0x5E;
                          return;
                        }
                        size = (length & 3);
                        state = (4 ? 0x25 : length);
                        return;
                      }
                      ptr = func145(count);
                      state = 0x5A;
                      return;
                    }
                    state = 0x86;
                    return;
                  }
                  state = (count ? 0x74 : 0x17);
                  return;
                }
                Gb(ptr, 0);
                length = 0xA;
                count = (0xA ? 0 : (count + 1));
                ptr = (ptr + 1);
                local0 = (local0 + length);
                size = (size - 1);
                state = ((size - 1) ? 0x81 : 0x7B);
                return;
              }
              processMemoryChunks((buffer + 0xC), local0);
              state = (1 ? (buffer + 0x14) : Sb(local0, 0x59, 0x52, buffer, 0xC));
              return;
            }
            size = (temp1 & 3);
            state = (3 ? 0x26 : length);
            return;
          }
          Gb(ptr, 0);
          temp1 = 0xA;
          Gb((ptr + 1), 0);
          state = 0xA;
          Gb((ptr + 2), 0);
          temp2 = 0xA;
          Gb((ptr + 3), 0);
          local9 = 0xA;
          count = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (count + 4)))));
          local0 = ((((local0 + temp1) + state) + temp2) + local9);
          ptr = (ptr + 4);
          size = (size - 4);
          state = ((size - 4) ? 0x84 : 0x77);
          return;
        }
        count = 1;
        local0 = 0;
        state = 0x1B;
        return;
      }
      Gb(ptr, 0);
      size = 0xA;
      count = (0xA ? 0 : (count + 1));
      ptr = (ptr + 1);
      local0 = (local0 + size);
      length = (length - 1);
      state = ((length - 1) ? 0x86 : 0x72);
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 9;

  }

  /*
   * AI Summary: The function implements a state machine that manipulates memory buffers using bitwise operations and function calls (Gb, ub, func145, func376, func462, Pb, Sb) based on conditional logic and typed array access. 
  
   */

  function func322() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func323() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func324(local0, local1) {


  }


  function func325() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func326() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func327(local0, local1) {

    func438(8);
    return 0x10B735;

  }


  function func328(local0, local1) {

    return func218(local1);

  }


  function func329() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func330(local0, local1) {

    return func218(local1);

  }


  function func331() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func332() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func333() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func334() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func335() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func336() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func337() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func338() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func339 is calculateOffset
  /* renamed vars: local2=state, local3=offset, local4=length, local5=count, local6=remaining, local7=tmp */
  function calculateOffset(local0, local1) {
    let Error, Unreachable, code, count, length, local8, local9, loop0, offset, reached, remaining, state, tmp;
    state = 1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              switch (state) {
                                case 0: continue loop0;
                                case 1: return;
                                case 2: return;
                                case 3: return;
                                case 4: return;
                                case 5: return;
                                case 6: return;
                                case 7: return;
                                case 8: return;
                                case 9: return;
                                case 10: return;
                                case 11: return;
                                default: return;
                              }
                            }
                            if (count) {
                            } else {
                            }
                            state = 2;
                            return;
                          }
                          length = 1;
                          state = (ub(7, local1, 8) + 1);
                          count = ub((ub(7, local1, 8) + 1), local1, 4);
                          offset = (count ? ub((ub(7, local1, 8) + 1), local1, 4) : state);
                          if ((count ? ub((ub(7, local1, 8) + 1), local1, 4) : state)) {
                          } else {
                          }
                          state = 8;
                          return;
                        }
                        return Pb(0);
                      }
                      Gb(local1, 0);
                      remaining = 0xA;
                      offset = (0xA ? 0 : (offset + 1));
                      local1 = (local1 + 1);
                      length = (length + remaining);
                      count = (count - 1);
                      if ((count - 1)) {
                      } else {
                      }
                      state = 0xB;
                      return;
                    }
                    state = 0;
                    return;
                  }
                  offset = 0;
                  length = 1;
                  state = 0;
                  return;
                }
                remaining = (offset & 0xFFFFFFFC);
                length = 1;
                offset = 0;
                state = 0xA;
                return;
              }
              state = 3;
              return;
            }
            offset = 0;
            state = 2;
            return;
          }
          local1 = ub(3, local1, 0);
          count = (offset & 3);
          if (4) {
          } else {
          }
          state = 6;
          return;
        }
        Gb(local1, 0);
        state = 0xA;
        Gb((local1 + 1), 0);
        tmp = 0xA;
        Gb((local1 + 2), 0);
        local8 = 0xA;
        Gb((local1 + 3), 0);
        local9 = 0xA;
        offset = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (offset + 4)))));
        length = ((((state + length) + tmp) + local8) + local9);
        local1 = (local1 + 4);
        remaining = (remaining - 4);
        if ((remaining - 4)) {
        } else {
        }
        state = 4;
        return;
      }
      state = 2;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a state machine that appears to process data from a memory buffer (likely related to decompression) using a combination of bitwise operations and memory address calculations, ultimately returning without any meaningful output due to hardcoded return statements in each state.
  
   */

  function func340() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func341 is handleMemory
  /* renamed vars: local2=memBase, local3=stateVar, local4=tempVar1, local5=tempVar2, local6=tempVar3, local7=tempVar4, local8=tempVar5, local9=ptrArg2End */
  function handleMemory(local0, local1) {
    let Error, Unreachable, code, local10, local11, loop0, memBase, ptrArg2End, reached, stateVar, tempVar1, tempVar2, tempVar3, tempVar4, tempVar5;
    stateVar = 0x29;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  switch (stateVar) {
                                                                                                    case 0: continue loop0;
                                                                                                    case 1: return;
                                                                                                    case 2: return;
                                                                                                    case 3: return;
                                                                                                    case 4: return;
                                                                                                    case 5: return;
                                                                                                    case 6: return;
                                                                                                    case 7: return;
                                                                                                    case 8: return;
                                                                                                    case 9: return;
                                                                                                    case 10: return;
                                                                                                    case 11: return;
                                                                                                    case 12: return;
                                                                                                    case 13: return;
                                                                                                    case 14: return;
                                                                                                    case 15: return;
                                                                                                    case 16: return;
                                                                                                    case 17: return;
                                                                                                    case 18: return;
                                                                                                    case 19: return;
                                                                                                    case 20: return;
                                                                                                    case 21: return;
                                                                                                    case 22: return;
                                                                                                    case 23: return;
                                                                                                    case 24: return;
                                                                                                    case 25: return;
                                                                                                    case 26: return;
                                                                                                    case 27: return;
                                                                                                    case 28: return;
                                                                                                    case 29: return;
                                                                                                    case 30: return;
                                                                                                    case 31: return;
                                                                                                    case 32: return;
                                                                                                    case 33: return;
                                                                                                    case 34: return;
                                                                                                    case 35: return;
                                                                                                    case 36: return;
                                                                                                    case 37: return;
                                                                                                    case 38: return;
                                                                                                    case 39: return;
                                                                                                    case 40: return;
                                                                                                    case 41: return;
                                                                                                    case 42: return;
                                                                                                    case 43: return;
                                                                                                    case 44: return;
                                                                                                    case 45: return;
                                                                                                    default: return;
                                                                                                  }
                                                                                                }
                                                                                                tempVar1 = (tempVar1 + 1);
                                                                                                if (tempVar2) {
                                                                                                } else {
                                                                                                }
                                                                                                stateVar = 0x1E;
                                                                                                return;
                                                                                              }
                                                                                              tempVar1 = ub(0x23, memBase, 0x20);
                                                                                              stateVar = 0x21;
                                                                                              return;
                                                                                            }
                                                                                            if (0xA) {
                                                                                            } else {
                                                                                            }
                                                                                            stateVar = 7;
                                                                                            return;
                                                                                          }
                                                                                          local10 = wb(0x20);
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    switch (local11) {
                                                                                                      case 0: continue loop0;
                                                                                                      case 1: return;
                                                                                                      case 2: return;
                                                                                                      default: return;
                                                                                                    }
                                                                                                  }
                                                                                                  return;
                                                                                                }
                                                                                                return;
                                                                                              }
                                                                                              return;
                                                                                            }
                                                                                          }
                                                                                          stateVar = 0x1C;
                                                                                          return;
                                                                                        }
                                                                                        if (0x100000000n) {
                                                                                        } else {
                                                                                        }
                                                                                        stateVar = 0x22;
                                                                                        return;
                                                                                      }
                                                                                      tempVar3 = (tempVar1 + 1);
                                                                                      if (tempVar3) {
                                                                                      } else {
                                                                                      }
                                                                                      stateVar = 0x26;
                                                                                      return;
                                                                                    }
                                                                                    tempVar3 = ub(0x1F, local1, 0xC);
                                                                                    stateVar = 0x28;
                                                                                    return;
                                                                                  }
                                                                                  local11 = wb(0x18);
                                                                                  if (3n) {
                                                                                  } else {
                                                                                  }
                                                                                  stateVar = 0x17;
                                                                                  return;
                                                                                }
                                                                                stateVar = 0x13;
                                                                                return;
                                                                              }
                                                                              if (tempVar3) {
                                                                              } else {
                                                                              }
                                                                              stateVar = 0x26;
                                                                              return;
                                                                            }
                                                                            func175(local1, func329((memBase + 0x3F), 0x100780), local1);
                                                                            tempVar1 = 0x2B;
                                                                            stateVar = 0x21;
                                                                            return;
                                                                          }
                                                                          if (0x6E0100n) {
                                                                          } else {
                                                                          }
                                                                          stateVar = 5;
                                                                          return;
                                                                        }
                                                                        local11 = wb(0x18);
                                                                        if (3n) {
                                                                        } else {
                                                                        }
                                                                        stateVar = 1;
                                                                        return;
                                                                      }
                                                                      Qb((memBase + 0x18), func297(local1, 0), memBase, wb(0x18), 3, sb(memBase, 1, 0x28), memBase, local10, 0x30);
                                                                      func406((tempVar1 + 1), Pb(0x14), (memBase + 0x28), (memBase + 0x3F));
                                                                      func175(0x10, local1, local1);
                                                                      tempVar1 = (local10 | (tempVar5 << 0x10n));
                                                                      stateVar = 0x21;
                                                                      return;
                                                                    }
                                                                    tempVar2 = (tempVar1 + 3);
                                                                    Gb((tempVar4 + tempVar5), 0);
                                                                    if (0x6C) {
                                                                    } else {
                                                                    }
                                                                    stateVar = 0x2D;
                                                                    return;
                                                                  }
                                                                  tempVar1 = ub(9, memBase, 0x20);
                                                                  stateVar = 0x21;
                                                                  return;
                                                                }
                                                                if (tempVar2) {
                                                                } else {
                                                                }
                                                                stateVar = 0x19;
                                                                return;
                                                              }
                                                              tempVar3 = (tempVar3 ? tempVar2 : tempVar2);
                                                              if ((tempVar3 ? tempVar2 : tempVar2)) {
                                                              } else {
                                                              }
                                                              stateVar = 0x26;
                                                              return;
                                                            }
                                                            ptrArg2End = (local1 + 0xC);
                                                            tempVar4 = ub(0xE, local1, 0xC);
                                                            stateVar = 0x1E;
                                                            return;
                                                          }
                                                          global0 = (memBase - 0xFFFFFFC0);
                                                          return tempVar3;
                                                        }
                                                        if (0x100000000n) {
                                                        } else {
                                                        }
                                                        stateVar = 0x22;
                                                        return;
                                                      }
                                                      stateVar = 0x13;
                                                      return;
                                                    }
                                                    Qb(local10, 0xD, local0, 0, Pb(0), sb(memBase, 1, 0x28), memBase, local10, 0x30);
                                                    func406(6, tempVar5, (memBase + 0x28), (memBase + 0x3F));
                                                    tempVar1 = tempVar1;
                                                    stateVar = 0x2C;
                                                    return;
                                                  }
                                                  local10 = wb(0x20);
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            switch (local11) {
                                                              case 0: continue loop0;
                                                              case 1: return;
                                                              case 2: return;
                                                              default: return;
                                                            }
                                                          }
                                                          return;
                                                        }
                                                        return;
                                                      }
                                                      return;
                                                    }
                                                  }
                                                  stateVar = 0x20;
                                                  return;
                                                }
                                                if (0x100000000n) {
                                                } else {
                                                }
                                                stateVar = 0x22;
                                                return;
                                              }
                                              tempVar1 = func145(ub(ub((memBase + 0x28), memBase, 0x10), memBase, 0x14));
                                              stateVar = 0x21;
                                              return;
                                            }
                                            if (0x100000000n) {
                                            } else {
                                            }
                                            stateVar = 0x22;
                                            return;
                                          }
                                          local10 = 0x100n;
                                          stateVar = 0xB;
                                          return;
                                        }
                                        Qb(Pb(0x28), (memBase + 0x10), calculateOffset((local1 + 0xC)), local10, 0x16, sb(memBase, 3, 0x28), memBase, local10, 0x30);
                                        func175((memBase + 0x28), func165((memBase + 0x3F), 0x100780), local1);
                                        tempVar1 = 5;
                                        stateVar = 0x21;
                                        return;
                                      }
                                      Qb(0x1A, 4, local10, 0x24, memBase, sb(memBase, 2, 0x28), memBase, local10, 0x30);
                                      func406(memBase, 0x20, (memBase + 0x28), (memBase + 0x3F));
                                      tempVar1 = Pb(0x14);
                                      stateVar = 0x2C;
                                      return;
                                    }
                                    Gb((tempVar1 + tempVar4), 0);
                                    tempVar5 = (tempVar1 + 3);
                                    tempVar3 = ((tempVar1 + 3) - 9);
                                    if (0x17) {
                                    } else {
                                    }
                                    stateVar = 0x1B;
                                    return;
                                  }
                                  tempVar5 = (tempVar1 + 2);
                                  Gb((tempVar3 + tempVar4), 0);
                                  if (0x75) {
                                  } else {
                                  }
                                  stateVar = 0x2D;
                                  return;
                                }
                                Qb(0x25, local1, (tempVar1 + 2), Pb(0x14), 0x11, sb(memBase, 3, 0x28), memBase, local10, 0x30);
                                tempVar1 = func165((memBase + 0x3F), 0x100780);
                                stateVar = 0x2C;
                                return;
                              }
                              stateVar = 0x13;
                              return;
                            }
                            stateVar = 0x13;
                            return;
                          }
                          local10 = 0n;
                          tempVar1 = tempVar2;
                          stateVar = 0xB;
                          return;
                        }
                        Qb(local10, Pb(4), local0, 1, Pb(0), sb(memBase, 2, 0x28), memBase, local10, 0x30);
                        func406(Pb(4), local0, (memBase + 0x28), (memBase + 0x3F));
                        func175(local0, tempVar1, local1);
                        tempVar1 = Pb(0);
                        stateVar = 0x21;
                        return;
                      }
                      if (((1 << tempVar3) & 0x800013)) {
                      } else {
                      }
                      stateVar = 0x1B;
                      return;
                    }
                    tempVar1 = func145(ub(ub((memBase + 0x28), memBase, 0), memBase, 4));
                    stateVar = 8;
                    return;
                  }
                  tempVar1 = (tempVar1 + 1);
                  if (tempVar2) {
                  } else {
                  }
                  stateVar = 0x28;
                  return;
                }
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              Gb((tempVar1 + tempVar3), 0);
                                                                                              tempVar4 = 0x2A;
                                                                                              switch (33) {
                                                                                                case 0: continue loop0;
                                                                                                case 1: return;
                                                                                                case 2: return;
                                                                                                case 3: return;
                                                                                                case 4: return;
                                                                                                case 5: return;
                                                                                                case 6: return;
                                                                                                case 7: return;
                                                                                                case 8: return;
                                                                                                case 9: return;
                                                                                                case 10: return;
                                                                                                case 11: return;
                                                                                                case 12: return;
                                                                                                case 13: return;
                                                                                                case 14: return;
                                                                                                case 15: return;
                                                                                                case 16: return;
                                                                                                case 17: return;
                                                                                                case 18: return;
                                                                                                case 19: return;
                                                                                                case 20: return;
                                                                                                case 21: return;
                                                                                                case 22: return;
                                                                                                case 23: return;
                                                                                                case 24: return;
                                                                                                case 25: return;
                                                                                                case 26: return;
                                                                                                case 27: return;
                                                                                                case 28: return;
                                                                                                case 29: return;
                                                                                                case 30: return;
                                                                                                case 31: return;
                                                                                                case 32: return;
                                                                                                case 33: return;
                                                                                                case 34: return;
                                                                                                case 35: return;
                                                                                                case 36: return;
                                                                                                default: return;
                                                                                              }
                                                                                            }
                                                                                            return;
                                                                                          }
                                                                                          return;
                                                                                        }
                                                                                        return;
                                                                                      }
                                                                                      return;
                                                                                    }
                                                                                    return;
                                                                                  }
                                                                                  return;
                                                                                }
                                                                                return;
                                                                              }
                                                                              return;
                                                                            }
                                                                            return;
                                                                          }
                                                                          return;
                                                                        }
                                                                        return;
                                                                      }
                                                                      return;
                                                                    }
                                                                    return;
                                                                  }
                                                                  return;
                                                                }
                                                                return;
                                                              }
                                                              return;
                                                            }
                                                            return;
                                                          }
                                                          return;
                                                        }
                                                        return;
                                                      }
                                                      return;
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                                return;
                                              }
                                              return;
                                            }
                                            return;
                                          }
                                          return;
                                        }
                                        return;
                                      }
                                      return;
                                    }
                                    return;
                                  }
                                  return;
                                }
                                return;
                              }
                              return;
                            }
                            return;
                          }
                          return;
                        }
                        return;
                      }
                      return;
                    }
                    return;
                  }
                }
                stateVar = 2;
                return;
              }
              memBase = (global0 + 0xFFFFFFC0);
              global0 = (global0 + 0xFFFFFFC0);
              tempVar1 = ub(0xC, local1, 0x14);
              tempVar2 = ub(ub(0xC, local1, 0x14), local1, 0x10);
              if (ub(ub(0xC, local1, 0x14), local1, 0x10)) {
              } else {
              }
              stateVar = 0x10;
              return;
            }
            stateVar = 0x19;
            return;
          }
          Gb((tempVar2 + tempVar4), 0);
          if (0x6C) {
          } else {
          }
          stateVar = 0x15;
          return;
        }
        func175(0x2D, tempVar1, local1);
        tempVar1 = Pb(0x14);
        stateVar = 0x21;
        return;
      }
      tempVar1 = func145(ub(ub((memBase + 0x28), memBase, 8), memBase, 0xC));
      stateVar = 8;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func341` implements a state machine that appears to parse or process data using bitwise operations, memory manipulation, and helper functions, ultimately returning early in all cases based on the initial state. 
  
   */

  // func342 is checkFlag
  /* renamed vars: local1=globalOffset, local2=returnCode, local3=temp0, local4=flag0, local5=temp1 */
  function checkFlag(local0) {
    let Error, Unreachable, code, flag0, local6, loop0, reached, returnCode, temp0, temp1;
    returnCode = 5;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        switch (returnCode) {
                          case 0: continue loop0;
                          case 1: return;
                          case 2: return;
                          case 3: return;
                          case 4: return;
                          case 5: return;
                          case 6: return;
                          case 7: return;
                          case 8: return;
                          default: return;
                        }
                      }
                      temp0 = 0;
                      returnCode = (flag0 ? 6 : 2);
                      return;
                    }
                    temp0 = (flag0 << 1);
                    temp1 = (4 ? (flag0 << 1) : temp0);
                    local6 = ((4 ? (flag0 << 1) : temp0) << 4);
                    returnCode = (0x7FFFFFF8 ? 4 : ((4 ? (flag0 << 1) : temp0) << 4));
                    return;
                  }
                  returnCode = (1 ? 4 : ub(8, globalOffset, 8));
                  return;
                }
                throw new Error('Unreachable code reached');
              }
              returnCode = 7;
              return;
            }
            globalOffset = (global0 - 0x20);
            global0 = (global0 - 0x20);
            flag0 = ub(1, local0, 0);
            returnCode = (0x7FFFFFF ? 3 : ub(1, local0, 0));
            return;
          }
          temp0 = 8;
          returnCode = 2;
          return;
        }
        throw new Error('Unreachable code reached');
      }
    }
    returnCode = ub(Pb(0x14), globalOffset, 0xC);
    global0 = (globalOffset + 0x20);

  }

  /*
   * AI Summary: The function retrieves and conditionally combines six memory values using the `ub` helper function, ultimately returning one of several fixed values (2, 3, 4, 5, 6, or 7) or the result of a final `ub` call. 
  
   */

  function func343() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func344() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func345() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func346() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func347 is allocateChunk
  /* renamed vars: local4=state, local5=memBase, local6=constOne, local7=byteOffset, local8=byteCount, local9=hasZeroBytes, local10=allocSize, local11=chunkSize, local12=loopCounter, local13=sizeIncrement, local14=dataOffset, local15=shiftedData, local16=alignedSize, local17=alignedOffset */
  function allocateChunk(local0, local1, local2, local3) {
    let Error, Unreachable, alignedOffset, alignedSize, allocSize, byteCount, byteOffset, chunkSize, code, constOne, dataOffset, hasZeroBytes, local18, local19, local20, local21, loop0, loopCounter, memBase, reached, shiftedData, sizeIncrement, state;
    constOne = 1;
    state = 0x1F;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              switch (state) {
                                                                                case 0: continue loop0;
                                                                                case 1: return;
                                                                                case 2: return;
                                                                                case 3: return;
                                                                                case 4: return;
                                                                                case 5: return;
                                                                                case 6: return;
                                                                                case 7: return;
                                                                                case 8: return;
                                                                                case 9: return;
                                                                                case 10: return;
                                                                                case 11: return;
                                                                                case 12: return;
                                                                                case 13: return;
                                                                                case 14: return;
                                                                                case 15: return;
                                                                                case 16: return;
                                                                                case 17: return;
                                                                                case 18: return;
                                                                                case 19: return;
                                                                                case 20: return;
                                                                                case 21: return;
                                                                                case 22: return;
                                                                                case 23: return;
                                                                                case 24: return;
                                                                                case 25: return;
                                                                                case 26: return;
                                                                                case 27: return;
                                                                                case 28: return;
                                                                                case 29: return;
                                                                                case 30: return;
                                                                                case 31: return;
                                                                                case 32: return;
                                                                                case 33: return;
                                                                                case 34: return;
                                                                                case 35: return;
                                                                                default: return;
                                                                              }
                                                                            }
                                                                            local3 = (local3 + 8);
                                                                            local2 = (local2 + 8);
                                                                            local19 = (wb(0) & 0x8080808080808080n);
                                                                            state = (0x8080808080808080n ? (local2 + 8) : (wb(0) & 0x8080808080808080n));
                                                                            return;
                                                                          }
                                                                          state = (local19 ? 0xC : 0x1E);
                                                                          return;
                                                                        }
                                                                        checkValue(constOne);
                                                                        local3 = ub((memBase + 0x10), memBase, 0x14);
                                                                        local2 = ub(0, memBase, 0x10);
                                                                        state = 5;
                                                                        return;
                                                                      }
                                                                      local3 = ((0xFFFFFFFF >>> ((((local3 << 3) >>> 0) / (7 >>> 0)) - 1)) + 1);
                                                                      state = 0x1D;
                                                                      return;
                                                                    }
                                                                    copyData(0xFF, byteCount);
                                                                    constOne = (byteOffset + loopCounter);
                                                                    byteCount = (local3 - 1);
                                                                    alignedSize = (9 ? ((local3 >>> 3) * 7) : local3);
                                                                    state = (hasZeroBytes ? 0x11 : 0x12);
                                                                    return;
                                                                  }
                                                                  global0 = (memBase + 0x30);
                                                                  return Pb(0);
                                                                }
                                                                sizeIncrement = 8;
                                                                state = 0x15;
                                                                return;
                                                              }
                                                              checkValue(constOne);
                                                              local3 = ub((memBase + 0x20), memBase, 0x24);
                                                              local2 = ub(local2, memBase, 0x20);
                                                              state = 5;
                                                              return;
                                                            }
                                                            local21 = (local19 - 1n);
                                                            byteOffset = (((local20 >>> 3) + byteOffset) & byteCount);
                                                            state = (0 ? ((((local20 >>> 3) + byteOffset) & byteCount) + constOne) : vb(0));
                                                            return;
                                                          }
                                                          local19 = (local19 ^ 0x8080808080808080n);
                                                          state = 0x1E;
                                                          return;
                                                        }
                                                        local2 = (local2 + 1);
                                                        local3 = (local3 ? local3 : local2);
                                                        state = (8 ? (local2 + 1) : (local3 ? local3 : local2));
                                                        return;
                                                      }
                                                      byteOffset = ((wb(0) & 0x8080808080808080n) >>> 3);
                                                      state = 0x22;
                                                      return;
                                                    }
                                                    state = 0;
                                                    return;
                                                  }
                                                  checkValue(constOne);
                                                  local3 = ub((memBase + 8), memBase, 0xC);
                                                  local2 = ub(constOne, memBase, 8);
                                                  state = 5;
                                                  return;
                                                }
                                                local2 = local19;
                                                state = (0xFFFFFFF8 ? 2 : local19);
                                                return;
                                              }
                                              local3 = (4 ? 8 : local3);
                                              state = 0x1D;
                                              return;
                                            }
                                            state = 5;
                                            return;
                                          }
                                          alignedOffset = (constOne + 8);
                                          allocSize = ub(4, local1, 0);
                                          local18 = (ub(4, local1, 0) - 0xC);
                                          local19 = ((wb(0) ^ 0xFFFFFFFFFFFFFFFFn) & 0x8080808080808080n);
                                          local3 = 0;
                                          loopCounter = hasZeroBytes;
                                          local2 = allocSize;
                                          state = 1;
                                          return;
                                        }
                                        allocSize = ub(allocSize, local1, 0);
                                        state = 0x1B;
                                        return;
                                      }
                                      func259(0xD, 0xC);
                                      local2 = 0x80000001;
                                      state = 0x10;
                                      return;
                                    }
                                    func279((allocSize - local3), constOne);
                                    state = 0x10;
                                    return;
                                  }
                                  state = (byteOffset + sizeIncrement);
                                  sizeIncrement = (sizeIncrement + 8);
                                  byteOffset = (state & byteCount);
                                  local20 = (wb(0) & 0x8080808080808080n);
                                  state = (0n ? ((state & byteCount) + constOne) : (wb(0) & 0x8080808080808080n));
                                  return;
                                }
                                local3 = (((chunkSize * 0xC) + 0x13) & 0xFFFFFFF8);
                                constOne = ((chunkSize + (((chunkSize * 0xC) + 0x13) & 0xFFFFFFF8)) + 9);
                                state = (((chunkSize + (((chunkSize * 0xC) + 0x13) & 0xFFFFFFF8)) + 9) ? 0x14 : 0x10);
                                return;
                              }
                              chunkSize = ub(0x13, local1, 4);
                              local2 = (8 ? (((chunkSize + 1) >>> 3) * 7) : chunkSize);
                              state = (local3 ? ub(0x13, local1, 4) : ((8 ? (((chunkSize + 1) >>> 3) * 7) : chunkSize) >>> 1));
                              return;
                            }
                            state = (0x7FFFFFF8 ? 2 : local2);
                            return;
                          }
                          checkAndReturn(0x1A, (memBase + 0x18), constOne, local2);
                          local3 = ub(0xA, memBase, 0x1C);
                          local2 = ub(0x15, memBase, 0x18);
                          state = 5;
                          return;
                        }
                        Gb(0, 0x10FC88);
                        loopCounter = func213(0x19, local2, 8);
                        state = (func213(0x19, local2, 8) ? (memBase + 0x2C) : 4);
                        return;
                      }
                      local2 = 0x80000001;
                      state = (chunkSize ? 0x16 : 0x10);
                      return;
                    }
                    state = (0x1FFFFFFF ? 7 : local3);
                    return;
                  }
                  local19 = (local3 * 0xCn);
                  state = (((local3 * 0xCn) >> 0x20n) ? 0xE : 2);
                  return;
                }
                state = ub(8, memBase, 0x28);
                dataOffset = ((local19 >>> 3) + local3);
                shiftedData = func142((state + 8), wb(0), (local18 + (((local19 >>> 3) + local3) * 0xFFFFFFF4)));
                byteOffset = (func142((state + 8), wb(0), (local18 + (((local19 >>> 3) + local3) * 0xFFFFFFF4))) & byteCount);
                local20 = (wb(0) & 0x8080808080808080n);
                state = ((wb(0) & 0x8080808080808080n) ? wb(0) : ((func142((state + 8), wb(0), (local18 + (((local19 >>> 3) + local3) * 0xFFFFFFF4))) & byteCount) + constOne));
                return;
              }
              memBase = (global0 - 0x30);
              global0 = (global0 - 0x30);
              hasZeroBytes = ub(Pb(0x28), local1, 0xC);
              local3 = (local2 + hasZeroBytes);
              state = ((local2 + hasZeroBytes) ? 0xD : hasZeroBytes);
              return;
            }
            state = 0x1B;
            return;
          }
          state = 8;
          return;
        }
        local19 = (local19 & local21);
        shiftedData = (shiftedData >>> 0x19);
        byteOffset = (constOne + ((byteOffset ^ 0xFFFFFFFF) * 0xC));
        dataOffset = (allocSize + ((dataOffset ^ 0xFFFFFFFF) * 0xC));
        Qb(0x17, sb((constOne + byteOffset), (shiftedData >>> 0x19), 0), sb((alignedOffset + ((byteOffset - 8) & byteCount)), shiftedData, 0), ub(((constOne + ((byteOffset ^ 0xFFFFFFFF) * 0xC)) + 8), ((allocSize + ((dataOffset ^ 0xFFFFFFFF) * 0xC)) + 8), 0), Pb(0), byteOffset, dataOffset, wb(0), 0);
        loopCounter = (loopCounter - 1);
        state = ((loopCounter - 1) ? 1 : 0x20);
        return;
      }
      byteOffset = ((local2 + 7) & 0xFFFFFFF8);
      byteCount = (local3 + 8);
      local2 = (((local2 + 7) & 0xFFFFFFF8) + (local3 + 8));
      state = (byteOffset ? 2 : (((local2 + 7) & 0xFFFFFFF8) + (local3 + 8)));
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a complex state machine that manages memory allocation and manipulation, likely for a custom memory allocator or data structure.
  
   */

  function func348() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func349() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func350() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func351() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func352 is Cb
  function Cb() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  function func353() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func354() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func355 is incrementCounter
  function incrementCounter(local0, local1) {
    let Error, Unreachable, code, local2, local3, loop0, reached;

    local2 = 1;
    loop0: while (true) {
      {
        {
          {
            switch (local2) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          return Pb(0);
        }
        local3 = (local1 - 8);
        local2 = (ub(0x1076F0, (local1 - 8), 0) + 1);
        if (local2) {
        } else {
        }
        local2 = 2;
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func355` determines a return path based on a memory-calculated value relative to the input `local1`, effectively branching execution based on data at a dynamically computed address. 
  
   */

  // func356 is handleBuffer
  function handleBuffer(local0, local1, local2, local3) {
    let Error, Unreachable, code, local4, local5, local6, loop0, reached;

    local4 = 0xE;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    switch (local4) {
                                      case 0: continue loop0;
                                      case 1: return;
                                      case 2: return;
                                      case 3: return;
                                      case 4: return;
                                      case 5: return;
                                      case 6: return;
                                      case 7: return;
                                      case 8: return;
                                      case 9: return;
                                      case 10: return;
                                      case 11: return;
                                      case 12: return;
                                      case 13: return;
                                      case 14: return;
                                      default: return;
                                    }
                                  }
                                  Qb(local1, Pb(4), local0, 0x80000000, Pb(0), local5, local0, wb(4), 0x20);
                                  local4 = (0x80000000 ? 6 : ub(8, local3, 0));
                                  return;
                                }
                                local1 = ub(Pb(0x1C), local3, 4);
                                local4 = (local2 ? 0xB : 3);
                                return;
                              }
                              func257((local0 + 0xC), (local5 + 0x1C), (local5 + 0x28));
                              Gb(local5, 0);
                              local4 = (6 ? 0xA : 9);
                              return;
                            }
                            local3 = 1;
                            local4 = 4;
                            return;
                          }
                          func458(local2);
                          local1 = 3;
                          local4 = 2;
                          return;
                        }
                        throw new Error('Unreachable code reached');
                      }
                      local1 = 0;
                      local4 = 2;
                      return;
                    }
                    throw new Error('Unreachable code reached');
                  }
                  local6 = 0;
                  local2 = ub(5, local3, 8);
                  local4 = (0 ? 1 : ub(5, local3, 8));
                  return;
                }
                global0 = (local5 - 0xFFFFFFC0);
                return 0;
              }
              local4 = 9;
              return;
            }
            Gb(0, 0x10FC88);
            local6 = 1;
            local3 = func213(5, local2, 1);
            local4 = (func213(5, local2, 1) ? local3 : 4);
            return;
          }
          func279(ub(local5, local0, 4), local6);
          local4 = 0;
          return;
        }
        func458(local2);
        local1 = local1;
        local6 = ub(0, local0, 0);
        local4 = (0x80000000 ? 0xC : (ub(0, local0, 0) | 0x80000000));
        return;
      }
      local5 = (global0 + 0xFFFFFFC0);
      global0 = (global0 + 0xFFFFFFC0);
      Gb(0, 0x10FC88);
      local6 = func213(7, local2, 1);
      local4 = (func213(7, local2, 1) ? sb(local5, local1, 0x28) : 0xD);
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return Pb(0x2C);

  }

  /*
   * AI Summary: The function `func356` uses a complex switch statement driven by memory manipulations and bitwise operations to control execution flow, ultimately returning a value or throwing an error. 
  
   */

  function func357() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func358 is processStream
  /* renamed vars: local6=state, local7=result, local8=offset, local9=count */
  function processStream(local0, local1, local2, local3, local4, local5) {
    let Error, Sb, Unreachable, code, count, local10, local11, local12, local13, local14, local15, loop0, offset, reached, result, state;
    state = 0x22;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              switch (state) {
                                                                                                case 0: continue loop0;
                                                                                                case 1: return;
                                                                                                case 2: return;
                                                                                                case 3: return;
                                                                                                case 4: return;
                                                                                                case 5: return;
                                                                                                case 6: return;
                                                                                                case 7: return;
                                                                                                case 8: return;
                                                                                                case 9: return;
                                                                                                case 10: return;
                                                                                                case 11: return;
                                                                                                case 12: return;
                                                                                                case 13: return;
                                                                                                case 14: return;
                                                                                                case 15: return;
                                                                                                case 16: return;
                                                                                                case 17: return;
                                                                                                case 18: return;
                                                                                                case 19: return;
                                                                                                case 20: return;
                                                                                                case 21: return;
                                                                                                case 22: return;
                                                                                                case 23: return;
                                                                                                case 24: return;
                                                                                                case 25: return;
                                                                                                case 26: return;
                                                                                                case 27: return;
                                                                                                case 28: return;
                                                                                                case 29: return;
                                                                                                case 30: return;
                                                                                                case 31: return;
                                                                                                case 32: return;
                                                                                                case 33: return;
                                                                                                case 34: return;
                                                                                                case 35: return;
                                                                                                case 36: return;
                                                                                                case 37: return;
                                                                                                case 38: return;
                                                                                                case 39: return;
                                                                                                case 40: return;
                                                                                                case 41: return;
                                                                                                case 42: return;
                                                                                                case 43: return;
                                                                                                default: return;
                                                                                              }
                                                                                            }
                                                                                            local1 = 0;
                                                                                            offset = 0;
                                                                                            state = 0x29;
                                                                                            return;
                                                                                          }
                                                                                          result = 1;
                                                                                          if (func232(local2, local3)) {
                                                                                          } else {
                                                                                          }
                                                                                          state = 0x17;
                                                                                          return;
                                                                                        }
                                                                                        local1 = func192(local3);
                                                                                        state = 0x19;
                                                                                        return;
                                                                                      }
                                                                                      state = 0x29;
                                                                                      return;
                                                                                    }
                                                                                    local1 = 0;
                                                                                    local0 = ((local14 - local10) & 0xFFFF);
                                                                                    state = 9;
                                                                                    return;
                                                                                  }
                                                                                  count = (local3 & 3);
                                                                                  if (4) {
                                                                                  } else {
                                                                                  }
                                                                                  state = 0x1A;
                                                                                  return;
                                                                                }
                                                                                result = 1;
                                                                                local1 = (local1 + 1);
                                                                                if (table0[ub(local11, count, 0x10)](0, offset)) {
                                                                                } else {
                                                                                }
                                                                                state = 0x13;
                                                                                return;
                                                                              }
                                                                              result = table0[ub(local5, offset, 0xC)](0x14, local1, local4);
                                                                              state = 0x15;
                                                                              return;
                                                                            }
                                                                            result = 1;
                                                                            local1 = (local1 + 1);
                                                                            if (table0[ub(0x30, count, 0x10)](local3, offset)) {
                                                                            } else {
                                                                            }
                                                                            state = 0x1D;
                                                                            return;
                                                                          }
                                                                          local2 = (local1 & 0xFFFF);
                                                                          result = local0;
                                                                          if (local2) {
                                                                          } else {
                                                                          }
                                                                          state = 0x15;
                                                                          return;
                                                                        }
                                                                        local10 = local14;
                                                                        state = 0x26;
                                                                        return;
                                                                      }
                                                                      state = 0x15;
                                                                      return;
                                                                    }
                                                                    if (local3) {
                                                                    } else {
                                                                    }
                                                                    state = 0x27;
                                                                    return;
                                                                  }
                                                                  state = 0x19;
                                                                  return;
                                                                }
                                                                local11 = (local5 + 1);
                                                                local12 = ub(5, local0, 8);
                                                                local13 = 0x2D;
                                                                state = 0x28;
                                                                return;
                                                              }
                                                              local1 = 0;
                                                              local2 = ((local10 - local11) & 0xFFFF);
                                                              state = 0x1D;
                                                              return;
                                                            }
                                                            local2 = 0;
                                                            state = 0x21;
                                                            return;
                                                          }
                                                          local15 = wb(8);
                                                          result = 1;
                                                          offset = ub(Pb(8), local0, 0);
                                                          count = ub(ub(Pb(8), local0, 0), local0, 4);
                                                          if (func232(local2, local3)) {
                                                          } else {
                                                          }
                                                          state = 0xF;
                                                          return;
                                                        }
                                                        local12 = ub(0x110000, local0, 8);
                                                        local1 = (ub(0x110000, local0, 8) & 0x200000);
                                                        local13 = ((ub(0x110000, local0, 8) & 0x200000) ? 0x15 : 0x2B);
                                                        local11 = ((local1 >>> 0x15) + local5);
                                                        state = 0x28;
                                                        return;
                                                      }
                                                      if ((local10 & 0xFFFF)) {
                                                      } else {
                                                      }
                                                      state = 1;
                                                      return;
                                                    }
                                                    state = 0x15;
                                                    return;
                                                  }
                                                  return result;
                                                }
                                                Qb(local0, ((wb(8) & 0x9FE00000) | 0x20000030), ub(ub(Pb(8), local0, 0), local0, 4), local13, (local1 & 0xFFFF), 6, local0, local15, 8);
                                                return 0;
                                              }
                                              if (table0[ub(local5, count, 0xC)](local0, offset, local4)) {
                                              } else {
                                              }
                                              state = 4;
                                              return;
                                            }
                                            local1 = (local1 + 1);
                                            if (table0[ub(local11, count, 0x10)](0x15, offset)) {
                                            } else {
                                            }
                                            state = 9;
                                            return;
                                          }
                                          local11 = (local1 + local11);
                                          state = 0x21;
                                          return;
                                        }
                                        local10 = (local3 & 0xC);
                                        local1 = 0;
                                        offset = 0;
                                        state = 0x1B;
                                        return;
                                      }
                                      result = (local2 + offset);
                                      local1 = (vb(0) + 0xFFFFFFBF);
                                      offset = (offset + 4);
                                      if (local10) {
                                      } else {
                                      }
                                      state = 0x1B;
                                      return;
                                    }
                                    result = (local2 + offset);
                                    state = 0x20;
                                    return;
                                  }
                                  if ((local1 & 0xFFFF)) {
                                  } else {
                                  }
                                  state = 0x2A;
                                  return;
                                }
                                if ((local12 & 0x1000000)) {
                                } else {
                                }
                                state = 0x25;
                                return;
                              }
                              state = 0x15;
                              return;
                            }
                            local1 = (vb(0) + 0xFFFFFFBF);
                            result = (result + 1);
                            count = (count - 1);
                            if ((count - 1)) {
                            } else {
                            }
                            state = 0xD;
                            return;
                          }
                          local10 = Sb(result, 0x20, local11, local0, 0xC);
                          if (Sb(result, 0x20, local11, local0, 0xC)) {
                          } else {
                          }
                          state = 0x24;
                          return;
                        }
                        if (local1) {
                        } else {
                        }
                        state = 0xE;
                        return;
                      }
                      local10 = ((local14 & 0xFFFE) >>> 1);
                      state = 0x26;
                      return;
                    }
                    result = 1;
                    local1 = ub(0x12, local0, 0);
                    offset = ub(ub(0x12, local0, 0), local0, 4);
                    if (func232(local2, local3)) {
                    } else {
                    }
                    state = 7;
                    return;
                  }
                  local14 = (local10 - local11);
                  local1 = 0;
                  local10 = 0;
                  {
                    {
                      {
                        {
                          {
                            {
                              switch (((local12 >>> 0x1D) & 3)) {
                                case 0: continue loop0;
                                case 1: return;
                                case 2: return;
                                case 3: return;
                                default: return;
                              }
                            }
                            return;
                          }
                          return;
                        }
                        return;
                      }
                      return;
                    }
                  }
                  state = 0x26;
                  return;
                }
                local11 = (local12 & 0x1FFFFF);
                count = ub(0xA, local0, 4);
                offset = ub(0x23, local0, 0);
                state = 0x13;
                return;
              }
              local1 = 0;
              state = 0x19;
              return;
            }
            if ((local12 & 0x800000)) {
            } else {
            }
            state = 0x10;
            return;
          }
          if (count) {
          } else {
          }
          state = 0x19;
          return;
        }
        result = 1;
        if (table0[ub(local5, count, 0xC)](0x1C, offset, local4)) {
        } else {
        }
        state = 0x16;
        return;
      }
      if (0x10) {
      } else {
      }
      state = 0xC;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 2;

  }

  /*
   * AI Summary: The function `func358` implements a state machine that conditionally executes various memory operations and calculations based on input parameters and internal state, ultimately returning a value or 0 after potentially modifying memory.
  
   */

  // func359 is parseData
  /* renamed vars: state=local1 */
  function parseData(local0) {
    let Error, Unreachable, code, local1, local2, loop0, reached;
    local1 = 1;
    loop0: while (true) {
      {
        {
          {
            {
              switch (local1) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            local1 = (ub(local2, local2, 0) - 1);
            if (local1) {
            } else {
            }
            local1 = 3;
            return;
          }
          local2 = ub(2, local0, 0);
          if (ub(2, local0, 0)) {
          } else {
          }
          local1 = 2;
          return;
        }
        return 0;
      }
      func348(Pb(0), local0);
      local1 = 2;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function conditionally executes one of two branches based on a memory lookup using `ub`, either returning immediately or updating a state variable and ultimately returning after potentially calling `func348` and `Pb`. 
  
   */

  function func360(local0, local1) {

    func438(3);
    return 0x10B842;

  }


  // func361 is initStateReturnOffset
  /* renamed vars: local2=state, local3=offset, local4=temp */
  function initStateReturnOffset(local0, local1) {
    let Error, Unreachable, code, local5, local6, loop0, offset, reached, state, temp;
    state = 3;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              switch (state) {
                                case 0: continue loop0;
                                case 1: return;
                                case 2: return;
                                case 3: return;
                                case 4: return;
                                case 5: return;
                                case 6: return;
                                case 7: return;
                                case 8: return;
                                case 9: return;
                                case 10: return;
                                case 11: return;
                                default: return;
                              }
                            }
                            return offset;
                          }
                          offset = (local0 + 8);
                          state = 0;
                          return;
                        }
                        local5 = (0xB ? ((local1 + 0xB) & 0xFFFFFFF8) : local1);
                        local1 = func393(0x10, (((0xB ? ((local1 + 0xB) & 0xFFFFFFF8) : local1) + local0) + 0xC));
                        if (func393(0x10, (((0xB ? ((local1 + 0xB) & 0xFFFFFFF8) : local1) + local0) + 0xC))) {
                        } else {
                        }
                        state = 0;
                        return;
                      }
                      offset = 0;
                      local0 = (0x10 ? local0 : local0);
                      if (local1) {
                      } else {
                      }
                      state = 0;
                      return;
                    }
                    local0 = offset;
                    state = 7;
                    return;
                  }
                  local1 = (local0 + local5);
                  local5 = (offset - local5);
                  offset = (local0 + offset);
                  state = 1;
                  return;
                }
                offset = ub(func159(local5), offset, 0);
                state = 7;
                return;
              }
              local1 = ub(Pb(0), local0, 4);
              if ((ub(Pb(0), local0, 4) & 3)) {
              } else {
              }
              state = 1;
              return;
            }
            offset = (local1 & 0xFFFFFFF8);
            if ((local5 + 0x10)) {
            } else {
            }
            state = 1;
            return;
          }
          offset = (local1 - 8);
          temp = (local0 - 1);
          if (((local0 - 1) & local1)) {
          } else {
          }
          state = 4;
          return;
        }
        state = (local0 + temp);
        temp = (local1 + offset);
        state = 7;
        return;
      }
      local6 = (local1 - 4);
      state = ub(func159(local1), (local1 - 4), 0);
      local0 = (((local1 + temp) & (0 - local0)) - 8);
      local0 = ((0x10 ? 0 : ((((local1 + temp) & (0 - local0)) - 8) - offset)) + local0);
      local1 = (((0x10 ? 0 : ((((local1 + temp) & (0 - local0)) - 8) - offset)) + local0) - offset);
      temp = (local0 - (((0x10 ? 0 : ((((local1 + temp) & (0 - local0)) - 8) - offset)) + local0) - offset));
      if ((state & 3)) {
      } else {
      }
      state = 6;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 0xA;

  }

  /*
   * AI Summary: The function performs a series of conditional memory address calculations and bitwise operations using the `ub` helper function, ultimately returning based on a state machine controlled by input-dependent conditions. 
  
   */

  function func362() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func363(local0, local1) {

    func438(0xA);
    return 0x100ADC;

  }


  function func364() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func365 is processMemAddr
  /* renamed vars: local2=memAddr, local3=returnCode, local4=tempVal, local5=tempFlag */
  function processMemAddr(local0, local1) {
    let Error, Unreachable, code, local6, local7, loop0, memAddr, reached, returnCode, tempFlag, tempVal;
    returnCode = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          switch (returnCode) {
                            case 0: continue loop0;
                            case 1: return;
                            case 2: return;
                            case 3: return;
                            case 4: return;
                            case 5: return;
                            case 6: return;
                            case 7: return;
                            case 8: return;
                            case 9: return;
                            default: return;
                          }
                        }
                        returnCode = 3;
                        return;
                      }
                      tempVal = (tempVal + 1);
                      if (tempFlag) {
                      } else {
                      }
                      returnCode = 6;
                      return;
                    }
                    tempVal = func145(ub(ub((memAddr + 0x14), memAddr, 8), memAddr, 0xC));
                    returnCode = 0;
                    return;
                  }
                  global0 = (memAddr + 0x20);
                  return calculateOffset((local1 + 0xC));
                }
                returnCode = 2;
                return;
              }
              local6 = (local1 + 0xC);
              local7 = ub((memAddr + 8), local1, 0xC);
              returnCode = 6;
              return;
            }
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    Gb((tempVal + local7), 0);
                                                                                                                    switch ((Pb(0x14) - 9)) {
                                                                                                                      case 0: continue loop0;
                                                                                                                      case 1: return;
                                                                                                                      case 2: return;
                                                                                                                      case 3: return;
                                                                                                                      case 4: return;
                                                                                                                      case 5: return;
                                                                                                                      case 6: return;
                                                                                                                      case 7: return;
                                                                                                                      case 8: return;
                                                                                                                      case 9: return;
                                                                                                                      case 10: return;
                                                                                                                      case 11: return;
                                                                                                                      case 12: return;
                                                                                                                      case 13: return;
                                                                                                                      case 14: return;
                                                                                                                      case 15: return;
                                                                                                                      case 16: return;
                                                                                                                      case 17: return;
                                                                                                                      case 18: return;
                                                                                                                      case 19: return;
                                                                                                                      case 20: return;
                                                                                                                      case 21: return;
                                                                                                                      case 22: return;
                                                                                                                      case 23: return;
                                                                                                                      case 24: return;
                                                                                                                      case 25: return;
                                                                                                                      case 26: return;
                                                                                                                      case 27: return;
                                                                                                                      case 28: return;
                                                                                                                      case 29: return;
                                                                                                                      case 30: return;
                                                                                                                      case 31: return;
                                                                                                                      case 32: return;
                                                                                                                      case 33: return;
                                                                                                                      case 34: return;
                                                                                                                      case 35: return;
                                                                                                                      case 36: return;
                                                                                                                      case 37: return;
                                                                                                                      case 38: return;
                                                                                                                      case 39: return;
                                                                                                                      case 40: return;
                                                                                                                      case 41: return;
                                                                                                                      case 42: return;
                                                                                                                      case 43: return;
                                                                                                                      case 44: return;
                                                                                                                      case 45: return;
                                                                                                                      case 46: return;
                                                                                                                      case 47: return;
                                                                                                                      case 48: return;
                                                                                                                      case 49: return;
                                                                                                                      default: return;
                                                                                                                    }
                                                                                                                  }
                                                                                                                  return;
                                                                                                                }
                                                                                                                return;
                                                                                                              }
                                                                                                              return;
                                                                                                            }
                                                                                                            return;
                                                                                                          }
                                                                                                          return;
                                                                                                        }
                                                                                                        return;
                                                                                                      }
                                                                                                      return;
                                                                                                    }
                                                                                                    return;
                                                                                                  }
                                                                                                  return;
                                                                                                }
                                                                                                return;
                                                                                              }
                                                                                              return;
                                                                                            }
                                                                                            return;
                                                                                          }
                                                                                          return;
                                                                                        }
                                                                                        return;
                                                                                      }
                                                                                      return;
                                                                                    }
                                                                                    return;
                                                                                  }
                                                                                  return;
                                                                                }
                                                                                return;
                                                                              }
                                                                              return;
                                                                            }
                                                                            return;
                                                                          }
                                                                          return;
                                                                        }
                                                                        return;
                                                                      }
                                                                      return;
                                                                    }
                                                                    return;
                                                                  }
                                                                  return;
                                                                }
                                                                return;
                                                              }
                                                              return;
                                                            }
                                                            return;
                                                          }
                                                          return;
                                                        }
                                                        return;
                                                      }
                                                      return;
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                                return;
                                              }
                                              return;
                                            }
                                            return;
                                          }
                                          return;
                                        }
                                        return;
                                      }
                                      return;
                                    }
                                    return;
                                  }
                                  return;
                                }
                                return;
                              }
                              return;
                            }
                            return;
                          }
                          return;
                        }
                        return;
                      }
                      return;
                    }
                    return;
                  }
                  return;
                }
                return;
              }
            }
            returnCode = 8;
            return;
          }
          memAddr = (global0 - 0x20);
          global0 = (global0 - 0x20);
          tempVal = ub(9, local1, 0x14);
          tempFlag = ub(ub(9, local1, 0x14), local1, 0x10);
          if (ub(ub(9, local1, 0x14), local1, 0x10)) {
          } else {
          }
          returnCode = 2;
          return;
        }
        tempVal = func145(ub(ub((memAddr + 0x14), memAddr, 0), memAddr, 4));
        returnCode = 0;
        return;
      }
      processTempFlags(Pb(0x14), local0, local1);
      returnCode = 3;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a state machine, primarily using memory address calculations and bitwise operations from helper functions `ub` and `Gb`, but ultimately always returns without any side effects due to hardcoded returns in each state. 
  
   */

  function func366() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func367() {
    let Attempted, ERROR, FATAL, POP, an, br_table_idx, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in br_table_idx */
  }


  function func368() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func369(local0, local1, local2) {

    func458(local2);
    return local1;

  }


  function func370() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func371() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func372 is handleContextState
  /* renamed vars: local2=context, local3=state, local4=offset, local5=value, local6=temp, local7=flag, local8=size, local9=buffer, local10=index, local11=address, local12=ptr, local13=length, local14=count */
  function handleContextState(local0, local1) {
    let Error, Sb, Unreachable, address, buffer, code, context, count, flag, index, length, local15, local16, loop0, offset, ptr, reached, size, state, temp, value;
    state = 0x35;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                {
                                                                                                                                                  {
                                                                                                                                                    {
                                                                                                                                                      {
                                                                                                                                                        {
                                                                                                                                                          {
                                                                                                                                                            {
                                                                                                                                                              {
                                                                                                                                                                {
                                                                                                                                                                  {
                                                                                                                                                                    {
                                                                                                                                                                      {
                                                                                                                                                                        {
                                                                                                                                                                          {
                                                                                                                                                                            {
                                                                                                                                                                              {
                                                                                                                                                                                {
                                                                                                                                                                                  {
                                                                                                                                                                                    {
                                                                                                                                                                                      {
                                                                                                                                                                                        {
                                                                                                                                                                                          {
                                                                                                                                                                                            {
                                                                                                                                                                                              {
                                                                                                                                                                                                {
                                                                                                                                                                                                  {
                                                                                                                                                                                                    {
                                                                                                                                                                                                      {
                                                                                                                                                                                                        {
                                                                                                                                                                                                          {
                                                                                                                                                                                                            {
                                                                                                                                                                                                              {
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        switch (state) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 0: continue loop0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 1: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 2: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 3: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 4: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 5: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 6: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 7: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 8: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 9: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 10: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 11: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 12: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 13: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 14: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 15: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 16: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 17: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 18: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 19: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 20: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 21: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 22: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 23: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 24: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 25: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 26: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 27: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 28: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 29: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 30: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 31: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 32: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 33: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 34: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 35: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 36: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 37: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 38: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 39: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 40: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 41: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 42: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 43: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 44: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 45: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 46: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 47: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 48: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 49: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 50: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 51: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 52: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 53: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 54: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 55: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 56: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 57: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 58: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 59: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 60: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 61: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 62: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 63: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 64: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 65: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 66: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 67: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 68: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 69: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 70: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 71: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 72: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 73: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 74: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 75: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 76: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 77: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 78: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 79: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 80: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 81: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 82: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 83: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 84: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 85: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 86: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 87: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 88: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 89: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 90: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 91: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 92: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 93: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 94: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 95: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 96: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 97: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 98: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 99: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 100: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 101: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 102: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 103: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 104: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 105: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 106: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 107: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 108: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 109: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 110: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 111: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 112: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 113: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 114: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 115: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 116: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 117: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 118: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 119: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 120: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 121: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 122: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 123: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 124: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 125: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 126: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 127: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 128: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 129: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 130: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 131: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 132: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 133: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 134: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 135: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 136: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 137: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 138: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 139: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 140: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 141: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 142: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 143: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 144: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 145: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 146: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 147: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 148: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 149: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 150: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 151: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 152: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 153: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 154: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 155: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 156: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 157: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 158: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 159: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 160: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 161: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 162: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 163: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 164: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 165: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 166: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 167: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 168: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 169: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 170: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 171: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 172: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 173: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 174: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 175: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 176: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 177: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 178: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 179: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 180: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 181: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 182: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 183: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 184: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 185: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 186: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 187: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 188: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 189: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 190: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 191: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 192: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 193: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 194: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 195: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 196: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 197: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 198: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 199: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 200: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 201: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 202: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 203: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 204: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 205: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 206: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 207: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 208: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 209: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 210: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 211: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 212: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 213: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 214: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 215: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 216: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 217: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 218: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 219: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 220: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 221: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 222: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 223: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case 224: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          default: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      offset = 6;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      state = (flag ? 0x53 : 0x33);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    local1 = 2;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    local15 = wb(0x100);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              switch (count) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                case 0: continue loop0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                case 1: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                case 2: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                default: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    state = 0xDE;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  state = (temp ? 0x42 : value);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                state = 0xA4;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              state = 0xA4;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            offset = (local15 >> 0x3Fn);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            state = 0x71;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          state = (offset ? 0x88 : 0xB9);
                                                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        state = (temp ? 0xD8 : 0x31);
                                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      state = (temp ? 0x7A : 0xE0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
{
{
{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
b((offset + value), 0);
switch ((sb(local0, 0, 0) - 9)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              case 0: continue loop0;
case 1: return;
case 2: return;
case 3: return;
case 4: return;
case 5: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              case 6: return;
case 7: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              case 8: return;
case 9: return;
case 10: return;
case 11: return;
case 12: return;
case 13: return;
case 14: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              case 15: return;
case 16: return;
case 17: return;
case 18: return;
case 19: return;
case 20: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              case 21: return;
case 22: return;
case 23: return;
case 24: return;
case 25: return;
case 26: return;
case 27: return;
case 28: return;
case 29: return;
case 30: return;
case 31: return;
case 32: return;
case 33: return;
case 34: return;
case 35: return;
case 36: return;
case 37: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              case 38: return;
case 39: return;
case 40: return;
case 41: return;
case 42: return;
case 43: return;
case 44: return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              case 45: return;
case 46: return;
case 47: return;
case 48: return;
case 49: return;
default: return;
}
}
return;
}
return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
return;
}
return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
return;
}
return;
}
return;
}
return;
}
return;
}
return;
}
return;
}
return;
}
return;
}
return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
return;
}
return;
}
return;
}
return;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    state = 0x18;
                                                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  value = func145(ub(ub((context + 0x138), context, 0x98), context, 0x9C));
                                                                                                                                                                                                                                                                                                                                                                                                                                                  state = 0x10;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                state = (temp ? 0xA5 : value);
                                                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              state = (index ? 0xB4 : 0xCD);
                                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            func458(offset);
                                                                                                                                                                                                                                                                                                                                                                                                                                            local1 = local1;
                                                                                                                                                                                                                                                                                                                                                                                                                                            state = 0xA4;
                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                          value = func145(ub(ub((context + 0xF8), context, 0x90), context, 0x94));
                                                                                                                                                                                                                                                                                                                                                                                                                                          state = 0x54;
                                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        Gb(context, 0xE3);
                                                                                                                                                                                                                                                                                                                                                                                                                                        state = (flag ? 0x1F : 0x10);
                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                      offset = ub(0xD1, context, 0xD4);
                                                                                                                                                                                                                                                                                                                                                                                                                                      state = (ub(0xD1, context, 0xD4) ? Bb(0x120) : 0xB1);
                                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                    state = 0xA4;
                                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                  throw new Error('Unreachable code reached');
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                size = (count >> 0x20n);
                                                                                                                                                                                                                                                                                                                                                                                                                                temp = count;
                                                                                                                                                                                                                                                                                                                                                                                                                                state = 0x19;
                                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                              func372((context + 0x138), local1);
                                                                                                                                                                                                                                                                                                                                                                                                                              Gb(context, 0x138);
                                                                                                                                                                                                                                                                                                                                                                                                                              state = (6 ? 0x4E : 0x6E);
                                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            Gb((size - 1), 0);
                                                                                                                                                                                                                                                                                                                                                                                                                            state = (0x75 ? 0xBC : 0x8E);
                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                          state = (0x7D ? 0x3C : size);
                                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        value = func145(ub(ub((context + 0x138), context, 0x68), context, 0x6C));
                                                                                                                                                                                                                                                                                                                                                                                                                        state = 0x78;
                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                      value = func145(ub(ub((context + 0xF8), context, 0x88), context, 0x8C));
                                                                                                                                                                                                                                                                                                                                                                                                                      state = 0x54;
                                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    state = 0xC0;
                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                  Qb(calculateOffset(buffer), context, 6, Pb(0xF8), (context + 0x88), calculateOffset(buffer), local0, local15, 0x10);
                                                                                                                                                                                                                                                                                                                                                                                                                  state = 0xA4;
                                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                temp = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                state = (0 ? 0xD4 : flag);
                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                              Gb((size - 1), 0);
                                                                                                                                                                                                                                                                                                                                                                                                              state = (0x61 ? 0xAC : 0xA7);
                                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            state = 0xB6;
                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                          Qb(Pb(8), sb(local0, local1, 0), 0x60, local1, offset, Pb(0x14), local0, count, 0x10);
                                                                                                                                                                                                                                                                                                                                                                                                          state = 0xA4;
                                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        func279(index, flag);
                                                                                                                                                                                                                                                                                                                                                                                                        state = 0x10;
                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                      state = (0xA ? 0xDD : ((flag - 0x30) & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    Gb(0, 0x10FC88);
                                                                                                                                                                                                                                                                                                                                                                                                    temp = 1;
                                                                                                                                                                                                                                                                                                                                                                                                    offset = func213(0xD4, flag, 1);
                                                                                                                                                                                                                                                                                                                                                                                                    state = (func213(0xD4, flag, 1) ? sb(local0, offset, 0) : 0x96);
                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                  Gb(0, 0x10FC88);
                                                                                                                                                                                                                                                                                                                                                                                                  temp = 1;
                                                                                                                                                                                                                                                                                                                                                                                                  offset = func213(0x34, flag, 1);
                                                                                                                                                                                                                                                                                                                                                                                                  state = (func213(0x34, flag, 1) ? Bb(2) : 0x96);
                                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                state = 0xCA;
                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                              state = 0x17;
                                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            value = ub(flag, buffer, 0);
                                                                                                                                                                                                                                                                                                                                                                                            state = 0xC6;
                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                          local1 = 2;
                                                                                                                                                                                                                                                                                                                                                                                          state = 0x44;
                                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        temp = 0;
                                                                                                                                                                                                                                                                                                                                                                                        state = (0 ? 0x34 : flag);
                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                      state = (context + 0xF8);
                                                                                                                                                                                                                                                                                                                                                                                      state = (ub(0xAB, context, 0xF8) ? func166(func130(sb(context, 0, 0x138), func188((context + 0x138)), 0xDF, (context + 0xF8)), state, (context + 0x138)) : 0x28);
                                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    offset = 6;
                                                                                                                                                                                                                                                                                                                                                                                    flag = 1;
                                                                                                                                                                                                                                                                                                                                                                                    state = 0x98;
                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                  func372((context + 0x138), local1);
                                                                                                                                                                                                                                                                                                                                                                                  Gb(context, 0x138);
                                                                                                                                                                                                                                                                                                                                                                                  temp = 0x76;
                                                                                                                                                                                                                                                                                                                                                                                  state = (6 ? 0x2F : 0x76);
                                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                temp = (offset + 1);
                                                                                                                                                                                                                                                                                                                                                                                Gb(size, 0);
                                                                                                                                                                                                                                                                                                                                                                                state = (0x6C ? 0xC1 : 0xA7);
                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                              func175(Pb(0x14), value, local1);
                                                                                                                                                                                                                                                                                                                                                                              offset = (offset + 1);
                                                                                                                                                                                                                                                                                                                                                                              state = 0xA4;
                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            offset = func145(ub(ub((context + 0x138), context, 0x30), context, 0x34));
                                                                                                                                                                                                                                                                                                                                                                            state = 3;
                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          state = 0x31;
                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        value = ub(func219(buffer), context, 0x13C);
                                                                                                                                                                                                                                                                                                                                                                        state = 0x78;
                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                      state = ((flag & 1) ? 0x2A : 0x9F);
                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    offset = 1;
                                                                                                                                                                                                                                                                                                                                                                    state = 0x97;
                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                  flag = ub((context + 0x30), context, 0x140);
                                                                                                                                                                                                                                                                                                                                                                  state = ((offset & 1) ? 0x1B : 0x27);
                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                state = 0x19;
                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                              throw new Error('Unreachable code reached');
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            context = (global0 - 0x1A0);
                                                                                                                                                                                                                                                                                                                                                            global0 = (global0 - 0x1A0);
                                                                                                                                                                                                                                                                                                                                                            offset = ub(0x72, local1, 0x14);
                                                                                                                                                                                                                                                                                                                                                            value = ub(ub(0x72, local1, 0x14), local1, 0x10);
                                                                                                                                                                                                                                                                                                                                                            state = (ub(ub(0x72, local1, 0x14), local1, 0x10) ? Pb(0x138) : 0x99);
                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          Gb((offset + temp), 0);
                                                                                                                                                                                                                                                                                                                                                          flag = 0xBD;
                                                                                                                                                                                                                                                                                                                                                          size = 180;
                                                                                                                                                                                                                                                                                                                                                          state = (0x19 ? 0x94 : 180);
                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        state = (((1 << size) & 0x800013) ? 0x40 : 0x7F);
                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                      state = (((1 << flag) & 0x800013) ? 0x52 : 0x80);
                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    Gb((size + 1), 0);
                                                                                                                                                                                                                                                                                                                                                    state = (0x6C ? 0x8E : 4);
                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  offset = 6;
                                                                                                                                                                                                                                                                                                                                                  state = (index ? 0x48 : 0xD2);
                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                state = 0xBA;
                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              value = ub(Pb(0x14), context, 0xD4);
                                                                                                                                                                                                                                                                                                                                              temp = ub((offset + 2), context, 0xD8);
                                                                                                                                                                                                                                                                                                                                              size = ub(local1, context, 0xDC);
                                                                                                                                                                                                                                                                                                                                              offset = 5;
                                                                                                                                                                                                                                                                                                                                              flag = 0;
                                                                                                                                                                                                                                                                                                                                              state = 0x98;
                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            state = (0x19 ? 0xBD : size);
                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          temp = ub(0xBF, context, 0x140);
                                                                                                                                                                                                                                                                                                                                          state = ((offset & 1) ? 0xD0 : 0x9B);
                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        state = 0x8F;
                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      offset = (offset + 1);
                                                                                                                                                                                                                                                                                                                                      state = (temp ? 0x4A : offset);
                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    offset = 6;
                                                                                                                                                                                                                                                                                                                                    state = 0x98;
                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  offset = func145(ub(ub((context + 0x138), context, 0x38), context, 0x3C));
                                                                                                                                                                                                                                                                                                                                  state = 0x11;
                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                state = 0x89;
                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              offset = 2;
                                                                                                                                                                                                                                                                                                                              state = 0x71;
                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            temp = (offset + 1);
                                                                                                                                                                                                                                                                                                                            Gb(size, 0);
                                                                                                                                                                                                                                                                                                                            state = (0x6C ? 0xB : 0x8E);
                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          offset = (offset + 1);
                                                                                                                                                                                                                                                                                                                          state = (value ? 0x92 : offset);
                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        Gb(local1, 0x18);
                                                                                                                                                                                                                                                                                                                        flag = processBaseAddrOffset(sb(0x51, (local1 + 1), 0x18), context, local1);
                                                                                                                                                                                                                                                                                                                        Qb(Pb(0x14), local1, (offset + 1), Pb(0x14), processBaseAddrOffset(sb(0x51, (local1 + 1), 0x18), context, local1), Pb(0x150), context, count, 0x140);
                                                                                                                                                                                                                                                                                                                        state = (temp ? 0 : 0xA2);
                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      state = 0xC0;
                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    state = 0xA4;
                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  Gb((offset + value), 0);
                                                                                                                                                                                                                                                                                                                  flag = 0x90;
                                                                                                                                                                                                                                                                                                                  size = 135;
                                                                                                                                                                                                                                                                                                                  state = (0x19 ? 0x37 : 135);
                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                offset = 4;
                                                                                                                                                                                                                                                                                                                temp = 0;
                                                                                                                                                                                                                                                                                                                count = wb(0xFC);
                                                                                                                                                                                                                                                                                                                value = ub(context, context, 0xF8);
                                                                                                                                                                                                                                                                                                                state = 0x47;
                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              offset = (offset - 1);
                                                                                                                                                                                                                                                                                                              state = (value ? 0x89 : offset);
                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  switch ((flag - 0x5B)) {
                                                                                                                                                                                                                                                                                                                                                                                    case 0: continue loop0;
                                                                                                                                                                                                                                                                                                                                                                                    case 1: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 2: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 3: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 4: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 5: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 6: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 7: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 8: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 9: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 10: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 11: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 12: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 13: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 14: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 15: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 16: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 17: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 18: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 19: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 20: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 21: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 22: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 23: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 24: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 25: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 26: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 27: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 28: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 29: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 30: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 31: return;
                                                                                                                                                                                                                                                                                                                                                                                    case 32: return;
                                                                                                                                                                                                                                                                                                                                                                                    default: return;
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            state = 0x20;
                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          value = (context + 0x178);
                                                                                                                                                                                                                                                                                                          state = (context + 0x138);
                                                                                                                                                                                                                                                                                                          offset = ((context + 0x138) + 0x10);
                                                                                                                                                                                                                                                                                                          count = wb(0);
                                                                                                                                                                                                                                                                                                          Qb(0x20, 0x20, 0x20, 0x20, 0xB2, ((context + 0x178) + 0x10), ((context + 0x138) + 0x10), wb(0), 0);
                                                                                                                                                                                                                                                                                                          value = (state + 8);
                                                                                                                                                                                                                                                                                                          local15 = wb(0);
                                                                                                                                                                                                                                                                                                          Qb(0x20, 0x20, 0xCC, 0x20, 0x20, (value + 8), (state + 8), wb(0), 0);
                                                                                                                                                                                                                                                                                                          local16 = wb(0x138);
                                                                                                                                                                                                                                                                                                          Qb(0x20, 0xD6, 0x20, 0x20, 0x20, context, context, wb(0x138), 0x178);
                                                                                                                                                                                                                                                                                                          Qb(0x20, 0x20, 0x20, 0x20, 0x20, 0x20, (index + 0x10), count, 0);
                                                                                                                                                                                                                                                                                                          Qb(0x20, 0x20, 0x20, 0x20, 0x20, 0x8D, (index + 8), local15, 0);
                                                                                                                                                                                                                                                                                                          Qb(0xB3, 0x20, 0x20, 0x20, 0x20, 0x20, index, local16, 0);
                                                                                                                                                                                                                                                                                                          ptr = (context + 0xF8);
                                                                                                                                                                                                                                                                                                          Qb(Bb(0), local1, (offset - 1), Pb(0x14), 0x77, ((context + 0xF8) + 8), value, wb(0), 0);
                                                                                                                                                                                                                                                                                                          Qb(sb(context, offset, 0x138), index, func154(), local0, 1, (ptr + 0x10), offset, wb(0), 0);
                                                                                                                                                                                                                                                                                                          Qb(context, value, Pb(0x13C), ub((ptr + 0x18), (state + 0x18), 0), Pb(0), context, context, wb(0x138), 0xF8);
                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  switch ((temp - 0x80000000)) {
                                                                                                                                                                                                                                                                                                                    case 0: continue loop0;
                                                                                                                                                                                                                                                                                                                    case 1: return;
                                                                                                                                                                                                                                                                                                                    default: return;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          state = 0x84;
                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        state = 0xA4;
                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      local1 = 2;
                                                                                                                                                                                                                                                                                                      local15 = wb(0x100);
                                                                                                                                                                                                                                                                                                      offset = 0;
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                switch (count) {
                                                                                                                                                                                                                                                                                                                  case 0: continue loop0;
                                                                                                                                                                                                                                                                                                                  case 1: return;
                                                                                                                                                                                                                                                                                                                  case 2: return;
                                                                                                                                                                                                                                                                                                                  default: return;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      state = 0x5C;
                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    state = 0x8F;
                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                  offset = (offset + 1);
                                                                                                                                                                                                                                                                                                  state = (value ? 0xB6 : offset);
                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                state = 0x19;
                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                              state = 0xF;
                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            value = func145(ub(ub((context + 0x194), context, 0xC0), context, 0xC4));
                                                                                                                                                                                                                                                                                            state = 8;
                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                          temp = 0;
                                                                                                                                                                                                                                                                                          state = (0 ? 0x6C : offset);
                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        state = ((flag & 1) ? 0x80 : 0x70);
                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      value = (temp ? value : value);
                                                                                                                                                                                                                                                                                      state = (offset ? temp : (temp ? value : value));
                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    state = 0x65;
                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  state = 0xE;
                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                state = 0x6D;
                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              local1 = 0;
                                                                                                                                                                                                                                                                              state = (0x7FEFFFFFFFFFFFFFn ? 0x44 : (local15 & 0x7FFFFFFFFFFFFFFFn));
                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            offset = func145(ub(ub((context + 0x138), context, 0x70), context, 0x74));
                                                                                                                                                                                                                                                                            state = 0xA4;
                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          temp = 0;
                                                                                                                                                                                                                                                                          state = (0 ? 0xC8 : offset);
                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        local1 = ub(func325(buffer, local1), context, 0x13C);
                                                                                                                                                                                                                                                                        value = ub(0x87, context, 0x138);
                                                                                                                                                                                                                                                                        state = (2 ? 0x63 : ub(0x87, context, 0x138));
                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      state = (flag ? 0x21 : 0x3B);
                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    offset = func145(ub(ub((context + 0x138), context, 0x48), context, 0x4C));
                                                                                                                                                                                                                                                                    state = 0xA4;
                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  offset = (offset + 1);
                                                                                                                                                                                                                                                                  state = (value ? 0x36 : offset);
                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                offset = ub(0x43, context, 0x140);
                                                                                                                                                                                                                                                                state = ((value & 1) ? 0x56 : 0x5E);
                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              state = (offset ? 0xD9 : 0x8A);
                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            offset = ub(0xCA, local1, 0x14);
                                                                                                                                                                                                                                                            temp = ub(ub(0xCA, local1, 0x14), local1, 0x10);
                                                                                                                                                                                                                                                            state = (ub(ub(0xCA, local1, 0x14), local1, 0x10) ? Pb(0x14) : 0x9D);
                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          value = func145(ub(ub((context + 0x138), context, 8), context, 0xC));
                                                                                                                                                                                                                                                          state = 0x2C;
                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        state = 0xA4;
                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      func279(ub(sb(local0, 6, 0), context, 0xFC), (size * 0x18));
                                                                                                                                                                                                                                                      state = 0x83;
                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    temp = ub(Pb(4), buffer, 0);
                                                                                                                                                                                                                                                    state = 0x92;
                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  state = 0x6B;
                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                state = (6 ? 0x2C : offset);
                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              throw new Error('Unreachable code reached');
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            offset = ub(0xCF, local1, 0x14);
                                                                                                                                                                                                                                            temp = ub(ub(0xCF, local1, 0x14), local1, 0x10);
                                                                                                                                                                                                                                            state = (ub(ub(0xCF, local1, 0x14), local1, 0x10) ? 0x1E : 0x23);
                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          value = ub(ub(local0, context, 0x100), context, 0x13C);
                                                                                                                                                                                                                                          state = 8;
                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        local1 = 2;
                                                                                                                                                                                                                                        state = 0xDA;
                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      value = func145(ub(ub((context + 0x138), context, 0x60), context, 0x64));
                                                                                                                                                                                                                                      state = 0x78;
                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    Qb(func188((context + 0x138)), context, 7, Pb(0x138), (context + 0x60), calculateOffset(buffer), local0, local15, 0x10);
                                                                                                                                                                                                                                    state = 0xA4;
                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  offset = func145(ub(ub((context + 0x138), context, 0x10), context, 0x14));
                                                                                                                                                                                                                                  state = 0xA4;
                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                value = func145(ub(ub((context + 0x138), context, 0x78), context, 0x7C));
                                                                                                                                                                                                                                state = 0x9C;
                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              offset = (offset + 1);
                                                                                                                                                                                                                              state = (temp ? 0x91 : offset);
                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            func257((context + 0xD4), (context + 0x178), (context + 0xE0));
                                                                                                                                                                                                                            Gb(context, 0x138);
                                                                                                                                                                                                                            state = (6 ? 0x59 : 0x65);
                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          size = (context + 0x176);
                                                                                                                                                                                                                          Gb((address + 2), 0);
                                                                                                                                                                                                                          flag = (context + 0x168);
                                                                                                                                                                                                                          Qb(local1, (offset + 1), Pb(0x14), 0xDC, sb((context + 0x138), (context + 0x176), 0), (context + 0x168), (index + 8), wb(0), 0);
                                                                                                                                                                                                                          Qb(context, 0x10, Pb(0x138), Sb((context + 0x78), calculateOffset(buffer), context, address, 0), Bb(0x174), context, index, wb(0), 0x160);
                                                                                                                                                                                                                          length = ub(Pb(4), context, 0x13C);
                                                                                                                                                                                                                          value = ub(offset, context, 0x100);
                                                                                                                                                                                                                          state = (value ? 0xB8 : ub(0xD5, context, 0xF8));
                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        state = 0x36;
                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      offset = 6;
                                                                                                                                                                                                                      temp = 1;
                                                                                                                                                                                                                      size = ub(0x83, context, 0xF8);
                                                                                                                                                                                                                      state = (ub(0x83, context, 0xF8) ? func189((context + 0xF8)) : 0x68);
                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    func372((context + 0xE0), local1);
                                                                                                                                                                                                                    Gb(context, 0xE0);
                                                                                                                                                                                                                    state = (6 ? 0xA8 : 0x75);
                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  func279(flag, temp);
                                                                                                                                                                                                                  state = 0xE0;
                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                offset = 6;
                                                                                                                                                                                                                value = flag;
                                                                                                                                                                                                                state = 0x19;
                                                                                                                                                                                                                return;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              state = 0x28;
                                                                                                                                                                                                              return;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            {
                                                                                                                                                                                                              {
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          size = (offset + temp);
                                                                                                                                                                                                                                                                                          Gb(((offset + temp) - 2), 0);
                                                                                                                                                                                                                                                                                          flag = func188((context + 0x138));
                                                                                                                                                                                                                                                                                          switch ((func188((context + 0x138)) - 9)) {
                                                                                                                                                                                                                                                                                            case 0: continue loop0;
                                                                                                                                                                                                                                                                                            case 1: return;
                                                                                                                                                                                                                                                                                            case 2: return;
                                                                                                                                                                                                                                                                                            case 3: return;
                                                                                                                                                                                                                                                                                            case 4: return;
                                                                                                                                                                                                                                                                                            case 5: return;
                                                                                                                                                                                                                                                                                            case 6: return;
                                                                                                                                                                                                                                                                                            case 7: return;
                                                                                                                                                                                                                                                                                            case 8: return;
                                                                                                                                                                                                                                                                                            case 9: return;
                                                                                                                                                                                                                                                                                            case 10: return;
                                                                                                                                                                                                                                                                                            case 11: return;
                                                                                                                                                                                                                                                                                            case 12: return;
                                                                                                                                                                                                                                                                                            case 13: return;
                                                                                                                                                                                                                                                                                            case 14: return;
                                                                                                                                                                                                                                                                                            case 15: return;
                                                                                                                                                                                                                                                                                            case 16: return;
                                                                                                                                                                                                                                                                                            case 17: return;
                                                                                                                                                                                                                                                                                            case 18: return;
                                                                                                                                                                                                                                                                                            case 19: return;
                                                                                                                                                                                                                                                                                            case 20: return;
                                                                                                                                                                                                                                                                                            case 21: return;
                                                                                                                                                                                                                                                                                            case 22: return;
                                                                                                                                                                                                                                                                                            case 23: return;
                                                                                                                                                                                                                                                                                            case 24: return;
                                                                                                                                                                                                                                                                                            case 25: return;
                                                                                                                                                                                                                                                                                            case 26: return;
                                                                                                                                                                                                                                                                                            case 27: return;
                                                                                                                                                                                                                                                                                            case 28: return;
                                                                                                                                                                                                                                                                                            case 29: return;
                                                                                                                                                                                                                                                                                            case 30: return;
                                                                                                                                                                                                                                                                                            case 31: return;
                                                                                                                                                                                                                                                                                            case 32: return;
                                                                                                                                                                                                                                                                                            case 33: return;
                                                                                                                                                                                                                                                                                            case 34: return;
                                                                                                                                                                                                                                                                                            case 35: return;
                                                                                                                                                                                                                                                                                            case 36: return;
                                                                                                                                                                                                                                                                                            default: return;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                return;
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            state = 0x4D;
                                                                                                                                                                                                            return;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          value = func145(ub(ub((context + 0x138), context, 0x50), context, 0x54));
                                                                                                                                                                                                          state = 0x78;
                                                                                                                                                                                                          return;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        state = (0x19 ? 0x90 : size);
                                                                                                                                                                                                        return;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      state = (0x5D ? 0x7E : size);
                                                                                                                                                                                                      return;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    state = (temp ? 0xC7 : 0x2E);
                                                                                                                                                                                                    return;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  offset = (offset + 1);
                                                                                                                                                                                                  state = (size ? 0xC6 : offset);
                                                                                                                                                                                                  return;
                                                                                                                                                                                                }
                                                                                                                                                                                                state = 0x47;
                                                                                                                                                                                                return;
                                                                                                                                                                                              }
                                                                                                                                                                                              state = (context + 0x120);
                                                                                                                                                                                              Qb(0x2A, local1, (offset + 1), Pb(0x14), 0x8B, ((context + 0x120) + 8), (address + 8), wb(0), 0);
                                                                                                                                                                                              Qb(0x12, Pb(0x138), (context + 0x50), calculateOffset(buffer), 0xA9, (state + 0x10), (address + 0x10), wb(0), 0);
                                                                                                                                                                                              Qb(flag, Pb(0x118), context, temp, Pb(0x114), context, address, wb(0), 0x120);
                                                                                                                                                                                              func257((context + 0xD4), (context + 0x114), state);
                                                                                                                                                                                              Gb(context, 0x138);
                                                                                                                                                                                              state = (6 ? 0x5B : 0x6D);
                                                                                                                                                                                              return;
                                                                                                                                                                                            }
                                                                                                                                                                                            offset = func145(ub(ub((context + 0x138), context, 0x28), context, 0x2C));
                                                                                                                                                                                            state = 3;
                                                                                                                                                                                            return;
                                                                                                                                                                                          }
                                                                                                                                                                                          state = (temp ? 0x85 : value);
                                                                                                                                                                                          return;
                                                                                                                                                                                        }
                                                                                                                                                                                        state = 0xA4;
                                                                                                                                                                                        return;
                                                                                                                                                                                      }
                                                                                                                                                                                      Gb(0, 0x10FC88);
                                                                                                                                                                                      temp = 1;
                                                                                                                                                                                      value = func213(0x6C, offset, 1);
                                                                                                                                                                                      state = (func213(0x6C, offset, 1) ? local1 : 0xC5);
                                                                                                                                                                                      return;
                                                                                                                                                                                    }
                                                                                                                                                                                    value = func145(ub(ub((context + 0x138), context, 0x80), context, 0x84));
                                                                                                                                                                                    state = 0x9C;
                                                                                                                                                                                    return;
                                                                                                                                                                                  }
                                                                                                                                                                                  value = 1;
                                                                                                                                                                                  state = 0xD;
                                                                                                                                                                                  return;
                                                                                                                                                                                }
                                                                                                                                                                                state = 0x55;
                                                                                                                                                                                return;
                                                                                                                                                                              }
                                                                                                                                                                              state = (0x5D ? 0x4B : size);
                                                                                                                                                                              return;
                                                                                                                                                                            }
                                                                                                                                                                            temp = (offset - 1);
                                                                                                                                                                            state = (temp ? 0x42 : value);
                                                                                                                                                                            return;
                                                                                                                                                                          }
                                                                                                                                                                          offset = func145(ub(ub((context + 0x138), context, 0x20), context, 0x24));
                                                                                                                                                                          state = 0xB5;
                                                                                                                                                                          return;
                                                                                                                                                                        }
                                                                                                                                                                        value = func145(ub(ub((context + 0x138), context, 0x58), context, 0x5C));
                                                                                                                                                                        state = 0x78;
                                                                                                                                                                        return;
                                                                                                                                                                      }
                                                                                                                                                                      state = (0x7D ? 0x9E : flag);
                                                                                                                                                                      return;
                                                                                                                                                                    }
                                                                                                                                                                    value = func145(ub(ub((context + 0x138), context, 0xB0), context, 0xB4));
                                                                                                                                                                    state = 0x10;
                                                                                                                                                                    return;
                                                                                                                                                                  }
                                                                                                                                                                  {
                                                                                                                                                                    {
                                                                                                                                                                      {
                                                                                                                                                                        {
                                                                                                                                                                          {
                                                                                                                                                                            {
                                                                                                                                                                              {
                                                                                                                                                                                {
                                                                                                                                                                                  {
                                                                                                                                                                                    {
                                                                                                                                                                                      {
                                                                                                                                                                                        {
                                                                                                                                                                                          {
                                                                                                                                                                                            {
                                                                                                                                                                                              {
                                                                                                                                                                                                {
                                                                                                                                                                                                  {
                                                                                                                                                                                                    {
                                                                                                                                                                                                      {
                                                                                                                                                                                                        {
                                                                                                                                                                                                          {
                                                                                                                                                                                                            {
                                                                                                                                                                                                              {
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              Gb((offset + temp), 0);
                                                                                                                                                                                                                                              size = calculateOffset(buffer);
                                                                                                                                                                                                                                              switch ((calculateOffset(buffer) - 9)) {
                                                                                                                                                                                                                                                case 0: continue loop0;
                                                                                                                                                                                                                                                case 1: return;
                                                                                                                                                                                                                                                case 2: return;
                                                                                                                                                                                                                                                case 3: return;
                                                                                                                                                                                                                                                case 4: return;
                                                                                                                                                                                                                                                case 5: return;
                                                                                                                                                                                                                                                case 6: return;
                                                                                                                                                                                                                                                case 7: return;
                                                                                                                                                                                                                                                case 8: return;
                                                                                                                                                                                                                                                case 9: return;
                                                                                                                                                                                                                                                case 10: return;
                                                                                                                                                                                                                                                case 11: return;
                                                                                                                                                                                                                                                case 12: return;
                                                                                                                                                                                                                                                case 13: return;
                                                                                                                                                                                                                                                case 14: return;
                                                                                                                                                                                                                                                case 15: return;
                                                                                                                                                                                                                                                case 16: return;
                                                                                                                                                                                                                                                case 17: return;
                                                                                                                                                                                                                                                case 18: return;
                                                                                                                                                                                                                                                case 19: return;
                                                                                                                                                                                                                                                case 20: return;
                                                                                                                                                                                                                                                case 21: return;
                                                                                                                                                                                                                                                case 22: return;
                                                                                                                                                                                                                                                case 23: return;
                                                                                                                                                                                                                                                case 24: return;
                                                                                                                                                                                                                                                case 25: return;
                                                                                                                                                                                                                                                case 26: return;
                                                                                                                                                                                                                                                case 27: return;
                                                                                                                                                                                                                                                case 28: return;
                                                                                                                                                                                                                                                case 29: return;
                                                                                                                                                                                                                                                case 30: return;
                                                                                                                                                                                                                                                case 31: return;
                                                                                                                                                                                                                                                case 32: return;
                                                                                                                                                                                                                                                case 33: return;
                                                                                                                                                                                                                                                case 34: return;
                                                                                                                                                                                                                                                case 35: return;
                                                                                                                                                                                                                                                default: return;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                return;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              return;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            return;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          return;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        return;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      return;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    return;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  return;
                                                                                                                                                                                                }
                                                                                                                                                                                                return;
                                                                                                                                                                                              }
                                                                                                                                                                                              return;
                                                                                                                                                                                            }
                                                                                                                                                                                            return;
                                                                                                                                                                                          }
                                                                                                                                                                                          return;
                                                                                                                                                                                        }
                                                                                                                                                                                        return;
                                                                                                                                                                                      }
                                                                                                                                                                                      return;
                                                                                                                                                                                    }
                                                                                                                                                                                    return;
                                                                                                                                                                                  }
                                                                                                                                                                                  return;
                                                                                                                                                                                }
                                                                                                                                                                                return;
                                                                                                                                                                              }
                                                                                                                                                                              return;
                                                                                                                                                                            }
                                                                                                                                                                            return;
                                                                                                                                                                          }
                                                                                                                                                                          return;
                                                                                                                                                                        }
                                                                                                                                                                        return;
                                                                                                                                                                      }
                                                                                                                                                                      return;
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                  state = 0x8C;
                                                                                                                                                                  return;
                                                                                                                                                                }
                                                                                                                                                                temp = (offset + 2);
                                                                                                                                                                Gb((size + 1), 0);
                                                                                                                                                                state = (0x73 ? 2 : 0xA7);
                                                                                                                                                                return;
                                                                                                                                                              }
                                                                                                                                                              state = (((1 << size) & 0x800013) ? 0x62 : 0x3D);
                                                                                                                                                              return;
                                                                                                                                                            }
                                                                                                                                                            state = (ub(0x29, context, 0xF8) ? func166(Pb(0x138), (context + 0xF8), (context + 0x138)) : 0x7C);
                                                                                                                                                            return;
                                                                                                                                                          }
                                                                                                                                                          func458(flag);
                                                                                                                                                          index = value;
                                                                                                                                                          offset = ub(0xE, local1, 0x14);
                                                                                                                                                          temp = ub(ub(0xE, local1, 0x14), local1, 0x10);
                                                                                                                                                          state = (ub(ub(0xE, local1, 0x14), local1, 0x10) ? Pb(0x178) : 0xD7);
                                                                                                                                                          return;
                                                                                                                                                        }
                                                                                                                                                        func458(temp);
                                                                                                                                                        flag = value;
                                                                                                                                                        offset = ub(0x55, local1, 0x14);
                                                                                                                                                        size = ub(ub(0x55, local1, 0x14), local1, 0x10);
                                                                                                                                                        state = (ub(ub(0x55, local1, 0x14), local1, 0x10) ? offset : 0x25);
                                                                                                                                                        return;
                                                                                                                                                      }
                                                                                                                                                      Gb(local1, 0x18);
                                                                                                                                                      processReturnValue(sb(flag, (local1 + 1), 0x18), local1);
                                                                                                                                                      index = context;
                                                                                                                                                      Qb(index, Pb(0x17C), sb(context, offset, 0x138), context, index, Pb(0x150), context, count, 0x148);
                                                                                                                                                      Gb((context + 0x122), 0);
                                                                                                                                                      state = (flag ? 0x3A : 0xC);
                                                                                                                                                      return;
                                                                                                                                                    }
                                                                                                                                                    index = (0 - value);
                                                                                                                                                    offset = (offset + 2);
                                                                                                                                                    buffer = (local1 + 0xC);
                                                                                                                                                    temp = ub(sb(Bb(0x139), context, 0x13B), local1, 0xC);
                                                                                                                                                    state = 0x7D;
                                                                                                                                                    return;
                                                                                                                                                  }
                                                                                                                                                  temp = (offset + 1);
                                                                                                                                                  Gb(size, 0);
                                                                                                                                                  state = (0x75 ? 0x86 : 0x2D);
                                                                                                                                                  return;
                                                                                                                                                }
                                                                                                                                                size = 0;
                                                                                                                                                state = (0 ? 0x12 : temp);
                                                                                                                                                return;
                                                                                                                                              }
                                                                                                                                              offset = 6;
                                                                                                                                              flag = 1;
                                                                                                                                              state = 0x98;
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            address = (context + 0xFC);
                                                                                                                                            index = (context + 0x13C);
                                                                                                                                            state = 0xCF;
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          value = func145(ub(ub((context + 0x138), context, 0xC8), context, 0xCC));
                                                                                                                                          state = 0x10;
                                                                                                                                          return;
                                                                                                                                        }
                                                                                                                                        offset = (offset + 1);
                                                                                                                                        state = (value ? 0x17 : offset);
                                                                                                                                        return;
                                                                                                                                      }
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                {
                                                                                                                                                  {
                                                                                                                                                    {
                                                                                                                                                      {
                                                                                                                                                        {
                                                                                                                                                          {
                                                                                                                                                            {
                                                                                                                                                              {
                                                                                                                                                                {
                                                                                                                                                                  {
                                                                                                                                                                    {
                                                                                                                                                                      {
                                                                                                                                                                        {
                                                                                                                                                                          {
                                                                                                                                                                            {
                                                                                                                                                                              {
                                                                                                                                                                                {
                                                                                                                                                                                  {
                                                                                                                                                                                    {
                                                                                                                                                                                      {
                                                                                                                                                                                        {
                                                                                                                                                                                          {
                                                                                                                                                                                            {
                                                                                                                                                                                              {
                                                                                                                                                                                                {
                                                                                                                                                                                                  {
                                                                                                                                                                                                    {
                                                                                                                                                                                                      {
                                                                                                                                                                                                        {
                                                                                                                                                                                                          {
                                                                                                                                                                                                            {
                                                                                                                                                                                                              {
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  Gb((offset + value), 0);
                                                                                                                                                                                                                  size = 0x1D;
                                                                                                                                                                                                                  switch (20) {
                                                                                                                                                                                                                    case 0: continue loop0;
                                                                                                                                                                                                                    case 1: return;
                                                                                                                                                                                                                    case 2: return;
                                                                                                                                                                                                                    case 3: return;
                                                                                                                                                                                                                    case 4: return;
                                                                                                                                                                                                                    case 5: return;
                                                                                                                                                                                                                    case 6: return;
                                                                                                                                                                                                                    case 7: return;
                                                                                                                                                                                                                    case 8: return;
                                                                                                                                                                                                                    case 9: return;
                                                                                                                                                                                                                    case 10: return;
                                                                                                                                                                                                                    case 11: return;
                                                                                                                                                                                                                    case 12: return;
                                                                                                                                                                                                                    case 13: return;
                                                                                                                                                                                                                    case 14: return;
                                                                                                                                                                                                                    case 15: return;
                                                                                                                                                                                                                    case 16: return;
                                                                                                                                                                                                                    case 17: return;
                                                                                                                                                                                                                    case 18: return;
                                                                                                                                                                                                                    case 19: return;
                                                                                                                                                                                                                    case 20: return;
                                                                                                                                                                                                                    case 21: return;
                                                                                                                                                                                                                    case 22: return;
                                                                                                                                                                                                                    case 23: return;
                                                                                                                                                                                                                    case 24: return;
                                                                                                                                                                                                                    case 25: return;
                                                                                                                                                                                                                    case 26: return;
                                                                                                                                                                                                                    case 27: return;
                                                                                                                                                                                                                    case 28: return;
                                                                                                                                                                                                                    case 29: return;
                                                                                                                                                                                                                    case 30: return;
                                                                                                                                                                                                                    case 31: return;
                                                                                                                                                                                                                    case 32: return;
                                                                                                                                                                                                                    case 33: return;
                                                                                                                                                                                                                    case 34: return;
                                                                                                                                                                                                                    case 35: return;
                                                                                                                                                                                                                    default: return;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                return;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              return;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            return;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          return;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        return;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      return;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    return;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  return;
                                                                                                                                                                                                }
                                                                                                                                                                                                return;
                                                                                                                                                                                              }
                                                                                                                                                                                              return;
                                                                                                                                                                                            }
                                                                                                                                                                                            return;
                                                                                                                                                                                          }
                                                                                                                                                                                          return;
                                                                                                                                                                                        }
                                                                                                                                                                                        return;
                                                                                                                                                                                      }
                                                                                                                                                                                      return;
                                                                                                                                                                                    }
                                                                                                                                                                                    return;
                                                                                                                                                                                  }
                                                                                                                                                                                  return;
                                                                                                                                                                                }
                                                                                                                                                                                return;
                                                                                                                                                                              }
                                                                                                                                                                              return;
                                                                                                                                                                            }
                                                                                                                                                                            return;
                                                                                                                                                                          }
                                                                                                                                                                          return;
                                                                                                                                                                        }
                                                                                                                                                                        return;
                                                                                                                                                                      }
                                                                                                                                                                      return;
                                                                                                                                                                    }
                                                                                                                                                                    return;
                                                                                                                                                                  }
                                                                                                                                                                  return;
                                                                                                                                                                }
                                                                                                                                                                return;
                                                                                                                                                              }
                                                                                                                                                              return;
                                                                                                                                                            }
                                                                                                                                                            return;
                                                                                                                                                          }
                                                                                                                                                          return;
                                                                                                                                                        }
                                                                                                                                                        return;
                                                                                                                                                      }
                                                                                                                                                      return;
                                                                                                                                                    }
                                                                                                                                                    return;
                                                                                                                                                  }
                                                                                                                                                  return;
                                                                                                                                                }
                                                                                                                                                return;
                                                                                                                                              }
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          return;
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      state = 0x16;
                                                                                                                                      return;
                                                                                                                                    }
                                                                                                                                    throw new Error('Unreachable code reached');
                                                                                                                                  }
                                                                                                                                  state = (flag ? 0x7B : 0x13);
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                state = 0x91;
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              global0 = (context + 0x1A0);
                                                                                                                              return 0x74;
                                                                                                                            }
                                                                                                                            offset = func145(ub(ub((context + 0x138), context, 0x18), context, 0x1C));
                                                                                                                            state = 0xB5;
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          state = (context + 0x138);
                                                                                                                          index = ((context + 0x138) + 8);
                                                                                                                          address = (state | 1);
                                                                                                                          flag = 1;
                                                                                                                          state = 0x69;
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        offset = func145(ub(ub((context + 0x138), context, 0x40), context, 0x44));
                                                                                                                        state = 0x11;
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      count = wb(0xF0);
                                                                                                                      size = ub(context, context, 0xEC);
                                                                                                                      temp = ub(func219(buffer), context, 0xE8);
                                                                                                                      value = ub((context - 0xFFFFFFC0), context, 0xE4);
                                                                                                                      state = 0xF;
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    value = ub(func325(buffer, local1), context, 0x13C);
                                                                                                                    offset = ub(0xE0, context, 0x138);
                                                                                                                    state = (2 ? 0x3E : ub(0xE0, context, 0x138));
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  state = 0xCA;
                                                                                                                  return;
                                                                                                                }
                                                                                                                state = 0x29;
                                                                                                                return;
                                                                                                              }
                                                                                                              value = (temp ? value : value);
                                                                                                              state = (offset ? temp : (temp ? value : value));
                                                                                                              return;
                                                                                                            }
                                                                                                            offset = (offset + 1);
                                                                                                            state = (2 ? 0x7D : (index + (offset + 1)));
                                                                                                            return;
                                                                                                          }
                                                                                                          Gb((size - 1), 0);
                                                                                                          state = (0x72 ? 0x58 : 0x2D);
                                                                                                          return;
                                                                                                        }
                                                                                                        offset = (local15 >> 0x3Fn);
                                                                                                        state = 0x1A;
                                                                                                        return;
                                                                                                      }
                                                                                                      Gb((size + 1), 0);
                                                                                                      state = (0x65 ? 0x2D : 0x4F);
                                                                                                      return;
                                                                                                    }
                                                                                                    state = ub(context, context, 0xD8);
                                                                                                    offset = 1;
                                                                                                    flag = ub(Pb(0x13C), context, 0xDC);
                                                                                                    state = 0x95;
                                                                                                    return;
                                                                                                  }
                                                                                                  Gb(local1, 0x18);
                                                                                                  size = (local1 - 1);
                                                                                                  state = ((size & 0xFF) ? 0x4C : 0x5D);
                                                                                                  return;
                                                                                                }
                                                                                                Gb(local1, 0x18);
                                                                                                temp = (local1 - 1);
                                                                                                state = ((temp & 0xFF) ? 0xC4 : 0x61);
                                                                                                return;
                                                                                              }
                                                                                              offset = 6;
                                                                                              value = index;
                                                                                              state = 0x6A;
                                                                                              return;
                                                                                            }
                                                                                            state = 0xA4;
                                                                                            return;
                                                                                          }
                                                                                          Gb((offset + temp), 0);
                                                                                          size = 0x80;
                                                                                          flag = 119;
                                                                                          state = (0x17 ? 0x38 : 119);
                                                                                          return;
                                                                                        }
                                                                                        value = flag;
                                                                                        state = 0x10;
                                                                                        return;
                                                                                      }
                                                                                      processArgOffset(sb(local0, 6, 0), local0, offset, Pb(4), (context + 0xF8));
                                                                                      state = 0xD5;
                                                                                      return;
                                                                                    }
                                                                                    value = 1;
                                                                                    state = 0xC5;
                                                                                    return;
                                                                                  }
                                                                                  offset = 1;
                                                                                  state = 0x96;
                                                                                  return;
                                                                                }
                                                                                value = func145(ub(ub((context + 0x138), context, 0xA8), context, 0xAC));
                                                                                state = 0x10;
                                                                                return;
                                                                              }
                                                                              value = (temp ? value : value);
                                                                              state = (offset ? temp : (temp ? value : value));
                                                                              return;
                                                                            }
                                                                            state = (0x7D ? 0xCB : flag);
                                                                            return;
                                                                          }
                                                                          offset = (offset + 1);
                                                                          state = (temp ? 9 : offset);
                                                                          return;
                                                                        }
                                                                        flag = 1;
                                                                        value = ub(func325(buffer, local1), context, 0x13C);
                                                                        offset = ub(0x41, context, 0x138);
                                                                        state = (2 ? 0x32 : ub(0x41, context, 0x138));
                                                                        return;
                                                                      }
                                                                      state = 0x6A;
                                                                      return;
                                                                    }
                                                                    state = (temp ? 0x42 : value);
                                                                    return;
                                                                  }
                                                                  Gb((size + 2), 0);
                                                                  state = (0x65 ? 0xA7 : 0x49);
                                                                  return;
                                                                }
                                                                value = func145(ub(ub((context + 0x194), context, 0xB8), context, 0xBC));
                                                                state = 8;
                                                                return;
                                                              }
                                                              offset = (offset - 1);
                                                              Qb(local1, (offset - 1), Pb(0x14), context, 0, Pb(0x100), context, 0x800000000n, 0xF8);
                                                              state = (value ? 0x8F : offset);
                                                              return;
                                                            }
                                                            func458(offset);
                                                            local1 = local1;
                                                            state = 0xA4;
                                                            return;
                                                          }
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                {
                                                                                                                                                  {
                                                                                                                                                    {
                                                                                                                                                      {
                                                                                                                                                        {
                                                                                                                                                          {
                                                                                                                                                            {
                                                                                                                                                              {
                                                                                                                                                                {
                                                                                                                                                                  Gb((offset + value), 0);
                                                                                                                                                                  switch ((sb(local0, 3, 0) - 9)) {
                                                                                                                                                                    case 0: continue loop0;
                                                                                                                                                                    case 1: return;
                                                                                                                                                                    case 2: return;
                                                                                                                                                                    case 3: return;
                                                                                                                                                                    case 4: return;
                                                                                                                                                                    case 5: return;
                                                                                                                                                                    case 6: return;
                                                                                                                                                                    case 7: return;
                                                                                                                                                                    case 8: return;
                                                                                                                                                                    case 9: return;
                                                                                                                                                                    case 10: return;
                                                                                                                                                                    case 11: return;
                                                                                                                                                                    case 12: return;
                                                                                                                                                                    case 13: return;
                                                                                                                                                                    case 14: return;
                                                                                                                                                                    case 15: return;
                                                                                                                                                                    case 16: return;
                                                                                                                                                                    case 17: return;
                                                                                                                                                                    case 18: return;
                                                                                                                                                                    case 19: return;
                                                                                                                                                                    case 20: return;
                                                                                                                                                                    case 21: return;
                                                                                                                                                                    case 22: return;
                                                                                                                                                                    case 23: return;
                                                                                                                                                                    case 24: return;
                                                                                                                                                                    case 25: return;
                                                                                                                                                                    case 26: return;
                                                                                                                                                                    case 27: return;
                                                                                                                                                                    case 28: return;
                                                                                                                                                                    case 29: return;
                                                                                                                                                                    case 30: return;
                                                                                                                                                                    case 31: return;
                                                                                                                                                                    case 32: return;
                                                                                                                                                                    case 33: return;
                                                                                                                                                                    case 34: return;
                                                                                                                                                                    case 35: return;
                                                                                                                                                                    case 36: return;
                                                                                                                                                                    case 37: return;
                                                                                                                                                                    case 38: return;
                                                                                                                                                                    case 39: return;
                                                                                                                                                                    case 40: return;
                                                                                                                                                                    case 41: return;
                                                                                                                                                                    case 42: return;
                                                                                                                                                                    case 43: return;
                                                                                                                                                                    case 44: return;
                                                                                                                                                                    case 45: return;
                                                                                                                                                                    case 46: return;
                                                                                                                                                                    case 47: return;
                                                                                                                                                                    case 48: return;
                                                                                                                                                                    case 49: return;
                                                                                                                                                                    default: return;
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                                return;
                                                                                                                                                              }
                                                                                                                                                              return;
                                                                                                                                                            }
                                                                                                                                                            return;
                                                                                                                                                          }
                                                                                                                                                          return;
                                                                                                                                                        }
                                                                                                                                                        return;
                                                                                                                                                      }
                                                                                                                                                      return;
                                                                                                                                                    }
                                                                                                                                                    return;
                                                                                                                                                  }
                                                                                                                                                  return;
                                                                                                                                                }
                                                                                                                                                return;
                                                                                                                                              }
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          return;
                                                                                                                                        }
                                                                                                                                        return;
                                                                                                                                      }
                                                                                                                                      return;
                                                                                                                                    }
                                                                                                                                    return;
                                                                                                                                  }
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  return;
                                                                                                                }
                                                                                                                return;
                                                                                                              }
                                                                                                              return;
                                                                                                            }
                                                                                                            return;
                                                                                                          }
                                                                                                          return;
                                                                                                        }
                                                                                                        return;
                                                                                                      }
                                                                                                      return;
                                                                                                    }
                                                                                                    return;
                                                                                                  }
                                                                                                  return;
                                                                                                }
                                                                                                return;
                                                                                              }
                                                                                              return;
                                                                                            }
                                                                                            return;
                                                                                          }
                                                                                          return;
                                                                                        }
                                                                                        return;
                                                                                      }
                                                                                      return;
                                                                                    }
                                                                                    return;
                                                                                  }
                                                                                  return;
                                                                                }
                                                                                return;
                                                                              }
                                                                              return;
                                                                            }
                                                                            return;
                                                                          }
                                                                          return;
                                                                        }
                                                                        return;
                                                                      }
                                                                      return;
                                                                    }
                                                                    return;
                                                                  }
                                                                  return;
                                                                }
                                                                return;
                                                              }
                                                              return;
                                                            }
                                                          }
                                                          state = 0xC3;
                                                          return;
                                                        }
                                                        Gb(0, 0x10FC88);
                                                        size = 1;
                                                        offset = func213(0xA1, temp, 1);
                                                        state = (func213(0xA1, temp, 1) ? 0xC3 : 0x97);
                                                        return;
                                                      }
                                                      throw new Error('Unreachable code reached');
                                                    }
                                                    state = 0x72;
                                                    return;
                                                  }
                                                  value = func145(ub(ub((context + 0x138), context, 0xA0), context, 0xA4));
                                                  state = 0x10;
                                                  return;
                                                }
                                                offset = 5;
                                                size = 0;
                                                value = 0;
                                                flag = 0;
                                                state = 0x98;
                                                return;
                                              }
                                              temp = (offset - 1);
                                              state = (temp ? 0x85 : value);
                                              return;
                                            }
                                            flag = Sb((offset - 1), Pb(0x14), 0xAE, context, 0x13A);
                                            Gb(context, 0x139);
                                            index = local1;
                                            state = 0x6B;
                                            return;
                                          }
                                          offset = (offset + 1);
                                          state = (temp ? 0xA0 : offset);
                                          return;
                                        }
                                        value = ub(0xAA, buffer, 0);
                                        state = 0xA0;
                                        return;
                                      }
                                      size = 0;
                                      state = (0 ? 0xA1 : temp);
                                      return;
                                    }
                                    offset = 0;
                                    flag = 0;
                                    state = 0x95;
                                    return;
                                  }
                                  state = 0xC0;
                                  return;
                                }
                                state = 0xA4;
                                return;
                              }
                              throw new Error('Unreachable code reached');
                            }
                            state = (ub(sb(local0, 6, 0), context, 0xFC) + (value * 0x18));
                            Qb((offset + 1), Pb(0x14), 0x81, ub(local0, context, 0x100), Pb(4), (ub(sb(local0, 6, 0), context, 0xFC) + (value * 0x18)), context, wb(0x160), 8);
                            Gb(size, 0);
                            Qb(Sb(local1, sb(state, temp, 0), state, context, 0x174), Bb(1), state, length, sb(Pb(4), (state + 3), 0), (state + 0x10), flag, wb(0), 0);
                            flag = 0;
                            offset = ub(0x69, local1, 0x14);
                            value = ub(ub(0x69, local1, 0x14), local1, 0x10);
                            state = (ub(ub(0x69, local1, 0x14), local1, 0x10) ? Pb(0x100) : 0x3F);
                            return;
                          }
                          temp = (offset - 1);
                          state = (temp ? 0xA5 : value);
                          return;
                        }
                        value = ub(0x15, buffer, 0);
                        state = 9;
                        return;
                      }
                      Gb(0, 0x10FC88);
                      size = 1;
                      offset = func213(0x12, temp, 1);
                      state = (func213(0x12, temp, 1) ? (offset - 1) : 0x97);
                      return;
                    }
                    Gb(0, 0x10FC88);
                    temp = 1;
                    value = func213(0xC8, offset, 1);
                    state = (func213(0xC8, offset, 1) ? (value + 1) : 0xD);
                    return;
                  }
                  offset = 2;
                  state = 0x1A;
                  return;
                }
                offset = 0;
                count = wb(0xF8);
                state = (3n ? context : wb(0xF8));
                return;
              }
              state = 0x4A;
              return;
            }
            count = wb(0xF8);
            state = (3n ? context : wb(0xF8));
            return;
          }
          local1 = 0;
          state = (0x7FEFFFFFFFFFFFFFn ? 0xDA : (local15 & 0x7FFFFFFFFFFFFFFFn));
          return;
        }
        state = (flag ? 0x22 : 0xBA);
        return;
      }
      state = 0x10;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func372` implements a state machine that primarily returns immediately based on the initial state and potentially performs memory operations and calculations within specific states.
  
   */

  function func373() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func374 is Lb
  function Lb() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func375() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  // func376 is calculateChecksum
  /* renamed vars: local2=state, local3=arg1, local4=result, local5=temp1, local6=counter, local7=temp2 */
  function calculateChecksum(local0, local1) {
    let Error, Unreachable, arg1, code, counter, local8, local9, loop0, reached, result, state, temp1, temp2;
    state = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  switch (state) {
                                    case 0: continue loop0;
                                    case 1: return;
                                    case 2: return;
                                    case 3: return;
                                    case 4: return;
                                    case 5: return;
                                    case 6: return;
                                    case 7: return;
                                    case 8: return;
                                    case 9: return;
                                    case 10: return;
                                    case 11: return;
                                    case 12: return;
                                    case 13: return;
                                    default: return;
                                  }
                                }
                                return func145(0);
                              }
                              Gb(local0, 0);
                              state = 0xA;
                              Gb((local0 + 1), 0);
                              temp2 = 0xA;
                              Gb((local0 + 2), 0);
                              local8 = 0xA;
                              Gb((local0 + 3), 0);
                              local9 = 0xA;
                              arg1 = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (arg1 + 4)))));
                              result = ((((state + result) + temp2) + local8) + local9);
                              local0 = (local0 + 4);
                              temp1 = (temp1 - 4);
                              state = ((temp1 - 4) ? 1 : 9);
                              return;
                            }
                            state = 0xD;
                            return;
                          }
                          arg1 = 0;
                          result = 1;
                          state = 4;
                          return;
                        }
                        state = (counter ? 2 : 0xB);
                        return;
                      }
                      temp1 = (arg1 & 0xFFFFFFFC);
                      result = 1;
                      arg1 = 0;
                      state = 1;
                      return;
                    }
                    state = 0xB;
                    return;
                  }
                  arg1 = ub(8, local0, 8);
                  result = ub(ub(8, local0, 8), local0, 4);
                  state = (ub(ub(8, local0, 8), local0, 4) ? 1 : 0xC);
                  return;
                }
                throw new Error('Unreachable code reached');
              }
              state = 4;
              return;
            }
            local0 = ub(local1, local0, 0);
            counter = (arg1 & 3);
            state = (4 ? 5 : arg1);
            return;
          }
          return func145(arg1);
        }
        state = (arg1 ? 0xA : 0);
        return;
      }
      Gb(local0, 0);
      temp1 = 0xA;
      arg1 = (0xA ? 0 : (arg1 + 1));
      local0 = (local0 + 1);
      result = (result + temp1);
      counter = (counter - 1);
      state = ((counter - 1) ? 0xD : 6);
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return result;

  }

  /*
   * AI Summary: The function implements a state machine that conditionally manipulates input data using bitwise operations, memory access based on calculated addresses, and calls to helper functions (Gb and ub), ultimately returning a computed result or branching to different states. 
  
   */

  // func377 is lookupAndApply
  function lookupAndApply(local0, local1) {
    let Error, Unreachable, code, local2, local3, loop0, reached;

    local3 = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            switch (local3) {
                              case 0: continue loop0;
                              case 1: return;
                              case 2: return;
                              case 3: return;
                              case 4: return;
                              case 5: return;
                              case 6: return;
                              case 7: return;
                              case 8: return;
                              case 9: return;
                              case 10: return;
                              default: return;
                            }
                          }
                          global0 = (local2 + 0x10);
                          return local0;
                        }
                        local0 = 2;
                        local3 = 2;
                        return;
                      }
                      local0 = func243(local0);
                      local3 = 0;
                      return;
                    }
                    local0 = 4;
                    local3 = 2;
                    return;
                  }
                  if (0x800) {
                  } else {
                  }
                  local3 = 1;
                  return;
                }
                local0 = table0[ub(ub(8, local1, 0), ub(local0, local1, 4), 0x10)](sb(local2, (((local0 >>> 0xC) & 0x3F) | 0x80), 0xD), local0);
                local3 = 0;
                return;
              }
              local0 = 3;
              local3 = 2;
              return;
            }
            local2 = (global0 - 0x10);
            global0 = (global0 - 0x10);
            local0 = ub(sb(local2, (((local0 >>> 6) & 0x3F) | 0x80), 0xD), local0, 0);
            Gb(local1, 0xB);
            if ((sb(local2, ((local0 >>> 0xC) | 0xE0), 0xC) & 0x18)) {
            } else {
            }
            local3 = 5;
            return;
          }
          if (0x10000) {
          } else {
          }
          local3 = 6;
          return;
        }
        if (0x80) {
        } else {
        }
        local3 = 0xA;
        return;
      }
      local0 = 1;
      local3 = 2;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return sb(local2, local0, 0xC);

  }

  /*
   * AI Summary: The function uses a state machine (local3) to conditionally execute different code paths, primarily involving memory manipulation via bitwise operations and indirect function calls through a table lookup, ultimately returning either a modified input or a constant value.
  
   */

  // func378 is initModule
  /* renamed vars: state=local1, result=local2 */
  function initModule(local0) {
    let Ja, Ma, a, local1, local2, local3, loop0;
    local1 = 1;
    loop0: while (true) {
      {
        {
          {
            {
              switch (local1) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            imports['a']['Ma'](local2);
            local1 = 3;
            return;
          }
          local2 = func139();
          local3 = imports['a']['Ja'](func139());
          if (0x84) {
          } else {
          }
          local1 = 3;
          return;
        }
        if (local3) {
        } else {
        }
        local1 = 0;
        return;
      }
    }

  }

  /*
   * AI Summary: The function `func378` appears to be a stub or incomplete function that ultimately returns without performing any meaningful operation, potentially designed as a placeholder for future functionality or for debugging purposes. 
  
   */

  // func379 is decrementAndCheck
  function decrementAndCheck(local0, local1) {
    let local2, local3, loop0;

    loop0: while (true) {
      {
        {
          {
            switch (local3) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          local2 = (global0 - 0x10);
          global0 = (global0 - 0x10);
          local0 = ub(local2, local0, 0);
          local1 = (ub(local0, local0, 0) - 1);
          if (local1) {
          } else {
          }
          local3 = 1;
          return;
        }
        local3 = 2;
        return;
      }
    }
    global0 = (local2 + 0x10);

  }

  /*
   * AI Summary: The function conditionally manipulates memory and global state based on a switch statement, utilizing a helper function `ub` to compute and potentially modify memory values before ultimately returning. 
  
   */

  // func380 is checkAndReturn
  function checkAndReturn(local0, local1, local2) {
    let Error, Unreachable, code, local3, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            switch (local3) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          local3 = (local1 ? 2 : 1);
          return;
        }
        return Pb(0);
      }
    }
    throw new Error('Unreachable code reached');

  }


  function func381() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  function func382() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func383 is checkSrcOffset
  /* renamed vars: local2=srcOffset */
  function checkSrcOffset(local0, local1) {
    let Error, Unreachable, code, local3, local4, loop0, reached, srcOffset;
    local3 = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                switch (local3) {
                  case 0: continue loop0;
                  case 1: return;
                  case 2: return;
                  case 3: return;
                  case 4: return;
                  default: return;
                }
              }
              local0 = (ub(srcOffset, srcOffset, 0) - 1);
              if (local0) {
              } else {
              }
              local3 = 1;
              return;
            }
            func348(4, (local4 + 0xC));
            local3 = 4;
            return;
          }
          local4 = (global0 - 0x10);
          global0 = (global0 - 0x10);
          srcOffset = ub(Pb(0), local0, 0);
          if (srcOffset) {
          } else {
          }
          local3 = 3;
          return;
        }
        throw new Error('Unreachable code reached');
      }
    }
    global0 = (local4 + 0x10);

  }

  /*
   * AI Summary: The function conditionally executes code blocks based on a state variable, ultimately aiming to decrement `global0` by 0x10 and possibly modify `local0` based on a memory lookup using `ub`.
  
   */

  function func384() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func385() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func386() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func387 is decompressData
  /* renamed vars: local25=tmp4, local3=state, local10=tmp1, local22=dist2, local4=byte1, local23=dist3, local5=byte2, local6=byte3, local20=outStart, local7=val1, local21=dist1, local8=val2, local9=stream, local11=dest, local12=tmp2, local13=outPos, local14=tmp3, local15=destEnd, local16=length, local17=distLow, local18=distMid, local19=distHi, local24=dist4, local26=tmp5, local27=errorCode */
  function decompressData(local0, local1, local2) {
    let Error, Unreachable, byte1, byte2, byte3, code, dest, destEnd, dist1, dist2, dist3, dist4, distHi, distLow, distMid, errorCode, length, local28, local29, local30, loop0, loop1, outPos, outStart, reached, state, stream, tmp1, tmp2, tmp3, tmp4, tmp5, val1, val2;
    state = 0x60;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                {
                                                                                                                  {
                                                                                                                    {
                                                                                                                      {
                                                                                                                        {
                                                                                                                          {
                                                                                                                            {
                                                                                                                              {
                                                                                                                                {
                                                                                                                                  {
                                                                                                                                    {
                                                                                                                                      {
                                                                                                                                        {
                                                                                                                                          {
                                                                                                                                            {
                                                                                                                                              {
                                                                                                                                                {
                                                                                                                                                  {
                                                                                                                                                    {
                                                                                                                                                      {
                                                                                                                                                        {
                                                                                                                                                          {
                                                                                                                                                            {
                                                                                                                                                              {
                                                                                                                                                                {
                                                                                                                                                                  {
                                                                                                                                                                    {
                                                                                                                                                                      {
                                                                                                                                                                        {
                                                                                                                                                                          {
                                                                                                                                                                            {
                                                                                                                                                                              {
                                                                                                                                                                                {
                                                                                                                                                                                  {
                                                                                                                                                                                    {
                                                                                                                                                                                      {
                                                                                                                                                                                        {
                                                                                                                                                                                          {
                                                                                                                                                                                            {
                                                                                                                                                                                              {
                                                                                                                                                                                                {
                                                                                                                                                                                                  {
                                                                                                                                                                                                    {
                                                                                                                                                                                                      {
                                                                                                                                                                                                        {
                                                                                                                                                                                                          {
                                                                                                                                                                                                            {
                                                                                                                                                                                                              {
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  switch (state) {
                                                                                                                                                                                                                                                                                                                                                    case 0: continue loop0;
                                                                                                                                                                                                                                                                                                                                                    case 1: return;
                                                                                                                                                                                                                                                                                                                                                    case 2: return;
                                                                                                                                                                                                                                                                                                                                                    case 3: return;
                                                                                                                                                                                                                                                                                                                                                    case 4: return;
                                                                                                                                                                                                                                                                                                                                                    case 5: return;
                                                                                                                                                                                                                                                                                                                                                    case 6: return;
                                                                                                                                                                                                                                                                                                                                                    case 7: return;
                                                                                                                                                                                                                                                                                                                                                    case 8: return;
                                                                                                                                                                                                                                                                                                                                                    case 9: return;
                                                                                                                                                                                                                                                                                                                                                    case 10: return;
                                                                                                                                                                                                                                                                                                                                                    case 11: return;
                                                                                                                                                                                                                                                                                                                                                    case 12: return;
                                                                                                                                                                                                                                                                                                                                                    case 13: return;
                                                                                                                                                                                                                                                                                                                                                    case 14: return;
                                                                                                                                                                                                                                                                                                                                                    case 15: return;
                                                                                                                                                                                                                                                                                                                                                    case 16: return;
                                                                                                                                                                                                                                                                                                                                                    case 17: return;
                                                                                                                                                                                                                                                                                                                                                    case 18: return;
                                                                                                                                                                                                                                                                                                                                                    case 19: return;
                                                                                                                                                                                                                                                                                                                                                    case 20: return;
                                                                                                                                                                                                                                                                                                                                                    case 21: return;
                                                                                                                                                                                                                                                                                                                                                    case 22: return;
                                                                                                                                                                                                                                                                                                                                                    case 23: return;
                                                                                                                                                                                                                                                                                                                                                    case 24: return;
                                                                                                                                                                                                                                                                                                                                                    case 25: return;
                                                                                                                                                                                                                                                                                                                                                    case 26: return;
                                                                                                                                                                                                                                                                                                                                                    case 27: return;
                                                                                                                                                                                                                                                                                                                                                    case 28: return;
                                                                                                                                                                                                                                                                                                                                                    case 29: return;
                                                                                                                                                                                                                                                                                                                                                    case 30: return;
                                                                                                                                                                                                                                                                                                                                                    case 31: return;
                                                                                                                                                                                                                                                                                                                                                    case 32: return;
                                                                                                                                                                                                                                                                                                                                                    case 33: return;
                                                                                                                                                                                                                                                                                                                                                    case 34: return;
                                                                                                                                                                                                                                                                                                                                                    case 35: return;
                                                                                                                                                                                                                                                                                                                                                    case 36: return;
                                                                                                                                                                                                                                                                                                                                                    case 37: return;
                                                                                                                                                                                                                                                                                                                                                    case 38: return;
                                                                                                                                                                                                                                                                                                                                                    case 39: return;
                                                                                                                                                                                                                                                                                                                                                    case 40: return;
                                                                                                                                                                                                                                                                                                                                                    case 41: return;
                                                                                                                                                                                                                                                                                                                                                    case 42: return;
                                                                                                                                                                                                                                                                                                                                                    case 43: return;
                                                                                                                                                                                                                                                                                                                                                    case 44: return;
                                                                                                                                                                                                                                                                                                                                                    case 45: return;
                                                                                                                                                                                                                                                                                                                                                    case 46: return;
                                                                                                                                                                                                                                                                                                                                                    case 47: return;
                                                                                                                                                                                                                                                                                                                                                    case 48: return;
                                                                                                                                                                                                                                                                                                                                                    case 49: return;
                                                                                                                                                                                                                                                                                                                                                    case 50: return;
                                                                                                                                                                                                                                                                                                                                                    case 51: return;
                                                                                                                                                                                                                                                                                                                                                    case 52: return;
                                                                                                                                                                                                                                                                                                                                                    case 53: return;
                                                                                                                                                                                                                                                                                                                                                    case 54: return;
                                                                                                                                                                                                                                                                                                                                                    case 55: return;
                                                                                                                                                                                                                                                                                                                                                    case 56: return;
                                                                                                                                                                                                                                                                                                                                                    case 57: return;
                                                                                                                                                                                                                                                                                                                                                    case 58: return;
                                                                                                                                                                                                                                                                                                                                                    case 59: return;
                                                                                                                                                                                                                                                                                                                                                    case 60: return;
                                                                                                                                                                                                                                                                                                                                                    case 61: return;
                                                                                                                                                                                                                                                                                                                                                    case 62: return;
                                                                                                                                                                                                                                                                                                                                                    case 63: return;
                                                                                                                                                                                                                                                                                                                                                    case 64: return;
                                                                                                                                                                                                                                                                                                                                                    case 65: return;
                                                                                                                                                                                                                                                                                                                                                    case 66: return;
                                                                                                                                                                                                                                                                                                                                                    case 67: return;
                                                                                                                                                                                                                                                                                                                                                    case 68: return;
                                                                                                                                                                                                                                                                                                                                                    case 69: return;
                                                                                                                                                                                                                                                                                                                                                    case 70: return;
                                                                                                                                                                                                                                                                                                                                                    case 71: return;
                                                                                                                                                                                                                                                                                                                                                    case 72: return;
                                                                                                                                                                                                                                                                                                                                                    case 73: return;
                                                                                                                                                                                                                                                                                                                                                    case 74: return;
                                                                                                                                                                                                                                                                                                                                                    case 75: return;
                                                                                                                                                                                                                                                                                                                                                    case 76: return;
                                                                                                                                                                                                                                                                                                                                                    case 77: return;
                                                                                                                                                                                                                                                                                                                                                    case 78: return;
                                                                                                                                                                                                                                                                                                                                                    case 79: return;
                                                                                                                                                                                                                                                                                                                                                    case 80: return;
                                                                                                                                                                                                                                                                                                                                                    case 81: return;
                                                                                                                                                                                                                                                                                                                                                    case 82: return;
                                                                                                                                                                                                                                                                                                                                                    case 83: return;
                                                                                                                                                                                                                                                                                                                                                    case 84: return;
                                                                                                                                                                                                                                                                                                                                                    case 85: return;
                                                                                                                                                                                                                                                                                                                                                    case 86: return;
                                                                                                                                                                                                                                                                                                                                                    case 87: return;
                                                                                                                                                                                                                                                                                                                                                    case 88: return;
                                                                                                                                                                                                                                                                                                                                                    case 89: return;
                                                                                                                                                                                                                                                                                                                                                    case 90: return;
                                                                                                                                                                                                                                                                                                                                                    case 91: return;
                                                                                                                                                                                                                                                                                                                                                    case 92: return;
                                                                                                                                                                                                                                                                                                                                                    case 93: return;
                                                                                                                                                                                                                                                                                                                                                    case 94: return;
                                                                                                                                                                                                                                                                                                                                                    case 95: return;
                                                                                                                                                                                                                                                                                                                                                    case 96: return;
                                                                                                                                                                                                                                                                                                                                                    case 97: return;
                                                                                                                                                                                                                                                                                                                                                    case 98: return;
                                                                                                                                                                                                                                                                                                                                                    case 99: return;
                                                                                                                                                                                                                                                                                                                                                    case 100: return;
                                                                                                                                                                                                                                                                                                                                                    case 101: return;
                                                                                                                                                                                                                                                                                                                                                    case 102: return;
                                                                                                                                                                                                                                                                                                                                                    case 103: return;
                                                                                                                                                                                                                                                                                                                                                    case 104: return;
                                                                                                                                                                                                                                                                                                                                                    case 105: return;
                                                                                                                                                                                                                                                                                                                                                    case 106: return;
                                                                                                                                                                                                                                                                                                                                                    case 107: return;
                                                                                                                                                                                                                                                                                                                                                    case 108: return;
                                                                                                                                                                                                                                                                                                                                                    case 109: return;
                                                                                                                                                                                                                                                                                                                                                    case 110: return;
                                                                                                                                                                                                                                                                                                                                                    case 111: return;
                                                                                                                                                                                                                                                                                                                                                    case 112: return;
                                                                                                                                                                                                                                                                                                                                                    case 113: return;
                                                                                                                                                                                                                                                                                                                                                    case 114: return;
                                                                                                                                                                                                                                                                                                                                                    case 115: return;
                                                                                                                                                                                                                                                                                                                                                    case 116: return;
                                                                                                                                                                                                                                                                                                                                                    case 117: return;
                                                                                                                                                                                                                                                                                                                                                    case 118: return;
                                                                                                                                                                                                                                                                                                                                                    case 119: return;
                                                                                                                                                                                                                                                                                                                                                    case 120: return;
                                                                                                                                                                                                                                                                                                                                                    case 121: return;
                                                                                                                                                                                                                                                                                                                                                    case 122: return;
                                                                                                                                                                                                                                                                                                                                                    case 123: return;
                                                                                                                                                                                                                                                                                                                                                    case 124: return;
                                                                                                                                                                                                                                                                                                                                                    case 125: return;
                                                                                                                                                                                                                                                                                                                                                    case 126: return;
                                                                                                                                                                                                                                                                                                                                                    case 127: return;
                                                                                                                                                                                                                                                                                                                                                    case 128: return;
                                                                                                                                                                                                                                                                                                                                                    case 129: return;
                                                                                                                                                                                                                                                                                                                                                    case 130: return;
                                                                                                                                                                                                                                                                                                                                                    case 131: return;
                                                                                                                                                                                                                                                                                                                                                    case 132: return;
                                                                                                                                                                                                                                                                                                                                                    case 133: return;
                                                                                                                                                                                                                                                                                                                                                    case 134: return;
                                                                                                                                                                                                                                                                                                                                                    case 135: return;
                                                                                                                                                                                                                                                                                                                                                    case 136: return;
                                                                                                                                                                                                                                                                                                                                                    case 137: return;
                                                                                                                                                                                                                                                                                                                                                    case 138: return;
                                                                                                                                                                                                                                                                                                                                                    case 139: return;
                                                                                                                                                                                                                                                                                                                                                    case 140: return;
                                                                                                                                                                                                                                                                                                                                                    case 141: return;
                                                                                                                                                                                                                                                                                                                                                    case 142: return;
                                                                                                                                                                                                                                                                                                                                                    case 143: return;
                                                                                                                                                                                                                                                                                                                                                    case 144: return;
                                                                                                                                                                                                                                                                                                                                                    case 145: return;
                                                                                                                                                                                                                                                                                                                                                    case 146: return;
                                                                                                                                                                                                                                                                                                                                                    case 147: return;
                                                                                                                                                                                                                                                                                                                                                    case 148: return;
                                                                                                                                                                                                                                                                                                                                                    case 149: return;
                                                                                                                                                                                                                                                                                                                                                    case 150: return;
                                                                                                                                                                                                                                                                                                                                                    case 151: return;
                                                                                                                                                                                                                                                                                                                                                    case 152: return;
                                                                                                                                                                                                                                                                                                                                                    case 153: return;
                                                                                                                                                                                                                                                                                                                                                    case 154: return;
                                                                                                                                                                                                                                                                                                                                                    case 155: return;
                                                                                                                                                                                                                                                                                                                                                    case 156: return;
                                                                                                                                                                                                                                                                                                                                                    case 157: return;
                                                                                                                                                                                                                                                                                                                                                    case 158: return;
                                                                                                                                                                                                                                                                                                                                                    case 159: return;
                                                                                                                                                                                                                                                                                                                                                    case 160: return;
                                                                                                                                                                                                                                                                                                                                                    case 161: return;
                                                                                                                                                                                                                                                                                                                                                    case 162: return;
                                                                                                                                                                                                                                                                                                                                                    case 163: return;
                                                                                                                                                                                                                                                                                                                                                    case 164: return;
                                                                                                                                                                                                                                                                                                                                                    case 165: return;
                                                                                                                                                                                                                                                                                                                                                    default: return;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                val2 = 0x83;
                                                                                                                                                                                                                                                                                                                                                state = (byte1 ? 0x48 : local1);
                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              byte1 = (byte2 | (byte3 << 0xC));
                                                                                                                                                                                                                                                                                                                                              destEnd = (dest + 3);
                                                                                                                                                                                                                                                                                                                                              state = 0x86;
                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            dest = (byte2 + byte3);
                                                                                                                                                                                                                                                                                                                                            val1 = vb(0);
                                                                                                                                                                                                                                                                                                                                            state = (0 ? (byte2 + byte3) : vb(0));
                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          dest = (dest + 0x10);
                                                                                                                                                                                                                                                                                                                                          val2 = (val2 - 0x10);
                                                                                                                                                                                                                                                                                                                                          state = (0xF ? 0x99 : (val2 - 0x10));
                                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        state = (func254(0x79, byte2) ? 0x9C : 0x6E);
                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      state = 0x20;
                                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    local28 = (stream + 0x14);
                                                                                                                                                                                                                                                                                                                                    local30 = 0;
                                                                                                                                                                                                                                                                                                                                    errorCode = 0;
                                                                                                                                                                                                                                                                                                                                    tmp2 = 0;
                                                                                                                                                                                                                                                                                                                                    state = 4;
                                                                                                                                                                                                                                                                                                                                    loop1: while (true) {
                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      switch (state) {
                                                                                                                                                                                                                                                                                                                                                        case 0: continue loop1;
                                                                                                                                                                                                                                                                                                                                                        case 1: continue loop0;
                                                                                                                                                                                                                                                                                                                                                        case 2: return;
                                                                                                                                                                                                                                                                                                                                                        case 3: return;
                                                                                                                                                                                                                                                                                                                                                        case 4: return;
                                                                                                                                                                                                                                                                                                                                                        case 5: return;
                                                                                                                                                                                                                                                                                                                                                        case 6: return;
                                                                                                                                                                                                                                                                                                                                                        default: return;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    byte1 = ub(sb(val2, (((byte2 >>> 6) & 0x3F) | 0x80), 1), ((byte1 << 3) + 0x10CF94), 0);
                                                                                                                                                                                                                                                                                                                                                    state = 0xFFEF0800;
                                                                                                                                                                                                                                                                                                                                                    byte1 = (state ? 0x69 : byte1);
                                                                                                                                                                                                                                                                                                                                                    errorCode = (state ? 0x307 : 0);
                                                                                                                                                                                                                                                                                                                                                    state = 1;
                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                byte1 = (832 | byte1);
                                                                                                                                                                                                                                                                                                                                                errorCode = 0;
                                                                                                                                                                                                                                                                                                                                                state = 1;
                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              errorCode = 0;
                                                                                                                                                                                                                                                                                                                                              state = (0x1ED2 ? 0 : byte1);
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((0x1ED2 ? 0 : byte1) + 0x166);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 0xB3);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 0x5A);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 0x2D);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 0x16);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 0xB);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 6);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 3);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 1);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) + 1);
                                                                                                                                                                                                                                                                                                                                              local30 = (byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              tmp2 = ub(1, (((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) << 3) + 0x10CF90), 0);
                                                                                                                                                                                                                                                                                                                                              state = (byte1 ? 6 : ub(1, (((byte1 ? state : ub(tmp2, ((tmp2 << 3) + 0x10CF90), 0)) << 3) + 0x10CF90), 0));
                                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            state = (0x80 ? 2 : byte1);
                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          throw new Error('Unreachable code reached');
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        byte1 = (byte1 + tmp2);
                                                                                                                                                                                                                                                                                                                                        state = (0x599 ? local30 : (byte1 + tmp2));
                                                                                                                                                                                                                                                                                                                                        continue loop0;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    byte1 = ub(8, stream, 0x18);
                                                                                                                                                                                                                                                                                                                                    state = (ub(8, stream, 0x18) ? 0 : 0x8A);
                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  byte2 = (val1 + val2);
                                                                                                                                                                                                                                                                                                                                  tmp3 = 0x80;
                                                                                                                                                                                                                                                                                                                                  state = (0x80 ? 0x9E : byte1);
                                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                byte1 = ub(0x52, stream, 0x14);
                                                                                                                                                                                                                                                                                                                                val2 = 0x80;
                                                                                                                                                                                                                                                                                                                                state = (0x80 ? 0x73 : ub(0x52, stream, 0x14));
                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              byte3 = (0x10000 ? 4 : byte2);
                                                                                                                                                                                                                                                                                                                              state = 0x90;
                                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            byte1 = (tmp1 & 0x1F);
                                                                                                                                                                                                                                                                                                                            state = 0x87;
                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          state = 0x77;
                                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        byte3 = 2;
                                                                                                                                                                                                                                                                                                                        state = 0x54;
                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      tmp3 = val1;
                                                                                                                                                                                                                                                                                                                      state = (val2 ? 0x5A : (ub(0x3F, stream, 8) - val1));
                                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    tmp1 = ub(func266(byte1, byte2), stream, 0xC);
                                                                                                                                                                                                                                                                                                                    val1 = ub((stream + 8), stream, 0x10);
                                                                                                                                                                                                                                                                                                                    state = 0x41;
                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  byte3 = (byte3 + 1);
                                                                                                                                                                                                                                                                                                                  state = ((byte3 + 1) ? 2 : val2);
                                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                byte2 = 0x110000;
                                                                                                                                                                                                                                                                                                                byte3 = 0;
                                                                                                                                                                                                                                                                                                                state = 0x7E;
                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              state = (0x800 ? 0x5E : byte2);
                                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            state = 0x7F;
                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          state = 0x7F;
                                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        state = (0x800 ? 0x39 : byte2);
                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      state = 0x77;
                                                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    byte3 = (0x10000 ? 4 : byte1);
                                                                                                                                                                                                                                                                                                    state = 0x54;
                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                  state = 0x1C;
                                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                val2 = 1;
                                                                                                                                                                                                                                                                                                state = 0xD;
                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                              state = 7;
                                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            state = 0x77;
                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                          byte2 = (0x10000 ? 4 : byte3);
                                                                                                                                                                                                                                                                                          state = 0x31;
                                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        val1 = (byte2 + val1);
                                                                                                                                                                                                                                                                                        state = 0x61;
                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      throw new Error('Unreachable code reached');
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    outPos = outStart;
                                                                                                                                                                                                                                                                                    dest = destEnd;
                                                                                                                                                                                                                                                                                    state = 6;
                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  state = 0x7F;
                                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                byte2 = (byte3 + val1);
                                                                                                                                                                                                                                                                                val2 = 0x80;
                                                                                                                                                                                                                                                                                state = (0x80 ? 0x72 : byte1);
                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              val2 = (0x10000 ? 4 : byte2);
                                                                                                                                                                                                                                                                              state = 0xD;
                                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            Gb(byte1, 3);
                                                                                                                                                                                                                                                                            byte2 = (0x48 | ((((tmp1 << 0x12) & 0x1C0000) & 0x3F) | (byte3 << 6)));
                                                                                                                                                                                                                                                                            state = (0x110000 ? 0x2B : (0x48 | ((((tmp1 << 0x12) & 0x1C0000) & 0x3F) | (byte3 << 6))));
                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          val1 = ub(func266(byte2, byte3), stream, 0x10);
                                                                                                                                                                                                                                                                          state = 0x47;
                                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        val1 = (byte1 + byte2);
                                                                                                                                                                                                                                                                        state = 0x61;
                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      outPos = (val2 + length);
                                                                                                                                                                                                                                                                      byte3 = 0;
                                                                                                                                                                                                                                                                      state = 2;
                                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    byte1 = (byte1 + 1);
                                                                                                                                                                                                                                                                    byte2 = (byte2 & 0xFF);
                                                                                                                                                                                                                                                                    state = 0x57;
                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  state = 0x77;
                                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                tmp1 = ub(sb(val1, ((byte1 >>> 6) | 0xC0), 0), stream, 0xC);
                                                                                                                                                                                                                                                                byte1 = (ub(sb(val1, ((byte1 >>> 6) | 0xC0), 0), stream, 0xC) + byte1);
                                                                                                                                                                                                                                                                val1 = (val1 + 2);
                                                                                                                                                                                                                                                                outPos = outStart;
                                                                                                                                                                                                                                                                dest = destEnd;
                                                                                                                                                                                                                                                                state = 0x61;
                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              byte3 = val1;
                                                                                                                                                                                                                                                              state = (byte2 ? 0x3E : (ub(0x70, stream, 8) - val1));
                                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            Gb(dest, 1);
                                                                                                                                                                                                                                                            byte2 = (Pb(0x10) & 0x3F);
                                                                                                                                                                                                                                                            byte3 = (byte1 & 0x1F);
                                                                                                                                                                                                                                                            state = (0xFFFFFFDF ? 0x3A : byte1);
                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          byte1 = (byte1 + 4);
                                                                                                                                                                                                                                                          state = 0x57;
                                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        state = (local2 ? 0x75 : 0x3B);
                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      byte2 = 2;
                                                                                                                                                                                                                                                      state = 0x31;
                                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    state = (0x800 ? 0x91 : byte3);
                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  state = 0x1C;
                                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                state = 0x20;
                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              val1 = byte1;
                                                                                                                                                                                                                                              state = (byte2 ? 0xE : (ub(0x41, stream, 8) - byte1));
                                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            state = (func254(0x8F, byte2) ? sb(val2, byte2, 0) : 0x10);
                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          state = (0x10000 ? 5 : byte2);
                                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        byte1 = (byte1 & 0xFF);
                                                                                                                                                                                                                                        byte2 = (dest + 1);
                                                                                                                                                                                                                                        outPos = ((dest + 1) + (outPos - dest));
                                                                                                                                                                                                                                        dest = byte2;
                                                                                                                                                                                                                                        state = 6;
                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      byte1 = vb(0);
                                                                                                                                                                                                                                      state = (0 ? dest : vb(0));
                                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    byte1 = ((byte3 << 6) | byte2);
                                                                                                                                                                                                                                    destEnd = (dest + 2);
                                                                                                                                                                                                                                    state = 0x86;
                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  state = ((outPos + dist2) ? 0x96 : 0x5B);
                                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                distHi = (outPos + distMid);
                                                                                                                                                                                                                                state = ((outPos + distMid) ? 0x85 : 0x6D);
                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              state = 0x20;
                                                                                                                                                                                                                              return;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            Gb(dest, 2);
                                                                                                                                                                                                                            byte2 = ((sb(val2, ((byte2 >>> 6) | 0xC0), 0) & 0x3F) | (byte2 << 6));
                                                                                                                                                                                                                            state = (0xFFFFFFF0 ? 0x58 : byte1);
                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          tmp1 = 1;
                                                                                                                                                                                                                          state = 0x56;
                                                                                                                                                                                                                          return;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        state = 0x7F;
                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      state = 0x24;
                                                                                                                                                                                                                      return;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    tmp1 = ub(func266(val1, byte2), stream, 0xC);
                                                                                                                                                                                                                    byte3 = ub((stream + 8), stream, 0x10);
                                                                                                                                                                                                                    state = 0x70;
                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  tmp1 = (tmp1 + tmp3);
                                                                                                                                                                                                                  state = (destEnd ? 0xA0 : 0x11);
                                                                                                                                                                                                                  return;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                byte2 = (byte3 | (tmp1 << 0xC));
                                                                                                                                                                                                                byte1 = (byte1 + 3);
                                                                                                                                                                                                                state = 0x57;
                                                                                                                                                                                                                return;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              val1 = (val1 + tmp1);
                                                                                                                                                                                                              state = (val2 ? 0x7D : 0x2E);
                                                                                                                                                                                                              return;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            byte2 = ((tmp1 << 6) | byte3);
                                                                                                                                                                                                            byte1 = (byte1 + 2);
                                                                                                                                                                                                            state = 0x57;
                                                                                                                                                                                                            return;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          tmp1 = ub(func266(val1, byte3), stream, 0xC);
                                                                                                                                                                                                          val2 = ub((stream + 8), stream, 0x10);
                                                                                                                                                                                                          state = 0x69;
                                                                                                                                                                                                          return;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        val2 = 0x82;
                                                                                                                                                                                                        state = (dist4 ? 0x48 : byte1);
                                                                                                                                                                                                        return;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      state = (0x800 ? 0x1F : byte1);
                                                                                                                                                                                                      return;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    state = 7;
                                                                                                                                                                                                    return;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  tmp1 = ub(sb(tmp1, (((byte2 >>> 0xC) & 0x3F) | 0x80), 1), stream, 0xC);
                                                                                                                                                                                                  val1 = (ub(sb(tmp1, (((byte2 >>> 0xC) & 0x3F) | 0x80), 1), stream, 0xC) + val1);
                                                                                                                                                                                                  state = (val2 ? 0xB : 0xA3);
                                                                                                                                                                                                  return;
                                                                                                                                                                                                }
                                                                                                                                                                                                byte1 = val1;
                                                                                                                                                                                                state = (1 ? 0x50 : (ub(0x28, stream, 8) - val1));
                                                                                                                                                                                                return;
                                                                                                                                                                                              }
                                                                                                                                                                                              byte1 = (tmp1 + dest);
                                                                                                                                                                                              byte2 = (local1 + dest);
                                                                                                                                                                                              state = 0x25;
                                                                                                                                                                                              return;
                                                                                                                                                                                            }
                                                                                                                                                                                            val2 = ub(func266(byte2, val1), stream, 0x10);
                                                                                                                                                                                            state = 0x92;
                                                                                                                                                                                            return;
                                                                                                                                                                                          }
                                                                                                                                                                                          byte2 = 1;
                                                                                                                                                                                          state = 0x31;
                                                                                                                                                                                          return;
                                                                                                                                                                                        }
                                                                                                                                                                                        Gb(byte1, 1);
                                                                                                                                                                                        byte3 = ((stream + 8) & 0x3F);
                                                                                                                                                                                        tmp1 = (byte2 & 0x1F);
                                                                                                                                                                                        state = (0xFFFFFFDF ? 0x6F : byte2);
                                                                                                                                                                                        return;
                                                                                                                                                                                      }
                                                                                                                                                                                      byte2 = (0x10000 ? 4 : byte1);
                                                                                                                                                                                      state = 0x29;
                                                                                                                                                                                      return;
                                                                                                                                                                                    }
                                                                                                                                                                                    byte1 = (tmp1 & 0xF);
                                                                                                                                                                                    state = 0x94;
                                                                                                                                                                                    return;
                                                                                                                                                                                  }
                                                                                                                                                                                  throw new Error('Unreachable code reached');
                                                                                                                                                                                }
                                                                                                                                                                                byte1 = ub(func266(val1, 2), stream, 0x10);
                                                                                                                                                                                state = 0x28;
                                                                                                                                                                                return;
                                                                                                                                                                              }
                                                                                                                                                                              val1 = 1;
                                                                                                                                                                              state = 0xA5;
                                                                                                                                                                              return;
                                                                                                                                                                            }
                                                                                                                                                                            state = (0x800 ? 0x4D : byte1);
                                                                                                                                                                            return;
                                                                                                                                                                          }
                                                                                                                                                                          Qb(sb(tmp1, (((byte2 >>> 6) & 0x3F) | 0x80), 2), 0x42, 3, (stream + 8), 0x88, local0, stream, wb(8), 0);
                                                                                                                                                                          global0 = (stream + 0x20);
                                                                                                                                                                          return Pb(0);
                                                                                                                                                                        }
                                                                                                                                                                        val1 = byte2;
                                                                                                                                                                        state = (byte3 ? 0x23 : (ub(0x47, stream, 8) - byte2));
                                                                                                                                                                        return;
                                                                                                                                                                      }
                                                                                                                                                                      state = ((outPos + dist3) ? 0x66 : 0x6D);
                                                                                                                                                                      return;
                                                                                                                                                                    }
                                                                                                                                                                    state = 0x53;
                                                                                                                                                                    return;
                                                                                                                                                                  }
                                                                                                                                                                  state = ((dest & 1) ? 0x79 : 4);
                                                                                                                                                                  return;
                                                                                                                                                                }
                                                                                                                                                                Gb(dest, 3);
                                                                                                                                                                byte1 = (Pb(8) | ((((byte3 << 0x12) & 0x1C0000) & 0x3F) | (byte2 << 6)));
                                                                                                                                                                destEnd = (dest + 4);
                                                                                                                                                                state = 0x86;
                                                                                                                                                                return;
                                                                                                                                                              }
                                                                                                                                                              destEnd = 0x80;
                                                                                                                                                              state = (0x80 ? 0x65 : byte2);
                                                                                                                                                              return;
                                                                                                                                                            }
                                                                                                                                                            tmp1 = ub(func266(val1, val2), stream, 0xC);
                                                                                                                                                            tmp3 = ub((stream + 8), stream, 0x10);
                                                                                                                                                            state = 0x3F;
                                                                                                                                                            return;
                                                                                                                                                          }
                                                                                                                                                          byte1 = ((outPos + distLow) + 2);
                                                                                                                                                          dest = 0;
                                                                                                                                                          state = 0x44;
                                                                                                                                                          return;
                                                                                                                                                        }
                                                                                                                                                        state = 0x24;
                                                                                                                                                        return;
                                                                                                                                                      }
                                                                                                                                                      byte2 = local1;
                                                                                                                                                      byte1 = tmp1;
                                                                                                                                                      val2 = local2;
                                                                                                                                                      state = (0x10 ? 0x25 : local2);
                                                                                                                                                      return;
                                                                                                                                                    }
                                                                                                                                                    state = 7;
                                                                                                                                                    return;
                                                                                                                                                  }
                                                                                                                                                  state = (0x10000 ? 0x19 : byte2);
                                                                                                                                                  return;
                                                                                                                                                }
                                                                                                                                                stream = (global0 - 0x20);
                                                                                                                                                global0 = (global0 - 0x20);
                                                                                                                                                length = 0;
                                                                                                                                                state = (0 ? 0x1D : local2);
                                                                                                                                                return;
                                                                                                                                              }
                                                                                                                                              state = (tmp5 ? 0x35 : dest);
                                                                                                                                              return;
                                                                                                                                            }
                                                                                                                                            state = (0xFFFFFFC0 ? (outPos + distLow) : vb(0));
                                                                                                                                            return;
                                                                                                                                          }
                                                                                                                                          throw new Error('Unreachable code reached');
                                                                                                                                        }
                                                                                                                                        state = (0x800 ? 9 : byte2);
                                                                                                                                        return;
                                                                                                                                      }
                                                                                                                                      state = (0x800 ? 0x21 : byte2);
                                                                                                                                      return;
                                                                                                                                    }
                                                                                                                                    state = 0x63;
                                                                                                                                    return;
                                                                                                                                  }
                                                                                                                                  state = ((byte3 & 1) ? 0x8F : 0x32);
                                                                                                                                  return;
                                                                                                                                }
                                                                                                                                state = (0x10000 ? 0x15 : byte1);
                                                                                                                                return;
                                                                                                                              }
                                                                                                                              val2 = (val2 + tmp1);
                                                                                                                              state = (tmp3 ? 0x30 : 0x14);
                                                                                                                              return;
                                                                                                                            }
                                                                                                                            state = (0x10000 ? 0x12 : byte1);
                                                                                                                            return;
                                                                                                                          }
                                                                                                                          tmp3 = 0x80;
                                                                                                                          state = (0x80 ? 0x64 : byte2);
                                                                                                                          return;
                                                                                                                        }
                                                                                                                        dest = (byte1 - 4);
                                                                                                                        Gb((byte1 - 4), 0);
                                                                                                                        byte1 = (0x74 | (((tmp4 & 0x3F) & 7) << 6));
                                                                                                                        state = 0x94;
                                                                                                                        return;
                                                                                                                      }
                                                                                                                      byte1 = (outPos + distLow);
                                                                                                                      byte3 = 0;
                                                                                                                      state = 0;
                                                                                                                      return;
                                                                                                                    }
                                                                                                                    byte2 = 0x110000;
                                                                                                                    dest = 0;
                                                                                                                    state = 0x83;
                                                                                                                    return;
                                                                                                                  }
                                                                                                                  Gb(byte1, 2);
                                                                                                                  byte3 = (60 | (byte3 << 6));
                                                                                                                  state = (0xFFFFFFF0 ? 0x22 : byte2);
                                                                                                                  return;
                                                                                                                }
                                                                                                                byte3 = (byte3 + tmp1);
                                                                                                                state = (val2 ? 0x9B : 0x7A);
                                                                                                                return;
                                                                                                              }
                                                                                                              state = 0x1C;
                                                                                                              return;
                                                                                                            }
                                                                                                            state = (0x800 ? 0x16 : byte1);
                                                                                                            return;
                                                                                                          }
                                                                                                          byte2 = 1;
                                                                                                          state = 0x29;
                                                                                                          return;
                                                                                                        }
                                                                                                        byte3 = 1;
                                                                                                        state = 0x90;
                                                                                                        return;
                                                                                                      }
                                                                                                      length = 0;
                                                                                                      Gb(0, 0x10FC88);
                                                                                                      tmp1 = func213(0x1D, local2, 1);
                                                                                                      state = (func213(0x1D, local2, 1) ? sb(byte3, ((byte1 >>> 6) | 0xC0), 0) : 0x5D);
                                                                                                      return;
                                                                                                    }
                                                                                                    distMid = (byte3 + length);
                                                                                                    tmp5 = (dest + (val2 - byte3));
                                                                                                    distLow = (local1 + distMid);
                                                                                                    byte1 = (length + 2);
                                                                                                    dist2 = (byte3 + (length + 2));
                                                                                                    dist4 = (local1 + local2);
                                                                                                    dist3 = ((length - local2) + byte3);
                                                                                                    dist1 = ((byte1 - local2) + byte3);
                                                                                                    outPos = 0;
                                                                                                    val1 = distMid;
                                                                                                    state = 0x35;
                                                                                                    return;
                                                                                                  }
                                                                                                  val1 = (byte2 + byte3);
                                                                                                  state = 0x61;
                                                                                                  return;
                                                                                                }
                                                                                                val1 = (0x10000 ? 4 : byte1);
                                                                                                state = 0xA5;
                                                                                                return;
                                                                                              }
                                                                                              dest = 1;
                                                                                              state = 0x83;
                                                                                              return;
                                                                                            }
                                                                                            state = (0x800 ? 0x71 : byte1);
                                                                                            return;
                                                                                          }
                                                                                          state = 0x53;
                                                                                          return;
                                                                                        }
                                                                                        state = (0x10000 ? 0x17 : byte1);
                                                                                        return;
                                                                                      }
                                                                                      state = 0x24;
                                                                                      return;
                                                                                    }
                                                                                    byte1 = dest;
                                                                                    state = (0x110000 ? 0 : byte2);
                                                                                    return;
                                                                                  }
                                                                                  byte1 = (byte2 + val1);
                                                                                  val2 = 0x80;
                                                                                  state = (0x80 ? 0x82 : byte3);
                                                                                  return;
                                                                                }
                                                                                length = outPos;
                                                                                state = 0x56;
                                                                                return;
                                                                              }
                                                                              state = (0xFFFFFFC0 ? ((outPos + distLow) + 2) : vb(0));
                                                                              return;
                                                                            }
                                                                            state = (0x800 ? 0x1B : byte3);
                                                                            return;
                                                                          }
                                                                          state = (0x110000 ? 0x44 : byte2);
                                                                          return;
                                                                        }
                                                                        byte2 = vb(0);
                                                                        state = (0 ? byte1 : vb(0));
                                                                        return;
                                                                      }
                                                                      state = (distHi ? 0x62 : local2);
                                                                      return;
                                                                    }
                                                                    outStart = ((outPos - dest) + destEnd);
                                                                    state = (0x3A3 ? 0x38 : byte1);
                                                                    return;
                                                                  }
                                                                  byte2 = ((byte2 & 0x3F) | (byte1 << 6));
                                                                  state = (0x110000 ? 0x48 : ((byte2 & 0x3F) | (byte1 << 6)));
                                                                  return;
                                                                }
                                                                byte2 = 2;
                                                                state = 0x29;
                                                                return;
                                                              }
                                                              val2 = (checkByteOffset(0xFFFFFF82, byte2) ? 0x67 : 0xFFFFFF83);
                                                              state = 0x48;
                                                              return;
                                                            }
                                                            byte2 = ub(0x1E, stream, 0x14);
                                                            byte3 = ub(0x6B, stream, 0x1C);
                                                            state = (ub(0x6B, stream, 0x1C) ? 0x55 : 0x59);
                                                            return;
                                                          }
                                                          val2 = 2;
                                                          state = 0xD;
                                                          return;
                                                        }
                                                        dest = (byte1 - 3);
                                                        Gb((byte1 - 3), 0);
                                                        tmp1 = 0x6C;
                                                        tmp4 = 108;
                                                        state = (0xFFFFFFC0 ? 0x4E : 108);
                                                        return;
                                                      }
                                                      byte3 = 2;
                                                      state = 0x90;
                                                      return;
                                                    }
                                                    dest = (byte1 - 1);
                                                    byte2 = vb(0);
                                                    state = (0 ? (byte1 - 1) : vb(0));
                                                    return;
                                                  }
                                                  byte3 = 1;
                                                  state = 0x7E;
                                                  return;
                                                }
                                                val2 = val1;
                                                state = (byte3 ? 0x43 : (ub(0x69, stream, 8) - val1));
                                                return;
                                              }
                                              state = 0x24;
                                              return;
                                            }
                                            tmp1 = ub(sb(val1, ((byte3 >>> 6) | 0xC0), 0), stream, 0xC);
                                            val2 = (ub(sb(val1, ((byte3 >>> 6) | 0xC0), 0), stream, 0xC) + val2);
                                            state = (tmp3 ? 0x13 : 0x45);
                                            return;
                                          }
                                          length = (local2 & 0x7FFFFFF0);
                                          dest = 0;
                                          val2 = local2;
                                          state = 0x99;
                                          return;
                                        }
                                        byte1 = ((tmp3 & 0x3F) | (byte1 << 6));
                                        state = 0x87;
                                        return;
                                      }
                                      val1 = 2;
                                      state = 0xA5;
                                      return;
                                    }
                                    state = ((distHi + 2) ? 0x81 : local2);
                                    return;
                                  }
                                  state = (checkByteOffset(0x48, byte2) ? 0x9F : 0x37);
                                  return;
                                }
                                dest = (byte1 - 2);
                                Gb((byte1 - 2), 0);
                                tmp1 = 0x8C;
                                tmp3 = -116;
                                state = (0xFFFFFFC0 ? 0xA : -116);
                                return;
                              }
                              byte1 = (tmp1 + dest);
                              byte2 = (local1 + dest);
                              byte3 = vb(0);
                              val1 = vb(0);
                              outPos = vb(0);
                              tmp3 = vb(0);
                              destEnd = vb(0);
                              tmp5 = vb(0);
                              outStart = vb(0);
                              tmp4 = vb(0);
                              dist4 = vb(0);
                              distHi = vb(0);
                              distLow = vb(0);
                              distMid = vb(0);
                              dist3 = vb(0);
                              dist2 = vb(0);
                              dist1 = vb(0);
                              local29 = vb(0);
                              state = (0x10 ? ((byte2 + 0xE) + (((vb(0) ^ 0xFFFFFFFF) & 0x80) >>> 7)) : (((byte2 + 0xF) + (((vb(0) ^ 0xFFFFFFFF) & 0x80) >>> 7)) & 0xFF));
                              return;
                            }
                            state = (0x10000 ? 0x5C : byte3);
                            return;
                          }
                          state = 0x1C;
                          return;
                        }
                        state = (dest ? 0x56 : local2);
                        return;
                      }
                      byte3 = 1;
                      state = 0x54;
                      return;
                    }
                    state = (0x800 ? 0x78 : byte1);
                    return;
                  }
                  state = ((outPos + dist1) ? 0xA1 : 0x5B);
                  return;
                }
                state = 7;
                return;
              }
              state = 0x4F;
              return;
            }
            state = 0x20;
            return;
          }
          state = (0x800 ? 0x27 : byte1);
          return;
        }
        length = dest;
        state = 0x25;
        return;
      }
      val2 = byte2;
      state = (val1 ? 0x4A : (ub(0x92, stream, 8) - byte2));
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: This function implements a state machine that decompresses data from a stream, using bitwise operations and memory lookups via helper functions, potentially handling various compression scenarios and errors. 
  
   */

  // func388 is processBaseAddr
  /* renamed vars: local2=state, local3=baseAddr, local4=offset, local5=value, local6=hasValue, local7=temp */
  function processBaseAddr(local0, local1) {
    let Error, Unreachable, baseAddr, code, hasValue, local8, local9, loop0, offset, reached, state, temp, value;
    state = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          switch (state) {
                                                            case 0: continue loop0;
                                                            case 1: return;
                                                            case 2: return;
                                                            case 3: return;
                                                            case 4: return;
                                                            case 5: return;
                                                            case 6: return;
                                                            case 7: return;
                                                            case 8: return;
                                                            case 9: return;
                                                            case 10: return;
                                                            case 11: return;
                                                            case 12: return;
                                                            case 13: return;
                                                            case 14: return;
                                                            case 15: return;
                                                            case 16: return;
                                                            case 17: return;
                                                            case 18: return;
                                                            case 19: return;
                                                            case 20: return;
                                                            case 21: return;
                                                            case 22: return;
                                                            case 23: return;
                                                            case 24: return;
                                                            case 25: return;
                                                            default: return;
                                                          }
                                                        }
                                                        offset = (offset + 1);
                                                        if (hasValue) {
                                                        } else {
                                                        }
                                                        state = 0x17;
                                                        return;
                                                      }
                                                      state = 0x16;
                                                      return;
                                                    }
                                                    baseAddr = (global0 - 0x30);
                                                    global0 = (global0 - 0x30);
                                                    value = ub(Pb(0), local1, 0);
                                                    offset = ub(0x80000002, ub(Pb(0), local1, 0), 0x14);
                                                    hasValue = ub(ub(0x80000002, ub(Pb(0), local1, 0), 0x14), value, 0x10);
                                                    if (ub(ub(0x80000002, ub(Pb(0), local1, 0), 0x14), value, 0x10)) {
                                                    } else {
                                                    }
                                                    state = 7;
                                                    return;
                                                  }
                                                  Gb((offset + local9), 0);
                                                  temp = 0x12;
                                                  local1 = 9;
                                                  if (0x17) {
                                                  } else {
                                                  }
                                                  state = 0x11;
                                                  return;
                                                }
                                                Qb(ub(local0, baseAddr, 0x28), Pb(4), local0, 9, 0xC, local0, baseAddr, wb(0x24), 0);
                                                state = 0x16;
                                                return;
                                              }
                                              Gb(local1, 4);
                                              if (Pb(0)) {
                                              } else {
                                              }
                                              state = 0;
                                              return;
                                            }
                                            state = 0x11;
                                            return;
                                          }
                                          offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 0x10), baseAddr, 0x14));
                                          state = 0x16;
                                          return;
                                        }
                                        offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 8), baseAddr, 0xC));
                                        state = 0x16;
                                        return;
                                      }
                                      Gb(local1, 4);
                                      if ((Pb(4) & 1)) {
                                      } else {
                                      }
                                      state = 8;
                                      return;
                                    }
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        {
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    {
                                                                                                      {
                                                                                                        {
                                                                                                          {
                                                                                                            {
                                                                                                              {
                                                                                                                Gb((offset + local9), 0);
                                                                                                                temp = 6;
                                                                                                                switch (-3) {
                                                                                                                  case 0: continue loop0;
                                                                                                                  case 1: return;
                                                                                                                  case 2: return;
                                                                                                                  case 3: return;
                                                                                                                  case 4: return;
                                                                                                                  case 5: return;
                                                                                                                  case 6: return;
                                                                                                                  case 7: return;
                                                                                                                  case 8: return;
                                                                                                                  case 9: return;
                                                                                                                  case 10: return;
                                                                                                                  case 11: return;
                                                                                                                  case 12: return;
                                                                                                                  case 13: return;
                                                                                                                  case 14: return;
                                                                                                                  case 15: return;
                                                                                                                  case 16: return;
                                                                                                                  case 17: return;
                                                                                                                  case 18: return;
                                                                                                                  case 19: return;
                                                                                                                  case 20: return;
                                                                                                                  case 21: return;
                                                                                                                  case 22: return;
                                                                                                                  case 23: return;
                                                                                                                  case 24: return;
                                                                                                                  case 25: return;
                                                                                                                  case 26: return;
                                                                                                                  case 27: return;
                                                                                                                  case 28: return;
                                                                                                                  case 29: return;
                                                                                                                  case 30: return;
                                                                                                                  case 31: return;
                                                                                                                  case 32: return;
                                                                                                                  case 33: return;
                                                                                                                  case 34: return;
                                                                                                                  case 35: return;
                                                                                                                  default: return;
                                                                                                                }
                                                                                                              }
                                                                                                              return;
                                                                                                            }
                                                                                                            return;
                                                                                                          }
                                                                                                          return;
                                                                                                        }
                                                                                                        return;
                                                                                                      }
                                                                                                      return;
                                                                                                    }
                                                                                                    return;
                                                                                                  }
                                                                                                  return;
                                                                                                }
                                                                                                return;
                                                                                              }
                                                                                              return;
                                                                                            }
                                                                                            return;
                                                                                          }
                                                                                          return;
                                                                                        }
                                                                                        return;
                                                                                      }
                                                                                      return;
                                                                                    }
                                                                                    return;
                                                                                  }
                                                                                  return;
                                                                                }
                                                                                return;
                                                                              }
                                                                              return;
                                                                            }
                                                                            return;
                                                                          }
                                                                          return;
                                                                        }
                                                                        return;
                                                                      }
                                                                      return;
                                                                    }
                                                                    return;
                                                                  }
                                                                  return;
                                                                }
                                                                return;
                                                              }
                                                              return;
                                                            }
                                                            return;
                                                          }
                                                          return;
                                                        }
                                                        return;
                                                      }
                                                      return;
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                                return;
                                              }
                                              return;
                                            }
                                            return;
                                          }
                                          return;
                                        }
                                        return;
                                      }
                                    }
                                    state = 0x18;
                                    return;
                                  }
                                  processTempFlags(5, (baseAddr + 0x24), value);
                                  if (0x80000001) {
                                  } else {
                                  }
                                  state = 4;
                                  return;
                                }
                                if (((1 << local1) & 0x800013)) {
                                } else {
                                }
                                state = 0x11;
                                return;
                              }
                              state = 0x16;
                              return;
                            }
                            offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 0), baseAddr, 4));
                            state = 0xD;
                            return;
                          }
                          offset = (offset + 1);
                          if (hasValue) {
                          } else {
                          }
                          state = 3;
                          return;
                        }
                        state = 0x17;
                        return;
                      }
                      if (0x5D) {
                      } else {
                      }
                      state = 0xB;
                      return;
                    }
                    local8 = (value + 0xC);
                    local9 = ub(0xE, value, 0xC);
                    state = 0xA;
                    return;
                  }
                  state = 0x16;
                  return;
                }
                state = 3;
                return;
              }
              state = 7;
              return;
            }
            global0 = (baseAddr + 0x30);
            return Pb(0);
          }
          offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 0x18), baseAddr, 0x1C));
          state = 0xD;
          return;
        }
        if (0x5D) {
        } else {
        }
        state = 0x13;
        return;
      }
      offset = (offset + 1);
      if (hasValue) {
      } else {
      }
      state = 0xA;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a state machine, primarily returning immediately in each state, with some states performing memory operations related to potential data decompression. 
  
   */

  // func389 is processIndexedPtrs
  /* renamed vars: local1=state, local2=retVal, local3=idx1, local4=ptr1, local5=idx2, local6=idx3, local7=flag1, local8=ptr2, local9=offset1, local10=ptr3, local11=flag2, local12=ptr4 */
  function processIndexedPtrs(local0) {
    let Error, Unreachable, code, flag1, flag2, idx1, idx2, idx3, local13, loop0, loop1, offset1, ptr1, ptr2, ptr3, ptr4, reached, retVal, state;
    state = 0x15;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            switch (state) {
                                                              case 0: continue loop0;
                                                              case 1: return;
                                                              case 2: return;
                                                              case 3: return;
                                                              case 4: return;
                                                              case 5: return;
                                                              case 6: return;
                                                              case 7: return;
                                                              case 8: return;
                                                              case 9: return;
                                                              case 10: return;
                                                              case 11: return;
                                                              case 12: return;
                                                              case 13: return;
                                                              case 14: return;
                                                              case 15: return;
                                                              case 16: return;
                                                              case 17: return;
                                                              case 18: return;
                                                              case 19: return;
                                                              case 20: return;
                                                              case 21: return;
                                                              case 22: return;
                                                              case 23: return;
                                                              case 24: return;
                                                              case 25: return;
                                                              case 26: return;
                                                              default: return;
                                                            }
                                                          }
                                                          idx1 = (idx1 + 1);
                                                          state = (flag1 ? 0xF : idx1);
                                                          return;
                                                        }
                                                        global0 = (ptr1 + 0x30);
                                                        return retVal;
                                                      }
                                                      retVal = func145(ub(ub((ptr1 + 0x24), ptr1, 0x18), ptr1, 0x1C));
                                                      state = 1;
                                                      return;
                                                    }
                                                    state = (flag1 ? 0xF : idx1);
                                                    return;
                                                  }
                                                  state = (8 ? 2 : ((idx2 - 0x31) & 0xFF));
                                                  return;
                                                }
                                                Gb((idx1 + offset1), 0);
                                                state = (0xA ? 0x17 : 215);
                                                return;
                                              }
                                              state = (flag1 ? 0xA : idx1);
                                              return;
                                            }
                                            retVal = func145(ub(ub((ptr1 + 0x24), ptr1, 8), ptr1, 0xC));
                                            state = 1;
                                            return;
                                          }
                                          state = 0;
                                          idx3 = 0;
                                          ptr2 = 0;
                                          flag2 = 0;
                                          ptr4 = 0;
                                          local13 = 0;
                                          retVal = 9;
                                          loop1: while (true) {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      switch (retVal) {
                                                                        case 0: continue loop1;
                                                                        case 1: continue loop0;
                                                                        case 2: return;
                                                                        case 3: return;
                                                                        case 4: return;
                                                                        case 5: return;
                                                                        case 6: return;
                                                                        case 7: return;
                                                                        case 8: return;
                                                                        case 9: return;
                                                                        case 10: return;
                                                                        case 11: return;
                                                                        default: return;
                                                                      }
                                                                    }
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              Gb((ub(calculateOffset(ptr3), ptr4, 0) + state), 0);
                                                                              switch (((ptr1 + 8) - 0x2B)) {
                                                                                case 0: continue loop1;
                                                                                case 1: continue loop0;
                                                                                case 2: return;
                                                                                default: return;
                                                                              }
                                                                            }
                                                                            return;
                                                                          }
                                                                          return;
                                                                        }
                                                                        continue loop0;
                                                                      }
                                                                    }
                                                                    retVal = 0xA;
                                                                    return;
                                                                  }
                                                                  state = 0;
                                                                  retVal = (flag2 ? 5 : idx3);
                                                                  return;
                                                                }
                                                                idx3 = (state + 1);
                                                                local13 = ub(0xB, local0, 0xC);
                                                                Gb((ub(0xB, local0, 0xC) + state), 0);
                                                                retVal = (9 ? Pb(0x14) : 209);
                                                                return;
                                                              }
                                                              Gb((idx3 + local13), 0);
                                                              retVal = (9 ? 4 : 213);
                                                              return;
                                                            }
                                                            idx3 = (idx3 + 1);
                                                            retVal = (flag2 ? 3 : idx3);
                                                            return;
                                                          }
                                                          global0 = (ptr2 + 0x20);
                                                          retVal = state;
                                                          return;
                                                        }
                                                        state = (idx3 + 2);
                                                        retVal = 0xA;
                                                        return;
                                                      }
                                                      retVal = 3;
                                                      return;
                                                    }
                                                    retVal = 5;
                                                    return;
                                                  }
                                                  ptr2 = (global0 - 0x20);
                                                  global0 = (global0 - 0x20);
                                                  idx3 = ub(local0, local0, 0x14);
                                                  state = (ub(local0, local0, 0x14) + 1);
                                                  ptr4 = (local0 + 0xC);
                                                  flag2 = ub(0, local0, 0x10);
                                                  retVal = (state ? 0xA : ub(0, local0, 0x10));
                                                  return;
                                                }
                                                retVal = (flag2 ? 0xB : state);
                                                return;
                                              }
                                              state = func145(ub(ub((ptr2 + 0x14), ptr2, 8), ptr2, 0xC));
                                              retVal = 5;
                                              continue loop0;
                                            }
                                          }
                                          state = 1;
                                          return;
                                        }
                                        state = (0x65 ? 1 : (idx2 | 0x20));
                                        return;
                                      }
                                      state = 1;
                                      return;
                                    }
                                    state = (flag1 ? 0xF : idx1);
                                    return;
                                  }
                                  Gb((idx2 + offset1), 0);
                                  state = (9 ? 0x11 : 221);
                                  return;
                                }
                                retVal = func145(ub(ub((ptr1 + 0x24), ptr1, 0x10), ptr1, 0x14));
                                state = 1;
                                return;
                              }
                              idx2 = (idx1 + 1);
                              state = (flag1 ? 0xD : idx2);
                              return;
                            }
                            retVal = 0;
                            state = (flag1 ? 1 : idx1);
                            return;
                          }
                          idx1 = (idx2 + 1);
                          ptr3 = (local0 + 0xC);
                          offset1 = ub(4, local0, 0xC);
                          Gb((ub(4, local0, 0xC) + idx2), 0);
                          idx2 = 0xB;
                          state = (0x30 ? Pb(0x14) : 0xB);
                          return;
                        }
                        idx1 = (idx1 + 2);
                        state = 6;
                        return;
                      }
                      Gb((idx1 + offset1), 0);
                      idx2 = 8;
                      state = (0x65 ? 0x19 : 8);
                      return;
                    }
                    state = 0x1A;
                    return;
                  }
                  state = 0x1A;
                  return;
                }
                ptr1 = (global0 - 0x30);
                global0 = (global0 - 0x30);
                idx2 = ub(2, local0, 0x14);
                flag1 = ub(ub(2, local0, 0x14), local0, 0x10);
                state = (ub(ub(2, local0, 0x14), local0, 0x10) ? (idx2 + 1) : 0x10);
                return;
              }
              state = (0x2E ? 1 : idx2);
              return;
            }
            state = 0xF;
            return;
          }
          state = (idx1 + offset1);
          ptr3 = (idx1 + 1);
          idx1 = (idx1 + 1);
          Gb(state, 0);
          idx2 = 6;
          state = (0xA ? 9 : 214);
          return;
        }
        state = (0x45 ? 8 : idx2);
        return;
      }
      Gb((idx1 + offset1), 0);
      state = (9 ? 0xF : 208);
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 0x16;

  }

  /*
   * AI Summary: The function simulates a state machine, primarily utilizing bitwise operations and memory manipulation through helper functions (Gb, ub, calculateOffset), to likely decode or decompress data from a memory buffer, though all execution paths ultimately return without producing a meaningful result. 
  
   */

  function func390() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func391 is processReturnValue
  /* renamed vars: local1=baseAddr, local2=returnCode, local3=returnValue, local4=tempFlag1, local5=hasValue, local6=tempConst5 */
  function processReturnValue(local0) {
    let Error, Unreachable, baseAddr, code, hasValue, local7, loop0, reached, returnCode, returnValue, tempConst5, tempFlag1;
    returnCode = 6;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    switch (returnCode) {
                                      case 0: continue loop0;
                                      case 1: return;
                                      case 2: return;
                                      case 3: return;
                                      case 4: return;
                                      case 5: return;
                                      case 6: return;
                                      case 7: return;
                                      case 8: return;
                                      case 9: return;
                                      case 10: return;
                                      case 11: return;
                                      case 12: return;
                                      case 13: return;
                                      case 14: return;
                                      default: return;
                                    }
                                  }
                                  tempFlag1 = 1;
                                  returnValue = (returnValue + 1);
                                  if (hasValue) {
                                  } else {
                                  }
                                  returnCode = 0xA;
                                  return;
                                }
                                returnValue = 0;
                                returnCode = 7;
                                return;
                              }
                              returnValue = func145(ub(ub((baseAddr + 0x24), baseAddr, 8), baseAddr, 0xC));
                              returnCode = 7;
                              return;
                            }
                            if (tempFlag1) {
                            } else {
                            }
                            returnCode = 9;
                            return;
                          }
                          returnValue = func145(ub(ub((baseAddr + 0x24), baseAddr, 0x18), baseAddr, 0x1C));
                          returnCode = 7;
                          return;
                        }
                        if (0x2C) {
                        } else {
                        }
                        returnCode = 4;
                        return;
                      }
                      baseAddr = (global0 - 0x30);
                      global0 = (global0 - 0x30);
                      returnValue = ub(0xE, local0, 0x14);
                      hasValue = ub(ub(0xE, local0, 0x14), local0, 0x10);
                      if (ub(ub(0xE, local0, 0x14), local0, 0x10)) {
                      } else {
                      }
                      returnCode = 2;
                      return;
                    }
                    global0 = (baseAddr + 0x30);
                    return returnValue;
                  }
                  local7 = ub(8, local0, 0xC);
                  returnCode = 0xA;
                  return;
                }
                if (0x7D) {
                } else {
                }
                returnCode = 1;
                return;
              }
              Gb((returnValue + local7), 0);
              tempConst5 = 5;
              tempFlag1 = -4;
              if (0x17) {
              } else {
              }
              returnCode = 0xB;
              return;
            }
            tempFlag1 = 0;
            returnCode = 3;
            return;
          }
          returnValue = hasValue;
          returnCode = 3;
          return;
        }
        if (((1 << tempFlag1) & 0x800013)) {
        } else {
        }
        returnCode = 0xB;
        return;
      }
      returnValue = func145(ub(ub((baseAddr + 0x24), baseAddr, 0x10), baseAddr, 0x14));
      returnCode = 7;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return calculateOffset((local0 + 0xC));

  }

  /*
   * AI Summary: The function simulates a complex state machine, primarily interacting with memory through bitwise operations and address calculations, ultimately returning a value derived from a memory buffer based on various conditional checks.
  
   */

  function func392() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func393() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func394() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func395 is processLocalVars
  /* renamed vars: nextState=local1 */
  function processLocalVars(local0) {
    let local1, local2, loop0;
    local1 = 4;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  switch (local1) {
                    case 0: continue loop0;
                    case 1: return;
                    case 2: return;
                    case 3: return;
                    case 4: return;
                    case 5: return;
                    default: return;
                  }
                }
                local1 = (0xFFFFFFFF ? 5 : local0);
                return;
              }
              func279(ub(3, (local0 + 0x10), 0), (local2 << 4));
              local1 = 0;
              return;
            }
            func279(local0, 0x18);
            local1 = 5;
            return;
          }
          local2 = ub(local0, local0, 4);
          local1 = (1 ? 5 : local2);
          return;
        }
        local0 = ub(2, local0, 0);
        local2 = ub(Pb(4), (ub(2, local0, 0) + 0xC), 0);
        local1 = 0;
        return;
      }
    }

  }

  /*
   * AI Summary: The function appears to obfuscated and likely performs conditional memory address calculations and bitwise operations, ultimately resolving to a simple return statement based on a seemingly arbitrary control flow. 
  
   */

  function func396() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func397() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func398() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func399 is checkLocalVarAndReturn
  function checkLocalVarAndReturn(local0) {
    let Error, Unreachable, code, local1, loop0, reached;

    local1 = 3;
    loop0: while (true) {
      {
        {
          {
            {
              switch (local1) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            func279(local0, 0xC);
            local1 = 2;
            return;
          }
          local1 = (ub(local0, local0, 4) - 1);
          local1 = (local1 ? 2 : 0);
          return;
        }
        return Pb(4);
      }
      local0 = ub(2, local0, 0);
      local1 = (0xFFFFFFFF ? 1 : ub(2, local0, 0));
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function `func399` conditionally manipulates a local variable based on values retrieved from memory using `ub` and potentially returns, throws an error, or calls `func279` to determine a return path. 
  
   */

  // func400 is calculateMaskedOffset
  /* renamed vars: offsetSum=local2, unusedMask=local3 */
  function calculateMaskedOffset(local0, local1) {
    let local2, local3, local4, local5;
    local1 = (local0 + local1);
    local0 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    local2 = (((local0 << 3) + local1) + 0x408);
    if (viewI32_0[(((local0 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    local0 = viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8];
    local4 = (((local1 >>> 0) % (0x140 >>> 0)) - 0x13E);
    if (0) {
      local3 = (0xFFFF >>> (local4 << 3));
      local5 = ((0xFFFF >>> (local4 << 3)) ^ 0xFFFFFFFF);
      if (viewI32_0[(((local2 + 2) - local4)) / 4]) {
      } else {
      }
    } else {
    }
    return ((local0 ^ viewI64_0[((((local1 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]) & 0xFFFF);

  }

  /*
   * AI Summary: The function calculates a 16-bit value by XORing a value from a 64-bit integer array (indexed based on `local1`) with itself and masking the result, effectively returning 0.
  
   */

  function func401() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func402() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func403() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func404() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func405() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func406() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func407 is processTempFlags
  /* renamed vars: local2=state, local3=temp, local4=baseAddr, local5=temp2, local6=flag, local7=temp3, local8=temp4 */
  function processTempFlags(local0, local1) {
    let Error, Unreachable, baseAddr, code, flag, local10, local9, loop0, reached, state, temp, temp2, temp3, temp4;
    state = 0x17;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      {
                                                                                        switch (state) {
                                                                                          case 0: continue loop0;
                                                                                          case 1: return;
                                                                                          case 2: return;
                                                                                          case 3: return;
                                                                                          case 4: return;
                                                                                          case 5: return;
                                                                                          case 6: return;
                                                                                          case 7: return;
                                                                                          case 8: return;
                                                                                          case 9: return;
                                                                                          case 10: return;
                                                                                          case 11: return;
                                                                                          case 12: return;
                                                                                          case 13: return;
                                                                                          case 14: return;
                                                                                          case 15: return;
                                                                                          case 16: return;
                                                                                          case 17: return;
                                                                                          case 18: return;
                                                                                          case 19: return;
                                                                                          case 20: return;
                                                                                          case 21: return;
                                                                                          case 22: return;
                                                                                          case 23: return;
                                                                                          case 24: return;
                                                                                          case 25: return;
                                                                                          case 26: return;
                                                                                          case 27: return;
                                                                                          case 28: return;
                                                                                          case 29: return;
                                                                                          case 30: return;
                                                                                          case 31: return;
                                                                                          case 32: return;
                                                                                          case 33: return;
                                                                                          case 34: return;
                                                                                          case 35: return;
                                                                                          case 36: return;
                                                                                          case 37: return;
                                                                                          case 38: return;
                                                                                          case 39: return;
                                                                                          case 40: return;
                                                                                          default: return;
                                                                                        }
                                                                                      }
                                                                                      temp = (temp + 1);
                                                                                      state = (flag ? 1 : temp);
                                                                                      return;
                                                                                    }
                                                                                    Gb((temp + temp3), 0);
                                                                                    temp2 = 25;
                                                                                    state = (0x19 ? 0x23 : 25);
                                                                                    return;
                                                                                  }
                                                                                  flag = 0;
                                                                                  state = (0 ? 0x1B : temp);
                                                                                  return;
                                                                                }
                                                                                temp = func145(ub(ub((baseAddr + 0x20), baseAddr, 0x10), baseAddr, 0x14));
                                                                                state = 0x16;
                                                                                return;
                                                                              }
                                                                              Gb(0, 0x10FC88);
                                                                              flag = 1;
                                                                              local1 = func213(0x1B, temp, 1);
                                                                              state = (func213(0x1B, temp, 1) ? (baseAddr + 0x10) : 0x11);
                                                                              return;
                                                                            }
                                                                            state = (0x6E0100n ? 7 : (local10 | (temp4 << 0x10n)));
                                                                            return;
                                                                          }
                                                                          throw new Error('Unreachable code reached');
                                                                        }
                                                                        temp2 = (temp + 1);
                                                                        state = (flag ? 0xB : temp2);
                                                                        return;
                                                                      }
                                                                      local10 = 0x100n;
                                                                      state = 5;
                                                                      return;
                                                                    }
                                                                    Gb((temp + temp3), 0);
                                                                    temp4 = 8;
                                                                    temp2 = -1;
                                                                    state = (0x17 ? 0x10 : -1);
                                                                    return;
                                                                  }
                                                                  state = 0xE;
                                                                  return;
                                                                }
                                                                temp = func145(ub(ub((baseAddr + 0x20), baseAddr, 8), baseAddr, 0xC));
                                                                state = 0x16;
                                                                return;
                                                              }
                                                              state = (0x19 ? 0x1E : temp2);
                                                              return;
                                                            }
                                                            state = (temp ? 4 : 0x26);
                                                            return;
                                                          }
                                                          global0 = (baseAddr + 0x30);
                                                          return 0x22;
                                                        }
                                                        flag = (flag ? flag : temp2);
                                                        state = ((flag ? flag : temp2) ? temp4 : temp2);
                                                        return;
                                                      }
                                                      state = (((1 << temp2) & 0x800013) ? 0x1A : 8);
                                                      return;
                                                    }
                                                    func458(temp);
                                                    temp2 = temp2;
                                                    state = 0xE;
                                                    return;
                                                  }
                                                  state = (flag ? 0xB : temp2);
                                                  return;
                                                }
                                                temp2 = (temp + 3);
                                                Gb((temp3 + temp4), 0);
                                                state = (0x6C ? 0x12 : 3);
                                                return;
                                              }
                                              state = 0xE;
                                              return;
                                            }
                                            Gb((temp2 + temp3), 0);
                                            state = (0x6C ? 3 : 0x14);
                                            return;
                                          }
                                          state = 0xE;
                                          return;
                                        }
                                        baseAddr = (global0 - 0x30);
                                        global0 = (global0 - 0x30);
                                        temp = ub(0x1F, local1, 0x14);
                                        flag = ub(ub(0x1F, local1, 0x14), local1, 0x10);
                                        state = (ub(ub(0x1F, local1, 0x14), local1, 0x10) ? Pb(4) : 0x28);
                                        return;
                                      }
                                      state = (temp ? 0x25 : 0x26);
                                      return;
                                    }
                                    temp4 = (local1 + 0xC);
                                    temp3 = ub(temp, local1, 0xC);
                                    state = 1;
                                    return;
                                  }
                                  temp = (temp + 1);
                                  state = (flag ? 9 : temp);
                                  return;
                                }
                                throw new Error('Unreachable code reached');
                              }
                              temp2 = func145(ub(ub((baseAddr + 0x20), baseAddr, 0x18), baseAddr, 0x1C));
                              state = 0xA;
                              return;
                            }
                            state = 0x1C;
                            return;
                          }
                          temp2 = ub(func325(temp4, local1), baseAddr, 0x24);
                          local1 = ub(0xA, baseAddr, 0x20);
                          state = (2 ? 0x24 : ub(0xA, baseAddr, 0x20));
                          return;
                        }
                        state = (flag ? 0x1C : temp);
                        return;
                      }
                      flag = 0;
                      state = (0 ? 6 : temp);
                      return;
                    }
                    temp4 = (temp + 2);
                    Gb((temp2 + temp3), 0);
                    state = (0x75 ? 0xF : 3);
                    return;
                  }
                  func175(local1, func329((baseAddr + 0x2F), 0x100B78), local1);
                  temp2 = Pb(0x14);
                  state = 0xA;
                  return;
                }
                state = (((1 << temp2) & 0x800013) ? 0 : 0xC);
                return;
              }
              temp = ub((temp + 2), baseAddr, 0x28);
              state = ((local1 & 1) ? 2 : 0x20);
              return;
            }
            Gb(0, 0x10FC88);
            flag = 1;
            local1 = func213(6, temp, 1);
            state = (func213(6, temp, 1) ? 0x18 : 0x11);
            return;
          }
          local1 = 1;
          state = 0x11;
          return;
        }
        local10 = 0n;
        temp = flag;
        state = 5;
        return;
      }
      local9 = (local1 + 0xC);
      temp3 = ub(0x19, local1, 0xC);
      state = 9;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func407` implements a state machine that conditionally executes code blocks involving bitwise operations, memory manipulation, and external function calls (`ub`, `Gb`, `func175`, etc.) based on the current state, ultimately returning void or terminating early.
  
   */

  function func408() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func409() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func410() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v2;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v2 */
  }


  // func411 is lookupAndCall
  function lookupAndCall(local0, local1, local2) {
    let Error, Unreachable, code, local3, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            switch (local3) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          if (local0) {
          } else {
          }
          local3 = 2;
          return;
        }
        return table0[ub(local2, local1, 0x14)](1, local0);
      }
    }
    throw new Error('Unreachable code reached');
    return func217();

  }

  /*
   * AI Summary: `func411` conditionally executes a function from `table0` indexed by a memory address manipulation computed by `ub`, or returns based on a control value (`local3`).
  
   */

  function func412() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func413 is calculateMemoryOffset
  function calculateMemoryOffset(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, local6, local7, local8, local9, loop0, reached;

    local5 = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            switch (local5) {
                              case 0: continue loop0;
                              case 1: return;
                              case 2: return;
                              case 3: return;
                              case 4: return;
                              case 5: return;
                              case 6: return;
                              case 7: return;
                              case 8: return;
                              case 9: return;
                              case 10: return;
                              default: return;
                            }
                          }
                          local5 = (1 ? 9 : ub(7, local6, 8));
                          return;
                        }
                        local2 = local3;
                        local5 = 0;
                        return;
                      }
                      local6 = (global0 - 0x20);
                      global0 = (global0 - 0x20);
                      local2 = (local1 + local2);
                      local5 = (local1 ? 4 : (local1 + local2));
                      return;
                    }
                    local2 = 0;
                    local5 = 0;
                    return;
                  }
                  local1 = ub(local2, local0, 0);
                  local5 = (ub(local2, local0, 0) << 1);
                  local2 = (local5 ? (ub(local2, local0, 0) << 1) : local2);
                  local5 = (1 ? 4 : local4);
                  local8 = (local5 ? (1 ? 4 : local4) : local2);
                  local9 = (8 * (local5 ? (1 ? 4 : local4) : local2));
                  local5 = (0n ? (local5 ? (ub(local2, local0, 0) << 1) : local2) : ((8 * (local5 ? (1 ? 4 : local4) : local2)) >> 0x20n));
                  return;
                }
                local5 = 0xA;
                return;
              }
              local5 = 0xA;
              return;
            }
            local1 = ub((((local3 + local4) - 1) & (0 - local3)), local6, 0xC);
            global0 = (local6 + 0x20);
            return Pb(4);
          }
          local7 = local9;
          local5 = ((0x80000000 - local3) ? 0xA : local9);
          return;
        }
        local2 = ub(3, local6, 0x10);
        local5 = 0xA;
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a complex state machine primarily using a switch statement, with various cases appearing to perform memory operations via calls to `ub` before returning; however, the actual execution path always immediately returns. 
  
   */

  function func414(local0, local1) {

    func279(local0, local1);

  }


  // func415 is handleOpcode
  /* renamed vars: local2=opcode */
  function handleOpcode(local0, local1) {
    let Error, Unreachable, code, local3, local4, loop0, opcode, reached;
    opcode = 0x10;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          switch (opcode) {
                                            case 0: continue loop0;
                                            case 1: return;
                                            case 2: return;
                                            case 3: return;
                                            case 4: return;
                                            case 5: return;
                                            case 6: return;
                                            case 7: return;
                                            case 8: return;
                                            case 9: return;
                                            case 10: return;
                                            case 11: return;
                                            case 12: return;
                                            case 13: return;
                                            case 14: return;
                                            case 15: return;
                                            case 16: return;
                                            case 17: return;
                                            default: return;
                                          }
                                        }
                                        local3 = (local1 + 5);
                                        opcode = (0x78 ? 0xF : (local1 + 5));
                                        return;
                                      }
                                      local3 = (local1 + 3);
                                      opcode = (0x78 ? 0xF : (local1 + 3));
                                      return;
                                    }
                                    opcode = (0x78 ? 0xF : local1);
                                    return;
                                  }
                                  local4 = (local1 + 0xB);
                                  opcode = (0x78 ? 0xF : (local1 + 0xB));
                                  return;
                                }
                                local3 = (local1 + 8);
                                opcode = (0x78 ? 8 : (local1 + 8));
                                return;
                              }
                              local4 = (local1 + 0xA);
                              opcode = (0x78 ? 0xF : (local1 + 0xA));
                              return;
                            }
                            local4 = (local1 + 0xC);
                            opcode = (0x78 ? 0xF : (local1 + 0xC));
                            return;
                          }
                          local3 = (local1 + 2);
                          opcode = (0x78 ? 0xF : (local1 + 2));
                          return;
                        }
                        return Pb(0);
                      }
                      local3 = (local1 + 1);
                      opcode = (0x78 ? 0xF : (local1 + 1));
                      return;
                    }
                    local4 = (local1 + 9);
                    opcode = (0x78 ? 0xF : (local1 + 9));
                    return;
                  }
                  local4 = (local1 + 0xF);
                  opcode = (0x78 ? 0xF : (local1 + 0xF));
                  return;
                }
                local3 = (local1 + 6);
                opcode = (0x78 ? 0xF : (local1 + 6));
                return;
              }
              local4 = (local1 + 0xD);
              opcode = (0x78 ? 0xF : (local1 + 0xD));
              return;
            }
            local4 = (local1 + 0xE);
            opcode = (0x78 ? 0 : (local1 + 0xE));
            return;
          }
          throw new Error('Unreachable code reached');
        }
        local3 = (local1 + 7);
        opcode = (0x78 ? 0xF : (local1 + 7));
        return;
      }
      local3 = (local1 + 4);
      opcode = (0x78 ? 0xF : (local1 + 4));
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function simulates a switch statement using nested blocks and ultimately returns, possibly after calling a function `Pb` based on the input `local1`, but its logic is obfuscated by unreachable code and a hardcoded conditional that always evaluates to true.
  
   */

  function func416() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func417 is handleFileState
  /* renamed vars: local2=state, local3=memPtr, local4=condition, local5=result, local6=maskedValue, local7=fileHandle, local8=dataPtr, local9=dataMask, local10=dataValue, local11=offset, local12=bitmask */
  function handleFileState(local0, local1) {
    let Error, G, Ma, Unreachable, a, bitmask, code, condition, dataMask, dataPtr, dataValue, e, fileHandle, local13, local14, loop0, maskedValue, memPtr, offset, reached, result, state;
    state = 0xA;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  switch (state) {
                                                    case 0: continue loop0;
                                                    case 1: return;
                                                    case 2: return;
                                                    case 3: return;
                                                    case 4: return;
                                                    case 5: return;
                                                    case 6: return;
                                                    case 7: return;
                                                    case 8: return;
                                                    case 9: return;
                                                    case 10: return;
                                                    case 11: return;
                                                    case 12: return;
                                                    case 13: return;
                                                    case 14: return;
                                                    case 15: return;
                                                    case 16: return;
                                                    case 17: return;
                                                    case 18: return;
                                                    case 19: return;
                                                    case 20: return;
                                                    case 21: return;
                                                    default: return;
                                                  }
                                                }
                                                bitmask = ((bitmask - 1n) & bitmask);
                                                state = (((bitmask - 1n) & bitmask) ? 0x13 : 0xF);
                                                return;
                                              }
                                              bitmask = func142(local0, wb(0x28), (memPtr + 0xC));
                                              dataMask = ub(wb(0x20), local0, 0x14);
                                              maskedValue = (ub(wb(0x20), local0, 0x14) & bitmask);
                                              local14 = (((bitmask >> 0x19n) & 0x7Fn) * 0x101010101010101n);
                                              dataValue = ub(local0, local0, 0x10);
                                              offset = 0;
                                              state = 0x15;
                                              return;
                                            }
                                            func279(fileHandle, condition);
                                            state = 3;
                                            return;
                                          }
                                          state = (0x84 ? 0x10 : local1);
                                          return;
                                        }
                                        state = (((local13 & (local13 << 1n)) & 0x8080808080808080n) ? 5 : 7);
                                        return;
                                      }
                                      offset = (offset + 8);
                                      maskedValue = (((offset + 8) + maskedValue) & dataMask);
                                      state = 0x15;
                                      return;
                                    }
                                    state = 0xF;
                                    return;
                                  }
                                  state = (condition ? 2 : 3);
                                  return;
                                }
                                state = (func248(0, 9, ub(fileHandle, (dataPtr - 0x10), 0), condition) ? sb(local0, 0, 8) : 0xC);
                                return;
                              }
                              result = imports['a']['e'](ub(memPtr, (dataPtr - 8), 0));
                              state = (0x84 ? 0x14 : result);
                              return;
                            }
                            memPtr = (global0 - 0x20);
                            global0 = (global0 - 0x20);
                            local0 = ub(0x12, local0, 0);
                            Gb(ub(0x12, local0, 0), 8);
                            condition = func156((memPtr + 0x1C));
                            state = (1 ? 0xE : condition);
                            return;
                          }
                          imports['a']['G'](memPtr, local1);
                          fileHandle = ub(0x11, memPtr, 0);
                          state = (ub(0x11, memPtr, 0) ? 0xB : 0xD);
                          return;
                        }
                        imports['a']['Ma'](local1);
                        state = 0x10;
                        return;
                      }
                      condition = ub(sb(local0, 1, 8), memPtr, 4);
                      result = 0x80;
                      state = (ub(7, local0, 0x1C) ? Pb(0xC) : 1);
                      return;
                    }
                    throw new Error('Unreachable code reached');
                  }
                  dataPtr = (dataValue + ((((bitmask >>> 3) + maskedValue) & dataMask) * 0xFFFFFFEC));
                  state = (condition ? 8 : ub(0, ((dataValue + ((((bitmask >>> 3) + maskedValue) & dataMask) * 0xFFFFFFEC)) - 0xC), 0));
                  return;
                }
                global0 = (memPtr + 0x20);
                return result;
              }
              result = 0x80;
              state = 3;
              return;
            }
            imports['a']['Ma'](result);
            state = 0x14;
            return;
          }
          state = 4;
          return;
        }
        Gb((dataPtr - 4), 0);
        result = ub(func156((memPtr + 0x1C)), memPtr, 0x18);
        state = 7;
        return;
      }
      local13 = wb(0);
      bitmask = ((maskedValue + dataValue) ^ wb(0));
      bitmask = (((((maskedValue + dataValue) ^ wb(0)) - 0x101010101010101n) & (bitmask ^ 0xFFFFFFFFFFFFFFFFn)) & 0x8080808080808080n);
      state = (0n ? local14 : (((((maskedValue + dataValue) ^ wb(0)) - 0x101010101010101n) & (bitmask ^ 0xFFFFFFFFFFFFFFFFn)) & 0x8080808080808080n));
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 4;

  }

  /*
   * AI Summary: The function implements a state machine that interacts with memory, performing bitwise operations, conditional logic, and external function calls based on calculated addresses and values, likely related to file handling or data manipulation within a larger application.
  
   */

  function func418() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func419() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func420 is handleStatusCode
  /* renamed vars: local2=statusCode */
  function handleStatusCode(local0, local1) {
    let Error, Unreachable, code, local3, local4, loop0, reached, statusCode;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          switch (statusCode) {
                                            case 0: continue loop0;
                                            case 1: return;
                                            case 2: return;
                                            case 3: return;
                                            case 4: return;
                                            case 5: return;
                                            case 6: return;
                                            case 7: return;
                                            case 8: return;
                                            case 9: return;
                                            case 10: return;
                                            case 11: return;
                                            case 12: return;
                                            case 13: return;
                                            case 14: return;
                                            case 15: return;
                                            case 16: return;
                                            case 17: return;
                                            default: return;
                                          }
                                        }
                                        local3 = (local1 + 7);
                                        statusCode = (0x78 ? 0x11 : (local1 + 7));
                                        return;
                                      }
                                      local3 = (local1 + 3);
                                      statusCode = (0x78 ? 0x11 : (local1 + 3));
                                      return;
                                    }
                                    local3 = (local1 + 1);
                                    statusCode = (0x78 ? 0x11 : (local1 + 1));
                                    return;
                                  }
                                  local3 = (local1 + 2);
                                  statusCode = (0x78 ? 0x11 : (local1 + 2));
                                  return;
                                }
                                local4 = (local1 + 0xF);
                                statusCode = (0x78 ? 0x11 : (local1 + 0xF));
                                return;
                              }
                              statusCode = (0x78 ? 0x11 : local1);
                              return;
                            }
                            local4 = (local1 + 0xE);
                            statusCode = (0x78 ? 0x11 : (local1 + 0xE));
                            return;
                          }
                          return Pb(0);
                        }
                        local4 = (local1 + 0xD);
                        statusCode = (0x78 ? 0x11 : (local1 + 0xD));
                        return;
                      }
                      local3 = (local1 + 5);
                      statusCode = (0x78 ? 0x11 : (local1 + 5));
                      return;
                    }
                    local4 = (local1 + 0xC);
                    statusCode = (0x78 ? 0x11 : (local1 + 0xC));
                    return;
                  }
                  local3 = (local1 + 4);
                  statusCode = (0x78 ? 0x11 : (local1 + 4));
                  return;
                }
                local3 = (local1 + 8);
                statusCode = (0x78 ? 7 : (local1 + 8));
                return;
              }
              local3 = (local1 + 6);
              statusCode = (0x78 ? 0x11 : (local1 + 6));
              return;
            }
            local4 = (local1 + 9);
            statusCode = (0x78 ? 0x11 : (local1 + 9));
            return;
          }
          local4 = (local1 + 0xA);
          statusCode = (0x78 ? 0x11 : (local1 + 0xA));
          return;
        }
        local4 = (local1 + 0xB);
        statusCode = (0x78 ? 0x11 : (local1 + 0xB));
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function conditionally increments local1 by a value between 0 and 15 (or uses a hardcoded value 0x11 if 0x78 is truthy), assigning the result to statusCode, which then determines control flow for immediate returns based on its value, with a default return and a single call to Pb(0) for the 7th case. 
  
   */

  // func421 is Qb
  function Qb() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func422() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func423() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  // func424 is processArgOffset
  /* renamed vars: local1=argOffset, local2=returnCode, local3=temp0, local4=temp1, local5=temp2, local6=temp3 */
  function processArgOffset(local0) {
    let Error, Unreachable, argOffset, code, local7, loop0, reached, returnCode, temp0, temp1, temp2, temp3;
    returnCode = 5;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        switch (returnCode) {
                          case 0: continue loop0;
                          case 1: return;
                          case 2: return;
                          case 3: return;
                          case 4: return;
                          case 5: return;
                          case 6: return;
                          case 7: return;
                          case 8: return;
                          default: return;
                        }
                      }
                      temp0 = 8;
                      returnCode = 4;
                      return;
                    }
                    returnCode = ub(Pb(0x14), argOffset, 0xC);
                    global0 = (argOffset + 0x20);
                    return Pb(4);
                  }
                  throw new Error('Unreachable code reached');
                }
                temp0 = ub(returnCode, argOffset, 0x10);
                returnCode = 7;
                return;
              }
              handleResize((argOffset + 0x14));
              returnCode = (1 ? 3 : ub(1, argOffset, 8));
              return;
            }
            argOffset = (global0 - 0x20);
            global0 = (global0 - 0x20);
            temp1 = ub(4, local0, 0);
            temp0 = (ub(4, local0, 0) << 1);
            temp2 = (4 ? (ub(4, local0, 0) << 1) : temp0);
            local7 = ((4 ? (ub(4, local0, 0) << 1) : temp0) * 0x18n);
            returnCode = (0n ? 8 : (((4 ? (ub(4, local0, 0) << 1) : temp0) * 0x18n) >> 0x20n));
            return;
          }
          temp0 = 0;
          returnCode = (temp1 ? 0 : 4);
          return;
        }
        throw new Error('Unreachable code reached');
      }
      temp3 = local7;
      returnCode = (0x7FFFFFF8 ? 7 : local7);
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function retrieves and manipulates values from memory using bitwise operations and the `ub` helper function, ultimately returning a value derived from a calculated memory address. 
  
   */

  function func425() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  function func426() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, pop, select, stack, to, v1;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in select.v1 */
  }


  // func427 is processDataFlags
  /* renamed vars: local5=state, local6=data1, local7=data2, local8=heapPtr, local9=flag */
  function processDataFlags(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, data1, data2, f64, flag, heapPtr, local10, local11, local12, local13, local14, loop0, reached, state;
    state = 0x1B;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            switch (state) {
                                                                              case 0: continue loop0;
                                                                              case 1: return;
                                                                              case 2: return;
                                                                              case 3: return;
                                                                              case 4: return;
                                                                              case 5: return;
                                                                              case 6: return;
                                                                              case 7: return;
                                                                              case 8: return;
                                                                              case 9: return;
                                                                              case 10: return;
                                                                              case 11: return;
                                                                              case 12: return;
                                                                              case 13: return;
                                                                              case 14: return;
                                                                              case 15: return;
                                                                              case 16: return;
                                                                              case 17: return;
                                                                              case 18: return;
                                                                              case 19: return;
                                                                              case 20: return;
                                                                              case 21: return;
                                                                              case 22: return;
                                                                              case 23: return;
                                                                              case 24: return;
                                                                              case 25: return;
                                                                              case 26: return;
                                                                              case 27: return;
                                                                              case 28: return;
                                                                              case 29: return;
                                                                              case 30: return;
                                                                              case 31: return;
                                                                              case 32: return;
                                                                              case 33: return;
                                                                              case 34: return;
                                                                              default: return;
                                                                            }
                                                                          }
                                                                          func210(local1, (heapPtr + 4));
                                                                          state = 5;
                                                                          return;
                                                                        }
                                                                        if (f64(0)) {
                                                                        } else {
                                                                        }
                                                                        state = 0x14;
                                                                        return;
                                                                      }
                                                                      func210(local1, (heapPtr + 4));
                                                                      state = 5;
                                                                      return;
                                                                    }
                                                                    Gb((data1 + local12), 0);
                                                                    local11 = ((Pb(4) - 0x30) & 0xFF);
                                                                    if (0xA) {
                                                                    } else {
                                                                    }
                                                                    state = 0x16;
                                                                    return;
                                                                  }
                                                                  state = 3;
                                                                  return;
                                                                }
                                                                data1 = 1;
                                                                state = 0xF;
                                                                return;
                                                              }
                                                              state = 8;
                                                              return;
                                                            }
                                                            state = 1;
                                                            return;
                                                          }
                                                          local14 = wb(0);
                                                          if (0) {
                                                          } else {
                                                          }
                                                          state = 9;
                                                          return;
                                                        }
                                                        local13 = (local13 * local14);
                                                        if (f64(9218868437227405312)) {
                                                        } else {
                                                        }
                                                        state = 0x14;
                                                        return;
                                                      }
                                                      data1 = (data2 + 1);
                                                      local12 = ub(Pb(0x14), local1, 0xC);
                                                      Gb((ub(Pb(0x14), local1, 0xC) + data2), 0);
                                                      data2 = (((data2 + 1) - 0x30) & 0xFF);
                                                      if (0xA) {
                                                      } else {
                                                      }
                                                      state = 0x17;
                                                      return;
                                                    }
                                                    func210(local1, (heapPtr + 4));
                                                    data1 = Pb(4);
                                                    state = 0x1F;
                                                    return;
                                                  }
                                                  flag = 0;
                                                  state = 0x20;
                                                  return;
                                                }
                                                data1 = (data1 + 1);
                                                if (0xCCCCCCB) {
                                                } else {
                                                }
                                                state = 0x12;
                                                return;
                                              }
                                              flag = 1;
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        Gb((ub(0x11, local1, 0xC) + data2), 0);
                                                        switch ((data2 - 0x2B)) {
                                                          case 0: continue loop0;
                                                          case 1: return;
                                                          case 2: return;
                                                          default: return;
                                                        }
                                                      }
                                                      return;
                                                    }
                                                    return;
                                                  }
                                                  return;
                                                }
                                              }
                                              state = 0x21;
                                              return;
                                            }
                                            state = 0x1F;
                                            return;
                                          }
                                          if (0) {
                                          } else {
                                          }
                                          state = 0;
                                          return;
                                        }
                                        if (0xCCCCCCC) {
                                        } else {
                                        }
                                        state = 0x1C;
                                        return;
                                      }
                                      data2 = ((data2 * 0xA) + local11);
                                      if (local10) {
                                      } else {
                                      }
                                      state = 3;
                                      return;
                                    }
                                    if (7) {
                                    } else {
                                    }
                                    state = 0x1C;
                                    return;
                                  }
                                  Qb(data2, 0x13, data1, 0x18, local11, 0x12, local0, (local2 ? local13 : local13), 8);
                                  data1 = 0;
                                  state = 0xF;
                                  return;
                                }
                                local13 = (local13 / local14);
                                state = 0x14;
                                return;
                              }
                              if (flag) {
                              } else {
                              }
                              state = 0x19;
                              return;
                            }
                            if (local10) {
                            } else {
                            }
                            state = 0x16;
                            return;
                          }
                          state = 0x16;
                          return;
                        }
                        state = (local4 - data2);
                        data1 = ((local4 ^ state) ? data2 : 0);
                        state = 0x1D;
                        return;
                      }
                      local13 = (local13 / f64(9214871658872686752));
                      data1 = (data1 + 0x134);
                      state = ((data1 + 0x134) >> 0x1F);
                      data2 = ((state ^ data1) - state);
                      if (0x135) {
                      } else {
                      }
                      state = 1;
                      return;
                    }
                    heapPtr = (global0 - 0x10);
                    global0 = (global0 - 0x10);
                    flag = 1;
                    data1 = ub(local1, local1, 0x14);
                    data2 = (ub(local1, local1, 0x14) + 1);
                    local10 = ub(data2, local1, 0x10);
                    if (ub(data2, local1, 0x10)) {
                    } else {
                    }
                    state = 0x21;
                    return;
                  }
                  allocateAndCopy(local3, flag);
                  state = 0x1F;
                  return;
                }
                local13 = local3;
                state = (data1 >> 0x1F);
                data2 = (((data1 >> 0x1F) ^ data1) - state);
                if (0x135) {
                } else {
                }
                state = 8;
                return;
              }
              state = (local4 + data2);
              data1 = ((local4 ^ state) ? data2 : 0);
              state = 0x1D;
              return;
            }
            global0 = (heapPtr + 0x10);
            return state;
          }
          data2 = (data1 + 2);
          state = 0x21;
          return;
        }
        if (local10) {
        } else {
        }
        state = 0xB;
        return;
      }
      func210(local1, (heapPtr + 4));
      data1 = Pb(4);
      state = 0x1F;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that manipulates memory and performs bitwise operations based on conditional logic and external function calls, ultimately returning a value determined by the final state. 
  
   */

  function func428() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func429 is calculateAddressMask
  /* renamed vars: local2=calcAddress, local3=bitmaskOne */
  function calculateAddressMask(local0, local1) {
    let bitmaskOne, calcAddress, local4, local5;
    local0 = (local0 + local1);
    local1 = (((local0 + local1) >>> 0) / (0x140 >>> 0));
    calcAddress = (((local1 << 3) + local0) + 0x408);
    if (viewI32_0[(((local1 * 0x148) + 0x400)) / 4]) {
    } else {
    }
    local4 = viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8];
    local1 = (((local0 >>> 0) % (0x140 >>> 0)) - 0x138);
    if (0) {
      bitmaskOne = (0xFFFFFFFFFFFFFFFFn >> (local1 << 3n));
      local5 = ((0xFFFFFFFFFFFFFFFFn >> (local1 << 3n)) ^ 0xFFFFFFFFFFFFFFFFn);
      calcAddress = (calcAddress + 8);
      if (viewI32_0[(((calcAddress + 8) - local1)) / 4]) {
      } else {
      }
    } else {
    }
    return (local4 ^ viewI64_0[((((local0 >>> 0) % (0x60 >>> 0)) + 0x1B4)) / 8]);

  }

  /*
   * AI Summary: The function calculates a memory address based on two inputs, performs a conditional bitwise operation based on a third memory location, and returns the XOR of a value at a calculated memory address with itself, effectively returning zero.
  
   */

  function func430() {
    let Attempted, ERROR, FATAL, POP, an, drop, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in drop */
  }


  function func431() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func432() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func433 is callFromTable
  function callFromTable(local0, local1, local2, local3) {
    let Error, Unreachable, code, local4, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            switch (local4) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          if (local0) {
          } else {
          }
          local4 = 2;
          return;
        }
        table0[ub(local3, local1, 0x10)](1, local0, local2);
        return;
      }
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func433` conditionally calls a function pointer from a table, indexed by a computed memory address (using `ub`), with arguments based on its inputs, otherwise returning or continuing based on a local variable.
  
   */

  // func434 is processLocalVarsAndCall
  function processLocalVarsAndCall(local0, local1, local2, local3) {
    let Error, Ma, Unreachable, a, code, local4, local5, local6, local7, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    switch (local5) {
                      case 0: continue loop0;
                      case 1: return;
                      case 2: return;
                      case 3: return;
                      case 4: return;
                      case 5: return;
                      case 6: return;
                      default: return;
                    }
                  }
                  local4 = (global0 - 0x20);
                  global0 = (global0 - 0x20);
                  local1 = ub(local4, local1, 0);
                  func260(local2, Pb(0x18), (local4 + 8), (local4 + 0x18), (local4 + 0x1C));
                  local6 = ub(local4, local4, 0xC);
                  local7 = ub(Pb(0x1C), local4, 8);
                  if (0x84) {
                  } else {
                  }
                  local5 = 1;
                  return;
                }
                if (0x84) {
                } else {
                }
                local5 = 4;
                return;
              }
              global0 = (local4 + 0x20);
              return Pb(0);
            }
            imports['a']['Ma'](local2);
            local5 = 4;
            return;
          }
          local2 = (ub(local1, local1, 0) - 1);
          if (local2) {
          } else {
          }
          local5 = 6;
          return;
        }
        imports['a']['Ma'](local3);
        local2 = ub(2, local4, 0x18);
        local5 = 1;
        return;
      }
      checkLocalVarAndReturn(Pb(0), (local4 + 0x14));
      local5 = 2;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: `func434` manipulates memory and potentially returns values based on the result of computations involving memory reads (`ub`) and external function calls, ultimately setting a control flow variable (`local5`) influencing loop behavior and return paths. 
  
   */

  function func435(local0, local1, local2) {


  }


  function func436() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func437() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func438() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func439() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, local, pop, set, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in local.set */
  }


  // func440 is siphashRound
  function siphashRound(local0, local1, local2, local3, local4) {
    let Error, Unreachable, code, local5, local6, local7, local8, local9, loop0, reached, rotl64;

    local5 = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          switch (local5) {
                                                            case 0: continue loop0;
                                                            case 1: return;
                                                            case 2: return;
                                                            case 3: return;
                                                            case 4: return;
                                                            case 5: return;
                                                            case 6: return;
                                                            case 7: return;
                                                            case 8: return;
                                                            case 9: return;
                                                            case 10: return;
                                                            case 11: return;
                                                            case 12: return;
                                                            case 13: return;
                                                            case 14: return;
                                                            case 15: return;
                                                            case 16: return;
                                                            case 17: return;
                                                            case 18: return;
                                                            case 19: return;
                                                            case 20: return;
                                                            case 21: return;
                                                            case 22: return;
                                                            case 23: return;
                                                            case 24: return;
                                                            case 25: return;
                                                            default: return;
                                                          }
                                                        }
                                                        local0 = (local0 + 0x27D4EB2F165667C5n);
                                                        local5 = 0xD;
                                                        return;
                                                      }
                                                      if (1) {
                                                      } else {
                                                      }
                                                      local5 = 0x11;
                                                      return;
                                                    }
                                                    local2 = (local3 + local6);
                                                    local5 = 5;
                                                    return;
                                                  }
                                                  local2 = local3;
                                                  local5 = 9;
                                                  return;
                                                }
                                                local5 = 0x17;
                                                return;
                                              }
                                              Gb((local4 + 1), 0);
                                              Gb(local4, 0);
                                              local1 = (rotl64((local3 ^ (rotl64((8714886028937673522n ^ local1), 0xBn) * 0x9E3779B185EBCA87n)), 0xBn) * 0x9E3779B185EBCA87n);
                                              local4 = (local4 + 2);
                                              if ((local4 + 2)) {
                                              } else {
                                              }
                                              local5 = 5;
                                              return;
                                            }
                                            local5 = 0x11;
                                            return;
                                          }
                                          if (0x20n) {
                                          } else {
                                          }
                                          local5 = 0;
                                          return;
                                        }
                                        local3 = local4;
                                        local6 = local2;
                                        local5 = 0x12;
                                        return;
                                      }
                                      if (4) {
                                      } else {
                                      }
                                      local5 = 8;
                                      return;
                                    }
                                    local1 = ((rotl64(((ub(0x16, local2, 0) * 0x9E3779B185EBCA87n) ^ local1), 0x17n) * 0xC2B2AE3D27D4EB4Fn) + 0x165667B19E3779F9n);
                                    local6 = (local2 + 4);
                                    local2 = (local2 + 4);
                                    local4 = local3;
                                    local5 = 0x17;
                                    return;
                                  }
                                  local1 = ((rotl64(((rotl64((wb(0) * 0xC2B2AE3D27D4EB4Fn), 0x1Fn) * 0x9E3779B185EBCA87n) ^ local1), 0x1Bn) * 0x9E3779B185EBCA87n) - 0x7A1435883D4D519Dn);
                                  local2 = (local3 + 8);
                                  local3 = (local3 + 8);
                                  local4 = (local4 - 8);
                                  if (7) {
                                  } else {
                                  }
                                  local5 = 0xB;
                                  return;
                                }
                                local1 = ((rotl64(((local4 - 8) ^ ((rotl64(((ub((ub(0x13, (local2 + 4), 0) * 0x9E3779B185EBCA87n), local2, 0) * 0x9E3779B185EBCA87n) ^ local1), 0x17n) * 0xC2B2AE3D27D4EB4Fn) + 0x165667B19E3779F9n)), 0x17n) * 0xC2B2AE3D27D4EB4Fn) + 0x165667B19E3779F9n);
                                local2 = (local2 + 8);
                                local4 = (local4 - 8);
                                if (3) {
                                } else {
                                }
                                local5 = 0xC;
                                return;
                              }
                              local1 = (local0 + local1);
                              if (8) {
                              } else {
                              }
                              local5 = 0xE;
                              return;
                            }
                            local5 = 0xB;
                            return;
                          }
                          local5 = 8;
                          return;
                        }
                        local4 = (local6 + 1);
                        Gb(local6, 0);
                        local1 = (rotl64((8610532350037800783n ^ local1), 0xBn) * 0x9E3779B185EBCA87n);
                        local5 = 1;
                        return;
                      }
                      local0 = (((local1 >> 0x21n) ^ local1) * 0xC2B2AE3D27D4EB4Fn);
                      local0 = (((((local1 >> 0x21n) ^ local1) * 0xC2B2AE3D27D4EB4Fn) ^ (local0 >> 0x1Dn)) * 0x165667B19E3779F9n);
                      return ((((((local1 >> 0x21n) ^ local1) * 0xC2B2AE3D27D4EB4Fn) ^ (local0 >> 0x1Dn)) * 0x165667B19E3779F9n) ^ (local0 >> 0x20n));
                    }
                    if (local3) {
                    } else {
                    }
                    local5 = 0x11;
                    return;
                  }
                  local5 = 9;
                  return;
                }
                if ((local3 & 1)) {
                } else {
                }
                local5 = 0x15;
                return;
              }
              local4 = local6;
              local5 = 1;
              return;
            }
            local3 = (local4 - 4);
            if (((local4 - 4) & 4)) {
            } else {
            }
            local5 = 0xA;
            return;
          }
          if (4) {
          } else {
          }
          local5 = 0x12;
          return;
        }
        local5 = 0xC;
        return;
      }
      local0 = wb(8);
      local7 = wb(0);
      local8 = wb(0x10);
      local9 = wb(0x18);
      local0 = (((((((((((((local2 + rotl64(wb(0x18), 0x12n)) ^ (rotl64((local7 * 0xC2B2AE3D27D4EB4Fn), 0x1Fn) * 0x9E3779B185EBCA87n)) * 0x9E3779B185EBCA87n) - 0x7A1435883D4D519Dn) ^ (rotl64((local0 * 0xC2B2AE3D27D4EB4Fn), 0x1Fn) * 0x9E3779B185EBCA87n)) * 0x9E3779B185EBCA87n) - 0x7A1435883D4D519Dn) ^ (rotl64((local8 * 0xC2B2AE3D27D4EB4Fn), 0x1Fn) * 0x9E3779B185EBCA87n)) * 0x9E3779B185EBCA87n) - 0x7A1435883D4D519Dn) ^ (rotl64((local9 * 0xC2B2AE3D27D4EB4Fn), 0x1Fn) * 0x9E3779B185EBCA87n)) * 0x9E3779B185EBCA87n) - 0x7A1435883D4D519Dn);
      local5 = 0xD;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return (local2 + rotl64(wb(0x10), 0xCn));

  }

  /*
   * AI Summary: The function `func440` performs a series of bitwise operations, rotations, and memory reads/writes based on conditional logic, ultimately computing and returning a 64-bit hash value. 
  
   */

  function func441() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func442() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func443 is checkFileAndExit
  /* renamed vars: local2=exitStatus, local3=unusedVar */
  function checkFileAndExit(local0, local1) {
    let Da, Error, Ma, Unreachable, a, c, code, exitStatus, lb, local4, local5, loop0, reached, unusedVar;
    exitStatus = 2;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          switch (exitStatus) {
                            case 0: continue loop0;
                            case 1: return;
                            case 2: return;
                            case 3: return;
                            case 4: return;
                            case 5: return;
                            case 6: return;
                            case 7: return;
                            case 8: return;
                            case 9: return;
                            default: return;
                          }
                        }
                        unusedVar = 2;
                        exitStatus = 3;
                        return;
                      }
                      return Pb(0);
                    }
                    Gb(local1, 4);
                    if (unusedVar) {
                    } else {
                    }
                    exitStatus = 6;
                    return;
                  }
                  if (0x84) {
                  } else {
                  }
                  exitStatus = 1;
                  return;
                }
                imports['a']['Ma'](local4);
                exitStatus = 1;
                return;
              }
              unusedVar = 0;
              local5 = imports['a']['lb'](local4);
              exitStatus = 3;
              return;
            }
            local4 = imports['a']['c'](ub(4, local1, 0));
            local5 = ub(local4, 0, 0x10FCB4);
            Qb(sb(local1, 1, 4), local0, local5, Pb(4), local0, ub(9, 0, 0x10FCB0), 0, 0n, 0x10FCB0);
            unusedVar = 1;
            if (1) {
            } else {
            }
            exitStatus = 7;
            return;
          }
          if (imports['a']['Da'](local4)) {
          } else {
          }
          exitStatus = 5;
          return;
        }
        exitStatus = 1;
        return;
      }
      unusedVar = 2;
      exitStatus = 1;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function performs conditional operations based on a status variable, ultimately returning without any meaningful side effects due to unreachable code after the initial return. 
  
   */

  function func444() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func445() {
    let Attempted, ERROR, FATAL, POP, an, empty, from, local, pop, set, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in local.set */
  }


  // func446 is processBaseAddrOffset
  /* renamed vars: local1=state, local2=baseAddr, local3=offset, local4=shift, local5=hasValue, local6=size, local7=dataAddr, local8=dataType */
  function processBaseAddrOffset(local0) {
    let Error, Unreachable, baseAddr, code, dataAddr, dataType, hasValue, local9, loop0, offset, reached, shift, size, state;
    state = 6;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    switch (state) {
                                                      case 0: continue loop0;
                                                      case 1: return;
                                                      case 2: return;
                                                      case 3: return;
                                                      case 4: return;
                                                      case 5: return;
                                                      case 6: return;
                                                      case 7: return;
                                                      case 8: return;
                                                      case 9: return;
                                                      case 10: return;
                                                      case 11: return;
                                                      case 12: return;
                                                      case 13: return;
                                                      case 14: return;
                                                      case 15: return;
                                                      case 16: return;
                                                      case 17: return;
                                                      case 18: return;
                                                      case 19: return;
                                                      case 20: return;
                                                      case 21: return;
                                                      case 22: return;
                                                      default: return;
                                                    }
                                                  }
                                                  offset = (offset + 1);
                                                  if (hasValue) {
                                                  } else {
                                                  }
                                                  state = 0xC;
                                                  return;
                                                }
                                                if (((1 << shift) & 0x800013)) {
                                                } else {
                                                }
                                                state = 8;
                                                return;
                                              }
                                              if (shift) {
                                              } else {
                                              }
                                              state = 0x14;
                                              return;
                                            }
                                            size = ub(0x11, dataAddr, 0);
                                            state = 0xC;
                                            return;
                                          }
                                          offset = (offset + 1);
                                          dataAddr = (local0 + 0xC);
                                          if (hasValue) {
                                          } else {
                                          }
                                          state = 0xE;
                                          return;
                                        }
                                        local9 = 0n;
                                        state = 8;
                                        return;
                                      }
                                      baseAddr = (global0 - 0x30);
                                      global0 = (global0 - 0x30);
                                      offset = ub(3, local0, 0x14);
                                      hasValue = ub(ub(3, local0, 0x14), local0, 0x10);
                                      if (ub(ub(3, local0, 0x14), local0, 0x10)) {
                                      } else {
                                      }
                                      state = 0x11;
                                      return;
                                    }
                                    if (0x2C) {
                                    } else {
                                    }
                                    state = 4;
                                    return;
                                  }
                                  if (0x5D0100n) {
                                  } else {
                                  }
                                  state = 0xF;
                                  return;
                                }
                                offset = hasValue;
                                state = 2;
                                return;
                              }
                              offset = 0;
                              state = 0x13;
                              return;
                            }
                            if (((1 << shift) & 0x800013)) {
                            } else {
                            }
                            state = 0x12;
                            return;
                          }
                          local9 = 0x100n;
                          Gb((offset + size), 0);
                          dataType = 0xD;
                          shift = 4;
                          if (0x17) {
                          } else {
                          }
                          state = 8;
                          return;
                        }
                        shift = 1;
                        offset = (offset + 1);
                        if (hasValue) {
                        } else {
                        }
                        state = 0x15;
                        return;
                      }
                      offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 0x18), baseAddr, 0x1C));
                      state = 0x13;
                      return;
                    }
                    offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 0x10), baseAddr, 0x14));
                    state = 0x13;
                    return;
                  }
                  dataType = ub(calculateOffset(dataAddr), local0, 0xC);
                  state = 0x15;
                  return;
                }
                offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 0), baseAddr, 4));
                state = 0x13;
                return;
              }
              shift = 0;
              state = 2;
              return;
            }
            global0 = (baseAddr + 0x30);
            return offset;
          }
          if (0x5D) {
          } else {
          }
          state = 0xA;
          return;
        }
        Gb((offset + dataType), 0);
        size = 7;
        shift = -2;
        if (0x17) {
        } else {
        }
        state = 0x12;
        return;
      }
      offset = func145(ub(ub((baseAddr + 0x24), baseAddr, 8), baseAddr, 0xC));
      state = 0x13;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return calculateOffset((local0 + 0xC));

  }

  /*
   * AI Summary: The function simulates a state machine, primarily using hardcoded return statements, mimicking data processing (likely decompression-related) involving memory address calculations and bitwise operations, but ultimately returning without producing meaningful output within the provided context. 
  
   */

  function func447() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func448 is checkAndAlloc
  /* renamed vars: state=local2 */
  function checkAndAlloc(local0, local1) {
    let Error, Unreachable, a, code, l, local2, local3, local4, loop0, reached;
    local2 = 2;
    loop0: while (true) {
      {
        {
          {
            {
              switch (local2) {
                case 0: continue loop0;
                case 1: return;
                case 2: return;
                case 3: return;
                default: return;
              }
            }
            return Pb(0);
          }
          local4 = 0;
          local2 = 0;
          return;
        }
        local3 = ub(local4, local1, 4);
        if (local3) {
        } else {
        }
        local2 = 3;
        return;
      }
      local4 = 1;
      local1 = imports['a']['l'](ub((local3 + 1), ub(Pb(4), local1, 0), 0), local3);
      local2 = 0;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function conditionally executes a memory-based computation using `ub` four times, potentially modifying memory via `imports['a']['l']`, before returning a value or exiting.
  
   */

  // func449 is copyData
  /* renamed vars: local3=src, local4=state, local5=tmp */
  function copyData(local0, local1, local2) {
    let Error, Unreachable, code, local6, local7, local8, loop0, reached, src, state, tmp;
    state = 0x16;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          switch (state) {
                                                            case 0: continue loop0;
                                                            case 1: return;
                                                            case 2: return;
                                                            case 3: return;
                                                            case 4: return;
                                                            case 5: return;
                                                            case 6: return;
                                                            case 7: return;
                                                            case 8: return;
                                                            case 9: return;
                                                            case 10: return;
                                                            case 11: return;
                                                            case 12: return;
                                                            case 13: return;
                                                            case 14: return;
                                                            case 15: return;
                                                            case 16: return;
                                                            case 17: return;
                                                            case 18: return;
                                                            case 19: return;
                                                            case 20: return;
                                                            case 21: return;
                                                            case 22: return;
                                                            case 23: return;
                                                            case 24: return;
                                                            case 25: return;
                                                            default: return;
                                                          }
                                                        }
                                                        local8 = (local6 - 1);
                                                        src = local0;
                                                        if (local6) {
                                                        } else {
                                                        }
                                                        state = 1;
                                                        return;
                                                      }
                                                      if (7) {
                                                      } else {
                                                      }
                                                      state = 0xA;
                                                      return;
                                                    }
                                                    local6 = ((0 - local0) & 3);
                                                    tmp = (((0 - local0) & 3) + local0);
                                                    if ((((0 - local0) & 3) + local0)) {
                                                    } else {
                                                    }
                                                    state = 0xA;
                                                    return;
                                                  }
                                                  src = (src + 1);
                                                  local7 = (local7 - 1);
                                                  if ((local7 - 1)) {
                                                  } else {
                                                  }
                                                  state = 0xD;
                                                  return;
                                                }
                                                state = 0x15;
                                                return;
                                              }
                                              local7 = (local2 + src);
                                              if ((local2 + src)) {
                                              } else {
                                              }
                                              state = 0x15;
                                              return;
                                            }
                                            src = (src + 8);
                                            if (local7) {
                                            } else {
                                            }
                                            state = 6;
                                            return;
                                          }
                                          local7 = local6;
                                          src = local0;
                                          state = 3;
                                          return;
                                        }
                                        local6 = (local2 - 1);
                                        tmp = (local2 & 7);
                                        if ((local2 & 7)) {
                                        } else {
                                        }
                                        state = 0x14;
                                        return;
                                      }
                                      src = local0;
                                      state = 5;
                                      return;
                                    }
                                    local2 = (local2 - local6);
                                    src = (tmp + ((local2 - local6) & 0xFFFFFFFC));
                                    if (tmp) {
                                    } else {
                                    }
                                    state = 0x13;
                                    return;
                                  }
                                  local7 = ((local1 & 0xFF) * 0x1010101);
                                  state = 0x10;
                                  return;
                                }
                                state = 0x13;
                                return;
                              }
                              state = 1;
                              return;
                            }
                            state = 0xA;
                            return;
                          }
                          state = 0x11;
                          return;
                        }
                        tmp = (tmp + 4);
                        if ((tmp + 4)) {
                        } else {
                        }
                        state = 0x10;
                        return;
                      }
                      src = (src + 1);
                      tmp = (tmp - 1);
                      if ((tmp - 1)) {
                      } else {
                      }
                      state = 0x18;
                      return;
                    }
                    state = 6;
                    return;
                  }
                  local2 = (local2 & 3);
                  state = 5;
                  return;
                }
                if (7) {
                } else {
                }
                state = 0x15;
                return;
              }
              return local0;
            }
            if (0x10) {
            } else {
            }
            state = 2;
            return;
          }
          src = (src + 8);
          if (tmp) {
          } else {
          }
          state = 0x17;
          return;
        }
        state = 0x14;
        return;
      }
      state = 0x17;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 0xE;

  }

  /*
   * AI Summary: The function simulates a state machine, primarily branching based on input values, but ultimately always returns without performing meaningful computation. 
  
   */

  // func450 is callFromTableWithArgs
  function callFromTableWithArgs(local0, local1, local2, local3, local4, local5) {
    let Error, Unreachable, code, local6, loop0, reached;

    loop0: while (true) {
      {
        {
          {
            switch (local6) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          if (local0) {
          } else {
          }
          local6 = 2;
          return;
        }
        return table0[ub(local5, local1, 0x10)](1, local0, local2, local3, local4);
      }
    }
    throw new Error('Unreachable code reached');
    return func217();

  }

  /*
   * AI Summary: `func450` conditionally executes a function from a table based on the result of `ub`, using provided arguments, or returns early based on a switch condition. 
  
   */

  // func451 is allocateAndInitMemory
  /* renamed vars: local2=memoryAddr */
  function allocateAndInitMemory(local0, local1) {
    let local3, local4, loop0;
    local3 = 1;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    switch (local3) {
                      case 0: continue loop0;
                      case 1: return;
                      case 2: return;
                      case 3: return;
                      case 4: return;
                      case 5: return;
                      case 6: return;
                      default: return;
                    }
                  }
                  local4 = 0;
                  local3 = 6;
                  return;
                }
                memoryAddr = (global0 - 0x30);
                global0 = (global0 - 0x30);
                if (0x7FF0000000000000n) {
                } else {
                }
                local3 = 3;
                return;
              }
              Gb(memoryAddr, 0xC);
              if (4) {
              } else {
              }
              local3 = 5;
              return;
            }
            local4 = 1;
            Qb(memoryAddr, 1, Pb(0x14), memoryAddr, 0x10B838, Pb(0x10), memoryAddr, 1n, 0x1C);
            Qb((wb(0) & 0x7FFFFFFFFFFFFFFFn), 0, sb(memoryAddr, 0, 0xC), memoryAddr, local1, Pb(8), memoryAddr, (local0 | 0x5900000000n), 0x28);
            if (func218((memoryAddr + 0x10))) {
            } else {
            }
            local3 = 2;
            return;
          }
          Qb(memoryAddr, 1, Pb(0x14), memoryAddr, 0x10B838, Pb(0x10), memoryAddr, 1n, 0x1C);
          Qb(memoryAddr, (memoryAddr + 0x28), Pb(0x18), (memoryAddr + 8), 0x10B714, 6, memoryAddr, (local0 | 0x5900000000n), 0x28);
          local4 = func218((memoryAddr + 0x10));
          local3 = 6;
          return;
        }
        func438(2);
        if (0x10B840) {
        } else {
        }
        local3 = 0;
        return;
      }
      global0 = (memoryAddr + 0x30);
    }
    return local4;

  }

  /*
   * AI Summary: The function `func451` initializes and potentially modifies memory at a dynamically calculated address based on a global variable, utilizing helper functions for memory access, manipulation, and conditional execution, eventually returning a boolean-like value. 
  
   */

  function func452(local0, local1) {

    func438(9);
    return 0x10B72C;

  }


  function func453() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func454() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func455() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func456 is initializeAndCopy
  function initializeAndCopy(local0, local1, local2, local3) {
    let Error, Unreachable, code, local4, local5, local6, loop0, reached;

    local5 = 4;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    switch (local5) {
                      case 0: continue loop0;
                      case 1: return;
                      case 2: return;
                      case 3: return;
                      case 4: return;
                      case 5: return;
                      case 6: return;
                      default: return;
                    }
                  }
                  Qb(local1, Pb(4), local0, 0x80000000, Pb(0), local4, local0, wb(4), 0x20);
                  Gb(local3, 0);
                  local2 = local4;
                  func257((local0 + 0xC), (local4 + 0x1C), (local4 + 0x28));
                  Gb(local4, 0);
                  local5 = (6 ? 5 : 3);
                  return;
                }
                func458(local2);
                local1 = local1;
                local6 = ub(0, local0, 0);
                local5 = (0x80000000 ? 6 : (ub(0, local0, 0) | 0x80000000));
                return;
              }
              throw new Error('Unreachable code reached');
            }
            global0 = (local4 - 0xFFFFFFC0);
            return 0;
          }
          local4 = (global0 + 0xFFFFFFC0);
          global0 = (global0 + 0xFFFFFFC0);
          Gb(0, 0x10FC88);
          local6 = func213(2, local2, 1);
          local5 = (func213(2, local2, 1) ? local4 : 1);
          return;
        }
        local5 = 3;
        return;
      }
      func279(ub(func188(local4), local0, 4), local6);
      local5 = 0;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return sb(local2, 2, 0x28);

  }

  /*
   * AI Summary: The function simulates a state machine with various return paths, primarily determined by manipulating and checking memory values via bitwise operations and helper functions. 
  
   */

  function func457() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func458() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  function func459() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func460 is dispatchCall
  function dispatchCall(local0, local1) {
    let Error, Unreachable, code, local2, loop0, reached;

    local2 = 2;
    loop0: while (true) {
      {
        {
          {
            switch (local2) {
              case 0: continue loop0;
              case 1: return;
              case 2: return;
              default: return;
            }
          }
          return func243(4);
        }
        return func243(5);
      }
      Gb(local0, 0);
      if (0x10C769) {
      } else {
      }
      local2 = 1;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return 0;

  }

  /*
   * AI Summary: The function `func460` effectively performs a no-op, potentially with a side effect of calling `Gb` once, and always returns without any specific value. 
  
   */

  function func461() {
    let Attempted, ERROR, FATAL, POP, UnstackArgs, an, empty, from, pop, stack, to;
    /* ERROR: FATAL POP: Attempted to pop from an empty stack in UnstackArgs */
  }


  // func462 is processMemoryChunks
  /* renamed vars: local2=state, local3=memAddr, local4=size, local5=bytesLeft, local6=count, local7=temp, local8=size2, local9=size3 */
  function processMemoryChunks(local0, local1) {
    let Error, Unreachable, bytesLeft, code, count, local10, local11, loop0, memAddr, reached, size, size2, size3, state, temp;
    state = 0x15;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              switch (state) {
                                                                                case 0: continue loop0;
                                                                                case 1: return;
                                                                                case 2: return;
                                                                                case 3: return;
                                                                                case 4: return;
                                                                                case 5: return;
                                                                                case 6: return;
                                                                                case 7: return;
                                                                                case 8: return;
                                                                                case 9: return;
                                                                                case 10: return;
                                                                                case 11: return;
                                                                                case 12: return;
                                                                                case 13: return;
                                                                                case 14: return;
                                                                                case 15: return;
                                                                                case 16: return;
                                                                                case 17: return;
                                                                                case 18: return;
                                                                                case 19: return;
                                                                                case 20: return;
                                                                                case 21: return;
                                                                                case 22: return;
                                                                                case 23: return;
                                                                                case 24: return;
                                                                                case 25: return;
                                                                                case 26: return;
                                                                                case 27: return;
                                                                                case 28: return;
                                                                                case 29: return;
                                                                                case 30: return;
                                                                                case 31: return;
                                                                                case 32: return;
                                                                                case 33: return;
                                                                                case 34: return;
                                                                                case 35: return;
                                                                                default: return;
                                                                              }
                                                                            }
                                                                            if (3) {
                                                                            } else {
                                                                            }
                                                                            state = 8;
                                                                            return;
                                                                          }
                                                                          state = 5;
                                                                          return;
                                                                        }
                                                                        memAddr = ub(0x19, local1, 0);
                                                                        count = 1;
                                                                        size3 = (size + 1);
                                                                        Gb((memAddr + size), 0);
                                                                        Gb((Pb(8) + 0x107E40), 0);
                                                                        local10 = (size + 1);
                                                                        if (0xFF) {
                                                                        } else {
                                                                        }
                                                                        state = 0x13;
                                                                        return;
                                                                      }
                                                                      temp = size;
                                                                      state = 7;
                                                                      return;
                                                                    }
                                                                    if (bytesLeft) {
                                                                    } else {
                                                                    }
                                                                    state = 8;
                                                                    return;
                                                                  }
                                                                  Gb(memAddr, 0);
                                                                  bytesLeft = 0xA;
                                                                  count = (0xA ? 0 : (count + 1));
                                                                  memAddr = (memAddr + 1);
                                                                  size = (size + bytesLeft);
                                                                  local1 = (local1 - 1);
                                                                  if ((local1 - 1)) {
                                                                  } else {
                                                                  }
                                                                  state = 0x21;
                                                                  return;
                                                                }
                                                                size = 0;
                                                                state = 0xD;
                                                                return;
                                                              }
                                                              local1 = (temp & 3);
                                                              if (3) {
                                                              } else {
                                                              }
                                                              state = 0x16;
                                                              return;
                                                            }
                                                            throw new Error('Unreachable code reached');
                                                          }
                                                          memAddr = ub(6, local1, 0);
                                                          local1 = (bytesLeft & 3);
                                                          if (4) {
                                                          } else {
                                                          }
                                                          state = 0x1D;
                                                          return;
                                                        }
                                                        size = (size + 3);
                                                        Gb((memAddr + size2), 0);
                                                        Gb((Pb(8) + 0x107E40), 0);
                                                        size2 = (size + 3);
                                                        if (0xFF) {
                                                        } else {
                                                        }
                                                        state = 0;
                                                        return;
                                                      }
                                                      temp = size2;
                                                      state = 7;
                                                      return;
                                                    }
                                                    size2 = (size + 2);
                                                    Gb((memAddr + size3), 0);
                                                    Gb((Pb(8) + 0x107E40), 0);
                                                    size3 = (size + 2);
                                                    if (0xFF) {
                                                    } else {
                                                    }
                                                    state = 0x1A;
                                                    return;
                                                  }
                                                  if (local1) {
                                                  } else {
                                                  }
                                                  state = 0x1B;
                                                  return;
                                                }
                                                count = 0;
                                                size = 1;
                                                if (bytesLeft) {
                                                } else {
                                                }
                                                state = 0x1E;
                                                return;
                                              }
                                              Gb(memAddr, 0);
                                              bytesLeft = 0xA;
                                              size = (0xA ? 0 : (size + 1));
                                              memAddr = (memAddr + 1);
                                              count = (bytesLeft + count);
                                              local1 = (local1 - 1);
                                              if ((local1 - 1)) {
                                              } else {
                                              }
                                              state = 0x18;
                                              return;
                                            }
                                            state = 0x20;
                                            return;
                                          }
                                          if (local1) {
                                          } else {
                                          }
                                          state = 0x1E;
                                          return;
                                        }
                                        state = 0xD;
                                        return;
                                      }
                                      size2 = (bytesLeft - size);
                                      bytesLeft = (size2 ? 0 : bytesLeft);
                                      if (1) {
                                      } else {
                                      }
                                      state = 8;
                                      return;
                                    }
                                    temp = size3;
                                    state = 7;
                                    return;
                                  }
                                  local11 = (global0 - 0x10);
                                  global0 = (global0 - 0x10);
                                  size = ub(0xC, local1, 8);
                                  temp = (ub(0xC, local1, 8) + 4);
                                  bytesLeft = ub((ub(0xC, local1, 8) + 4), local1, 4);
                                  if (ub((ub(0xC, local1, 8) + 4), local1, 4)) {
                                  } else {
                                  }
                                  state = 0xE;
                                  return;
                                }
                                bytesLeft = (temp & 0xFFFFFFFC);
                                count = 1;
                                size = 0;
                                state = 0x22;
                                return;
                              }
                              count = 0;
                              size = 1;
                              state = 0x11;
                              return;
                            }
                            state = 0x1B;
                            return;
                          }
                          Gb((memAddr + size), 0);
                          Gb((Pb(8) + 0x107E40), 0);
                          size = temp;
                          if (0xFF) {
                          } else {
                          }
                          state = 7;
                          return;
                        }
                        if (2) {
                        } else {
                        }
                        state = 8;
                        return;
                      }
                      memAddr = func145(size);
                      state = 0x20;
                      return;
                    }
                    Gb(memAddr, 0);
                    temp = 0xA;
                    Gb((memAddr + 1), 0);
                    size3 = 0xA;
                    Gb((memAddr + 2), 0);
                    size2 = 0xA;
                    Gb((memAddr + 3), 0);
                    local10 = 0xA;
                    count = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (count + 4)))));
                    size = ((((size + temp) + size3) + size2) + local10);
                    memAddr = (memAddr + 4);
                    bytesLeft = (bytesLeft - 4);
                    if ((bytesLeft - 4)) {
                    } else {
                    }
                    state = 0x23;
                    return;
                  }
                  bytesLeft = (bytesLeft & 0xFFFFFFFC);
                  size = 1;
                  count = 0;
                  state = 0x1C;
                  return;
                }
                memAddr = func145(count);
                state = 0x20;
                return;
              }
              state = 0xF;
              return;
            }
            global0 = (local11 + 0x10);
            return Pb(4);
          }
          state = 0x1E;
          return;
        }
        Gb(memAddr, 0);
        temp = 0xA;
        Gb((memAddr + 1), 0);
        size3 = 0xA;
        Gb((memAddr + 2), 0);
        size2 = 0xA;
        Gb((memAddr + 3), 0);
        local10 = 0xA;
        size = (0xA ? 0 : (0xA ? 1 : (0xA ? 2 : (0xA ? 3 : (size + 4)))));
        count = ((((count + temp) + size3) + size2) + local10);
        memAddr = (memAddr + 4);
        bytesLeft = (bytesLeft - 4);
        if ((bytesLeft - 4)) {
        } else {
        }
        state = 0x12;
        return;
      }
      state = 0x11;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine that reads data from memory in chunks, processes it using bitwise operations and calls external functions (Gb, ub, func145, Pb), and then returns a value.
  
   */

  // func463 is checkByteOffset
  /* renamed vars: local1=byteOffset, local2=stateVar, local3=tempVar1, local4=tempVar2, local5=memAddress */
  function checkByteOffset(local0) {
    let Error, Unreachable, byteOffset, code, local6, loop0, memAddress, reached, stateVar, tempVar1, tempVar2;
    stateVar = 7;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        switch (stateVar) {
                          case 0: continue loop0;
                          case 1: return;
                          case 2: return;
                          case 3: return;
                          case 4: return;
                          case 5: return;
                          case 6: return;
                          case 7: return;
                          case 8: return;
                          default: return;
                        }
                      }
                      byteOffset = (byteOffset + 1);
                      if (tempVar1) {
                      } else {
                      }
                      stateVar = 6;
                      return;
                    }
                    stateVar = 3;
                    return;
                  }
                  if ((tempVar1 + (byteOffset ^ 0xFFFFFFFF))) {
                  } else {
                  }
                  stateVar = 3;
                  return;
                }
                return (byteOffset & 1);
              }
              tempVar1 = (ub(5, memAddress, 4) >>> 0x15);
              if (tempVar2) {
              } else {
              }
              stateVar = 2;
              return;
            }
            tempVar2 = (local0 - local6);
            tempVar1 = (tempVar1 - 1);
            local0 = 0;
            stateVar = 6;
            return;
          }
          Gb((byteOffset + 0x10BC15), 0);
          local0 = (8 + local0);
          if (tempVar2) {
          } else {
          }
          stateVar = 3;
          return;
        }
        local6 = 0;
        stateVar = (0x10780 ? 0 : local0);
        byteOffset = ((0x10780 ? 0 : local0) + 5);
        stateVar = (local0 << 0xB);
        tempVar1 = ((ub((local0 << 0xB), ((byteOffset << 2) + 0x10CEB0), 0) << 0xB) ? stateVar : byteOffset);
        byteOffset = (((ub((local0 << 0xB), ((byteOffset << 2) + 0x10CEB0), 0) << 0xB) ? stateVar : byteOffset) + 3);
        tempVar1 = (stateVar ? tempVar1 : (ub(byteOffset, ((byteOffset << 2) + 0x10CEB0), 0) << 0xB));
        byteOffset = ((stateVar ? tempVar1 : (ub(byteOffset, ((byteOffset << 2) + 0x10CEB0), 0) << 0xB)) + 1);
        tempVar1 = (stateVar ? tempVar1 : (ub(byteOffset, ((byteOffset << 2) + 0x10CEB0), 0) << 0xB));
        byteOffset = ((stateVar ? tempVar1 : (ub(byteOffset, ((byteOffset << 2) + 0x10CEB0), 0) << 0xB)) + 1);
        tempVar1 = (stateVar ? tempVar1 : (ub(byteOffset, ((byteOffset << 2) + 0x10CEB0), 0) << 0xB));
        byteOffset = (ub(0xB, (((stateVar ? tempVar1 : (ub(byteOffset, ((byteOffset << 2) + 0x10CEB0), 0) << 0xB)) << 2) + 0x10CEB0), 0) << 0xB);
        tempVar2 = ((byteOffset + stateVar) + tempVar1);
        memAddress = ((((byteOffset + stateVar) + tempVar1) << 2) + 0x10CEB0);
        byteOffset = (ub(stateVar, ((((byteOffset + stateVar) + tempVar1) << 2) + 0x10CEB0), 0) >>> 0x15);
        tempVar1 = 0x13F;
        if (0x14) {
        } else {
        }
        stateVar = 8;
        return;
      }
      local6 = (ub(4, (memAddress - 4), 0) & 0x1FFFFF);
      stateVar = 2;
      continue loop0;
    }
    throw new Error('Unreachable code reached');
    return tempVar2;

  }

  /*
   * AI Summary: The function performs a series of bitwise operations and memory reads using the `ub` and `Gb` helper functions, ultimately returning a value derived from a calculated memory address. 
  
   */

  function func464(local0, local1) {


  }


  // func465 is handleMemoryValue
  /* renamed vars: local1=memAddr, local2=returnCode, local3=tempValue, local4=memValue, local5=tempFlag */
  function handleMemoryValue(local0) {
    let Error, Unreachable, code, local6, loop0, memAddr, memValue, reached, returnCode, tempFlag, tempValue;
    returnCode = 0x14;
    loop0: while (true) {
      {
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          {
                            {
                              {
                                {
                                  {
                                    {
                                      {
                                        {
                                          {
                                            {
                                              {
                                                {
                                                  {
                                                    {
                                                      {
                                                        {
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  {
                                                                    {
                                                                      {
                                                                        {
                                                                          {
                                                                            {
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      switch (returnCode) {
                                                                                        case 0: continue loop0;
                                                                                        case 1: return;
                                                                                        case 2: return;
                                                                                        case 3: return;
                                                                                        case 4: return;
                                                                                        case 5: return;
                                                                                        case 6: return;
                                                                                        case 7: return;
                                                                                        case 8: return;
                                                                                        case 9: return;
                                                                                        case 10: return;
                                                                                        case 11: return;
                                                                                        case 12: return;
                                                                                        case 13: return;
                                                                                        case 14: return;
                                                                                        case 15: return;
                                                                                        case 16: return;
                                                                                        case 17: return;
                                                                                        case 18: return;
                                                                                        case 19: return;
                                                                                        case 20: return;
                                                                                        case 21: return;
                                                                                        case 22: return;
                                                                                        case 23: return;
                                                                                        case 24: return;
                                                                                        case 25: return;
                                                                                        case 26: return;
                                                                                        case 27: return;
                                                                                        case 28: return;
                                                                                        case 29: return;
                                                                                        case 30: return;
                                                                                        case 31: return;
                                                                                        case 32: return;
                                                                                        case 33: return;
                                                                                        case 34: return;
                                                                                        case 35: return;
                                                                                        case 36: return;
                                                                                        case 37: return;
                                                                                        case 38: return;
                                                                                        case 39: return;
                                                                                        default: return;
                                                                                      }
                                                                                    }
                                                                                    local0 = (ub(0, 0, 0x10FE74) + local0);
                                                                                    if (memAddr) {
                                                                                    } else {
                                                                                    }
                                                                                    returnCode = 4;
                                                                                    return;
                                                                                  }
                                                                                  return Pb(0);
                                                                                }
                                                                                memAddr = ub(local0, 0, 0x10FD58);
                                                                                if (ub(local0, 0, 0x10FD58)) {
                                                                                } else {
                                                                                }
                                                                                returnCode = 0x1F;
                                                                                return;
                                                                              }
                                                                              if (3) {
                                                                              } else {
                                                                              }
                                                                              returnCode = 0x19;
                                                                              return;
                                                                            }
                                                                            tempFlag = ub(local0, 0, 0x10FE88);
                                                                            if (ub(local0, 0, 0x10FE88)) {
                                                                            } else {
                                                                            }
                                                                            returnCode = 0x18;
                                                                            return;
                                                                          }
                                                                          if (memValue) {
                                                                          } else {
                                                                          }
                                                                          returnCode = 0x10;
                                                                          return;
                                                                        }
                                                                        returnCode = 4;
                                                                        return;
                                                                      }
                                                                      returnCode = 0x27;
                                                                      return;
                                                                    }
                                                                    local0 = ub(Pb(0), 0, 0x10FE7C);
                                                                    if (ub(Pb(0), 0, 0x10FE7C)) {
                                                                    } else {
                                                                    }
                                                                    returnCode = 0x18;
                                                                    return;
                                                                  }
                                                                  memAddr = 0x10FD50;
                                                                  returnCode = 0x11;
                                                                  return;
                                                                }
                                                                return Pb(0x10FE70);
                                                              }
                                                              return Pb(0x10FE90);
                                                            }
                                                            memAddr = ub((0xFFF ? memAddr : memAddr), memAddr, 8);
                                                            returnCode = 0x11;
                                                            return;
                                                          }
                                                          func346(0xFFF, memAddr, local0);
                                                          memAddr = 0;
                                                          local0 = (ub(0, 0, 0x10FE90) - 1);
                                                          if (local0) {
                                                          } else {
                                                          }
                                                          returnCode = 0x13;
                                                          return;
                                                        }
                                                        tempValue = 0;
                                                        returnCode = 0x1D;
                                                        return;
                                                      }
                                                      returnCode = 0x18;
                                                      return;
                                                    }
                                                    local0 = (ub(0, 0, 0x10FE70) + local0);
                                                    return Pb(0);
                                                  }
                                                  memValue = ub(local0, memAddr, 0);
                                                  if (ub(local0, memAddr, 0)) {
                                                  } else {
                                                  }
                                                  returnCode = 0xC;
                                                  return;
                                                }
                                                func305(memAddr, tempValue);
                                                returnCode = 0x19;
                                                return;
                                              }
                                              local0 = ub(0x21, 0, 0x10FD58);
                                              if (ub(0x21, 0, 0x10FD58)) {
                                              } else {
                                              }
                                              returnCode = 0xB;
                                              return;
                                            }
                                            memAddr = (local0 - 8);
                                            tempValue = ub(memAddr, (local0 - 4), 0);
                                            local0 = (ub(memAddr, (local0 - 4), 0) & 0xFFFFFFF8);
                                            memValue = (0x16 + (ub(memAddr, (local0 - 4), 0) & 0xFFFFFFF8));
                                            if ((tempValue & 1)) {
                                            } else {
                                            }
                                            returnCode = 0x24;
                                            return;
                                          }
                                          local0 = ub(0x19, memValue, 8);
                                          returnCode = 0x1B;
                                          return;
                                        }
                                        memAddr = 0;
                                        returnCode = 0x20;
                                        return;
                                      }
                                      if (memValue) {
                                      } else {
                                      }
                                      returnCode = 0;
                                      return;
                                    }
                                    return 5;
                                  }
                                  tempValue = ub(ub(local0, 0, 0x10FE7C), memValue, 4);
                                  if ((ub(ub(local0, 0, 0x10FE7C), memValue, 4) & 2)) {
                                  } else {
                                  }
                                  returnCode = 0x17;
                                  return;
                                }
                                local0 = memValue;
                                returnCode = 0x1B;
                                return;
                              }
                              return Pb(8);
                            }
                            memValue = ((local0 & 0xF8) + 0x10FD60);
                            local0 = (1 << (local0 >>> 3));
                            tempValue = ub((1 << (local0 >>> 3)), 0, 0x10FE68);
                            if ((local0 & ub((1 << (local0 >>> 3)), 0, 0x10FE68))) {
                            } else {
                            }
                            returnCode = 0x1A;
                            return;
                          }
                          tempValue = (tempValue + 1);
                          memAddr = ub(0x15, memAddr, 8);
                          if (ub(0x15, memAddr, 8)) {
                          } else {
                          }
                          returnCode = 0x1E;
                          return;
                        }
                        returnCode = 0x1F;
                        return;
                      }
                      if (local6) {
                      } else {
                      }
                      returnCode = 0x18;
                      return;
                    }
                    memAddr = (memAddr + 1);
                    local0 = ub(0xF, local0, 8);
                    if (ub(0xF, local0, 8)) {
                    } else {
                    }
                    returnCode = 0x23;
                    return;
                  }
                  if (local0) {
                  } else {
                  }
                  returnCode = 2;
                  return;
                }
                tempValue = ub(0xC, memAddr, 0);
                local0 = (ub(0xC, memAddr, 0) + local0);
                memAddr = (memAddr - tempValue);
                if ((memAddr - tempValue)) {
                } else {
                }
                returnCode = 0x12;
                return;
              }
              returnCode = 0xB;
              return;
            }
            if ((tempValue & 2)) {
            } else {
            }
            returnCode = 0x18;
            return;
          }
          tempValue = (tempValue & 0xFFFFFFF8);
          func305(memValue, (tempValue & 0xFFFFFFF8));
          local0 = (local0 + tempValue);
          if (memAddr) {
          } else {
          }
          returnCode = 0x27;
          return;
        }
        tempValue = 0;
        local6 = ub(0xA, 0, 0x10FE74);
        if (0x29) {
        } else {
        }
        returnCode = 2;
        return;
      }
      if (0x100) {
      } else {
      }
      returnCode = 0x1C;
      continue loop0;
    }
    throw new Error('Unreachable code reached');

  }

  /*
   * AI Summary: The function implements a state machine using a switch statement, where each case utilizes the `ub` function for memory manipulation and conditional logic to ultimately determine a specific return code.
  
   */

  return {
    pb: pb,
    qb: qb,
    rb: memory,
    sb: sb,
    tb: calculateAddressMask,
    ub: ub,
    vb: vb,
    wb: wb,
    xb: xb,
    yb: wb,
    zb: zb,
    Ab: Ab,
    Bb: Bb,
    Cb: Cb,
    Db: ub,
    Eb: Eb,
    Fb: initChunk,
    Gb: Gb,
    Hb: callFromTable,
    Ib: Ib,
    Jb: table0,
    Kb: Kb,
    Lb: Lb,
    Mb: Mb,
    Nb: Nb,
    Ob: Ob,
    Pb: Pb,
    Qb: Qb,
    Rb: Rb,
    Sb: calculateMaskedOffset,
  };
})();